com.sap.xmii.common.tools = com.sap.xmii.common.tools||{};

var parentToolComponent = new com.sap.xmii.common.tools.AppToolBar();

/*
 * Context menu constructor
 */
com.sap.xmii.common.tools.ConfigurationPopup = function() {
};

com.sap.xmii.common.tools.ConfigurationPopup.createConfigurationPopup = function(thisObj, isQueryParams){
	var groupData;
	var configParamsTable;
	var dateFormatter;
	var global_peInfoName = [];
	var DISCRETE_AGG_MODES = ["AVG", "MIN", "MAX", "RANGE"];
	var NO_DISCRETE_AGG_MODES = ["SUM"];
	var DEFAULT_SELECTED_DISCRETE_AGG_MODE = ["MIN"];
	
	com.sap.xmii.common.util.CACHE_DURATION_UNITS = "None,S ("+com.sap.xmii.common.util.MessageBundle.getText("XLBL_SECONDS")+ "),M ("+ com.sap.xmii.common.util.MessageBundle.getText("XLBL_MINUTES") +"),H (" + com.sap.xmii.common.util.MessageBundle.getText("XLBL_HOURS") +"),D (" + com.sap.xmii.common.util.MessageBundle.getText("XLBL_DAYS")+" )";
	function getGroupName(id, groupData){
		for(var i in groupData){
			var group = groupData[i];
			if(id == group.ID){
				return group.Name;
			}
		}
	}
	// Function to get the query names.
	function determineConnectorType(type){
		switch(type){
			case "TagQuery" : return "Tag";
			case "PCoQuery" : return "PCo";
			case "AggregateQuery" : return "Aggregate";
			case "AlarmQuery" : return "Alarm";
			case "OLAPQuery" : return "OLAP";
			case "SQLQuery" : return "SQL";
			case "XacuteQuery" : return "Xacute";
			case "XMLQuery" : return "XML";
			case "MDOQuery" : return "MDO";
			case "CatalogQuery" : return "PIC";
			case "KPIQuery" : return "KPI";
			default : " ";
		}       
	}
	
	// function which will return the value ex: if input is m it will return Minute
	function getSelectedValueforDurationUnit(selectedKey) {
		var text;
		switch(selectedKey){
		case "None" :
			text = "None";
			return text;
			break;
		case "S" :
			text = "S (" + com.sap.xmii.common.util.MessageBundle.getText("XLBL_SECONDS")+ ")";
			return text;
			break;
		case "M" :
			text = "M ("+ com.sap.xmii.common.util.MessageBundle.getText("XLBL_MINUTES")+ ")";
			return text;
			break;
		case "H" :
			text = "H (" + com.sap.xmii.common.util.MessageBundle.getText("XLBL_HOURS")+ ")";
			return text;
			break;
		case "D" :
			text = "D (" + com.sap.xmii.common.util.MessageBundle.getText("XLBL_DAYS")+ ")";
			return text;
			break;
		}
	}
	
	
	/**
	 * Creates Query Parameter Selection Dialog.
	 * @param menuButton - Context Menu Object.
	 * @param configParamsTable - Query Parameter Configuration Dialog Table.
	 * @param parameterDataArray - Array containing the list of Parameters for the Query Object.
	 * 					  [{ParameterName: "value", ParameterValue: "Value", ParameterOriginalName: "value"}]
	 * @return void
	 */
	function createQueryParameterSelectionDialog(configParamsTable, groupData){

		var paramsSelectionDialog = new sap.m.Dialog({modal: true});
		paramsSelectionDialog.setTitle(com.sap.xmii.common.util.MessageBundle.getText("XLBL_SELECT_PARAMETERS"));
		paramsSelectionDialog.attachAfterClose(function() {//Close Event
			paramsSelectionDialog.destroy();
			paramsSelectionDialog.destroyContent();
			paramsSelectionDialog.destroyButtons();
		});

		//Already Selected Parameters.
		var querySelectedParameters = configParamsTable.getModel().getData().modelData;
		if(querySelectedParameters == null)
			querySelectedParameters = [];
		var parameterGroups = configParamsTable.data("GroupsSelected");
		if(parameterGroups == null)
			parameterGroups = [];
		var groupRowData = groupData;

		for(var j = 0; j < groupRowData.length; j++){
			if(groupRowData[j].children != undefined){
				for(var k = 0; k < groupRowData[j].children.length; k++) {
					groupRowData[j].children[k].isSelected = sap.ui.commons.TriStateCheckBoxState.Unchecked;
				}
				var childPerGroup = groupRowData[j].children.length;
				var selectedChild = 0;
				for(var i = 0; i < querySelectedParameters.length; i++) {
					if(groupRowData[j].id == querySelectedParameters[i].groupId){
						querySelectedParameters[i].isSelected = sap.ui.commons.TriStateCheckBoxState.Checked;
						selectedChild = selectedChild + 1;
					}
				}
				if(childPerGroup == selectedChild)
					groupRowData[j].isSelected = sap.ui.commons.TriStateCheckBoxState.Checked;
				else if(selectedChild > 0)
					groupRowData[j].isSelected = sap.ui.commons.TriStateCheckBoxState.Mixed;
				else
					groupRowData[j].isSelected = sap.ui.commons.TriStateCheckBoxState.Unchecked; 
				
				
			}
		}
		var nSelectedChildren = 0;
		
		if(thisObj.getChartTemplateObject().getProperty("KPIObject") == "true")
			filterGroupParameter(groupRowData, "KPI");
		else if(thisObj.getChartTemplateObject().chartConfig.Type == "i5Grid")
			filterGroupParameter(groupRowData, "i5Grid");
		else if(thisObj.getChartTemplateObject().chartConfig.Type == "i5Chart")
			filterGroupParameter(groupRowData, "i5Chart");
		
		var checkBox = new sap.ui.commons.TriStateCheckBox({tooltip:com.sap.xmii.common.util.MessageBundle.getText("XTLT_CHECKBOX")});
		checkBox.bindProperty("selectionState", "isSelected");
		//Create an instance of the table control
		var newParamsArray = querySelectedParameters.slice(0);
		var paramsSelectionTable = new sap.ui.table.TreeTable(com.sap.xmii.common.util.MIIi5Util.generateGuid(),{
			columns: [
		          new sap.ui.table.Column({label: com.sap.xmii.common.util.MessageBundle.getText("XLBL_NAME"),tooltip:com.sap.xmii.common.util.MessageBundle.getText("XLBL_PARAMETERS"), template: checkBox.bindProperty("text", "name"),textAlign: "Center",width:"100%",filterProperty:"name"}),
		          new sap.ui.table.Column({label: com.sap.xmii.common.util.MessageBundle.getText("XLBL_DESCRIPTION"), template: new sap.ui.commons.TextView({tooltip: com.sap.xmii.common.util.MessageBundle.getText("XLBL_DESCRIPTION")}).bindProperty("text", "localizedDescription"),textAlign: "Center",width:"100%",filterProperty:"localizedDescription"}),//need to add localized description
		          new sap.ui.table.Column({label: com.sap.xmii.common.util.MessageBundle.getText("XLBL_ID"),tooltip:com.sap.xmii.common.util.MessageBundle.getText("XLBL_ID"), template: "id",textAlign: "Center",width:"5%",visible:false}),
            ],
            allowColumnReordering: false,
            width: "99%",
            SelectionMode: "None",
	        enableSelectAll : false,
	        selectionBehavior : "RowOnly",
            expandFirstLevel: false,
            toggleOpenState: function(oEvent) {
				var oRowContext = oEvent.getParameter("rowContext");
				var bExpanded = oEvent.getParameter("expanded");
				nSelectedChildren = 0;
				if(bExpanded){
					var id = oRowContext.getProperty("id");
					var parameters;
					for(index in groupRowData){
						if(groupRowData[index].id == id)
							parameters = groupData[index].children;
					}
	
					if(parameters != null){
						if(newParamsArray != null && newParamsArray.length != 0){
							jQuery.each(newParamsArray, function(iIndex, selectedParam) {
								jQuery.each(parameters, function(oIndex, loadedParam) {
									if(loadedParam.name == selectedParam.name && loadedParam.groupId == selectedParam.groupId){
										loadedParam.isSelected = sap.ui.commons.TriStateCheckBoxState.Checked;
										newParamsArray[iIndex] = selectedParam; 
										nSelectedChildren+=1;
									}
	
								});
	
							});
						}
					} else {
	
						for(index in groupRowData){
							if(groupRowData[index].id == id)
								delete groupData[index].children;
						}
					}
				}
			},
			filter: function(oEvent){
				var treeTable = oEvent.getSource();
				var oBinding = treeTable.getBinding();
				var contexts = oBinding.getRootContexts();
				if(oEvent.mParameters.value != ""){
					for(var i=0; i < contexts.length; i++){
						oBinding.expand(i);
						//these three for loop is to traverse the every parameter and mark checked for allready selected params
						if(newParamsArray != null){
							jQuery.each(contexts[i].oModel.oData.modelData, function(xIndex,tempGroup){
								jQuery.each(tempGroup.children, function(xIndex,tempChild){
									jQuery.each(newParamsArray, function(iIndex, selectedParam) {
										if((selectedParam.name == tempChild.name) && (selectedParam.groupId == tempChild.groupId)) {
											tempChild.isSelected = sap.ui.commons.TriStateCheckBoxState.Checked;
										}
									});
								});
							});
						}

					}
				} else {
					for(var i=0; i < contexts.length; i++){
						oBinding.expand(i);
					}
				}

			}
		});

		var newGroupsArray = parameterGroups.slice(0);
		var fnUpdateChilds = function(oBinding, oContext, sPropName, bChecked) {

			if (oBinding.hasChildren(oContext)) {
				//add the selectedGroups, and remove the ones deselected
				if(bChecked == sap.ui.commons.TriStateCheckBoxState.Checked)
					newGroupsArray.push(oContext.getObject());
				else
					newGroupsArray.splice(newGroupsArray.indexOf(oContext.getObject()),1);
				var aChildContexts = oBinding.getNodeContexts(oContext);
				for(var i=0; i< aChildContexts.length  ; i++){
					var oChildContext = aChildContexts[i];
					oChildContext.getModel().setProperty(sPropName, bChecked, oChildContext);
					if(bChecked == sap.ui.commons.TriStateCheckBoxState.Checked){
						var present = false;
						for(var j = 0; j < newParamsArray.length ; j++){
							if((oChildContext.getObject().name == newParamsArray[j].name) && (oChildContext.getObject().groupId == newParamsArray[j].groupId))
								present = true;
						}
						if(present == false)
							newParamsArray.push(oChildContext.getObject());
					}else{
						newParamsArray.splice(newParamsArray.indexOf(oChildContext.getObject()),1);
						//		i--;    this line is made comment because it leads to infinite loop
					}
				}
			} else {
				if(oContext.getObject().propValue != undefined){  // this condition to prevent parent  with no child to select
					oContext.getModel().setProperty(sPropName, bChecked, oContext);
					if(bChecked == sap.ui.commons.TriStateCheckBoxState.Checked){
						newParamsArray.push(oContext.getObject());
					}else{
						var paramToBeRemoved = oContext.getObject().name;
						for(var j=0; j< newParamsArray.length; j++){
							var contextInArray = newParamsArray[j];
							if ((contextInArray.name == paramToBeRemoved) && (contextInArray.groupId == oContext.getObject().groupId)){
								newParamsArray.splice(j, 1);
								j--;
							}
						}
					}
					var nSelectedChildren = 0;
					var oParentContext ;//= oBinding.getRootContexts()[oContext.getPath().charAt(11)];
					var rootContexts = oBinding.getRootContexts();
					var pathStr;
					for (var index = 0, contextLength = rootContexts.length; index < contextLength; index++){
						pathStr = rootContexts[index].getPath() + '/';
						if (pathStr === oContext.getPath().substr(0, pathStr.length)){
							oParentContext = rootContexts[index];
							break;
						}
					}
					if(oBinding.hasChildren(oParentContext)){
						var aChildContexts = oBinding.getNodeContexts(oParentContext);
						var parentState;
						jQuery.each(aChildContexts, function(iIndex, oChildContext) {
							var isChecked = oChildContext.getProperty("isSelected");
							if(isChecked == sap.ui.commons.TriStateCheckBoxState.Checked){
								nSelectedChildren++;
							}
						});
					}
					if(nSelectedChildren === 0) {
						oParentContext.getModel().setProperty(sPropName, sap.ui.commons.TriStateCheckBoxState.Unchecked, oParentContext);
					} else if(nSelectedChildren === oBinding.getNodeContexts(oParentContext).length){
						oParentContext.getModel().setProperty(sPropName, sap.ui.commons.TriStateCheckBoxState.Checked, oParentContext);
					} else {
						oParentContext.getModel().setProperty(sPropName, sap.ui.commons.TriStateCheckBoxState.Mixed, oParentContext);
					}

					if(jQuery.inArray(oParentContext.getObject(), newGroupsArray) == -1)
						newGroupsArray.push(oParentContext.getObject());
				} else {
					var oPath = oContext.getPath();
					var rootContexts = oBinding.getRootContexts();
					var oParentContext;
					var obj = oContext.getObject();
					var children = obj.children;
					var newParamLength = newParamsArray.length;
					var hasParamFlag = false;
					var paramToBeRemoved;
					var contextInArray;
					if ( obj.isSelected === "Checked" ) {
						for ( var index = 0, childrenLength = children.length; index < childrenLength; index++ ) {
							hasParamFlag = false;
							for (var indexP = 0; indexP < newParamLength; indexP++){
								if (newParamsArray[indexP].name === children[index].name && 
									newParamsArray[indexP].groupName === children[index].groupName) {
									hasParamFlag = true;
									break;
								}
							}
							if (!hasParamFlag) {
								children[index].isSelected = "Checked";
								newParamsArray.push(children[index]);
							}
						}
					} else {
						for ( var index = 0, childrenLength = children.length; index < childrenLength; index++ ) {
							if (children[index].isSelected === "Checked") {
								children[index].isSelected = "Unchecked";
								paramToBeRemoved = children[index].name;
								for(var j=0; j< newParamsArray.length; j++){
									contextInArray = newParamsArray[j];
									if (contextInArray.name == paramToBeRemoved){
										newParamsArray.splice(j, 1);
										j--;
									}
								}
							}
						}
					}

					for (var index = 0, contextLength = rootContexts.length; index < contextLength; index++){
						if (rootContexts[index].getPath() === oPath){
							oParentContext = rootContexts[index];
							oParentContext.getModel().setProperty(sPropName, bChecked, oParentContext);
						}
					}
				}
			}
			if(newParamsArray.length != 0)
				sap.ui.getCore().byId("ConfigureQueryTableDeleteAllButton").setEnabled(true);	
			else
				sap.ui.getCore().byId("ConfigureQueryTableDeleteAllButton").setEnabled(false);
		};
		
		checkBox.attachChange(function(oEvent) {
			var oContext = this.getBindingContext();
			var oBinding = paramsSelectionTable.getBinding("rows");
			fnUpdateChilds(oBinding, oContext, "isSelected", this.getSelectionState());
		});

		//Create model and bind the table rows to this model
		var paramsSelectionModel = new sap.ui.model.json.JSONModel();
		paramsSelectionModel.setData({modelData: groupData});
		paramsSelectionTable.setModel(paramsSelectionModel);
		paramsSelectionTable.bindRows("/modelData");

		//Apply Button for the Dialog and its event Handler.
		var okButton = new sap.m.Button({text: com.sap.xmii.common.util.MessageBundle.getText("XBUT_OK"), tooltip: com.sap.xmii.common.util.MessageBundle.getText("XBUT_OK")});
		okButton.attachPress(function() {
			
			var selectedParamData = configParamsTable.getModel().getData();
			selectedParamData.modelData = newParamsArray;
			configParamsTable.data("GroupsSelected",newParamsArray);
			selectedParamData.modelData.sort(function(a, b){
				var group1=a.groupId, group2=b.groupId;
				if (group1 < group2) //sort string ascending
					return -1 ;
				if (group1 > group2)
					return 1;
				return 0 ;//default return value (no sorting)
			});
			configParamsTable.getModel().setData(selectedParamData);
			configParamsTable.rerender();
			if(selectedParamData.modelData.length != 0)
				sap.ui.getCore().byId("ConfigureQueryTableDeleteAllButton").setEnabled(true);	
			paramsSelectionDialog.close();
		});
		okButton.addEventDelegate({
			onBeforeRendering: function(oEvent){
				$(okButton.getId()).keyup(function(e) {
					if(e.which == 13) {
						okButton.firePress();
					}
				});
			},
			onAfterRendering: function(oEvent){
				okButton.focus();
			}
		}, okButton);
		//Cancel Button for the Dialog and its event Handler.
		var cancelButton = new sap.m.Button({text: com.sap.xmii.common.util.MessageBundle.getText("XBUT_CANCEL"), tooltip: com.sap.xmii.common.util.MessageBundle.getText("XBUT_CANCEL")});
		cancelButton.attachPress(function() {
			paramsSelectionDialog.close();
		});

		paramsSelectionDialog.addButton(okButton);
		paramsSelectionDialog.addButton(cancelButton);

		paramsSelectionDialog.addContent(paramsSelectionTable);
		paramsSelectionDialog.setContentWidth("25%");

		paramsSelectionDialog.open();
	}
	
	//This function extracts the date from XML date format and returns javascript date object
	function extractJavascriptDate(xmlDate) {
		var splitDate = xmlDate.split("T"); //result: ["2013-08-23", "16:46:51+0530"]
		var splitDateAgain = splitDate[0].split("-"); //result: ["2013", "08", "23"]
		var splitTimesZone = splitDate[1].split("+"); //result: ["16:46:51", "0530"]
		var splitTimestamp = splitTimesZone[0].split(":"); //result: ["16", "46", "51"]
		var month = '' + Number(splitDateAgain[1]) - 1;
		return new Date(splitDateAgain[0], month, splitDateAgain[2], splitTimestamp[0], splitTimestamp[1], splitTimestamp[2]);
	}
	
	//this function gets the date in string format 
	function getYyyymmdd(date) {
		var nd = extractJavascriptDate(date);
		jQuery.sap.log.info("date: "+nd);
		var fy = nd.getFullYear();
		var mm = nd.getMonth()+1;
		//prefix "0" for right format of date (ex :20130520)
		mm = mm <= 9 ? "0"+mm : mm;
		var dd = nd.getDate();
		dd = dd <= 9 ? "0"+dd : dd;
		var formattedDate = ""+fy+mm+dd;
		jQuery.sap.log.info("formatted date is "+formattedDate);
		return formattedDate;
	}

	//this function gets the time in string format 
	function getHHmmss(date) {
		var nd = extractJavascriptDate(date);
		jQuery.sap.log.info("date: "+nd);
		var hh = nd.getHours();
		var mm = nd.getMinutes();
		var ss = nd.getSeconds();
		//prefix "0" for right format of time (ex: 101050)
		hh = hh <= 9 ? "0"+hh : hh;
		mm = mm <= 9 ? "0"+mm : mm;
		ss = ss <= 9 ? "0"+ss : ss;
		var formattedTime = hh+":"+mm+":"+ss;
		jQuery.sap.log.info("formatted time is "+formattedTime);
		return formattedTime;
	}
	
	function applyDateTime(datePicker,timeField,oContext){
		var sdate = datePicker.getValue();
		var sYear = sdate.substring(0,4);
		var sMonth = sdate.substring(4,6);
		var sDay = sdate.substring(6,8);

		var stime = timeField.getValue();
		var sTimeArr = stime.split(":");
		var sHours = sTimeArr[0];
		var sMinutes = sTimeArr[1];
		var sSeconds = sTimeArr[2];

		var dateString = sMonth+"/"+sDay+"/"+sYear+" "+stime;
		var formattedDate ;
		if(dateFormatter === undefined)
			formattedDate = dateString;
		else
			if(thisObj.getQueryObject().FileType == "CatalogQuery" && thisObj.getQueryObject().Mode == "PICAnalysis")
				formattedDate = com.sap.xmii.common.util.MIIi5Util.formatDate(dateString,"MM/dd/yyyy HH:mm:ss", "yyyy-MM-dd'T'HH:mm:ss");
			else
				formattedDate = com.sap.xmii.common.util.MIIi5Util.formatDate(dateString,"MM/dd/yyyy HH:mm:ss", dateFormatter);
		jQuery.sap.log.info("start date string " + formattedDate);
		return formattedDate;
	}
	
	/**
	 * This function is used to add Parameters in the Query Parameter Configuration Table.
	 * @param configParamsTable - Query Parameter Configuration Dialog Table.
	 * @return void
	 */
	function addParameters(configParamsTable) {
		//get category data
	
		if(thisObj.CategoryList == undefined || com.sap.xmii.common.util.confPopupType == null || com.sap.xmii.common.util.confPopupType != thisObj.confPopupType) {
			var serviceURL = com.sap.xmii.common.util.GenericConstants.UI5CATALOG_URL;
			var urlParams = {}; 
			var tagId;
			if(thisObj.getQueryObject().getParameter("VirtualTagID") != undefined && isQueryParams == true)
				tagId = thisObj.getQueryObject().getParameter("VirtualTagID");
			if(tagId != undefined || tagId != null)
				urlParams.TagId = tagId;
			urlParams.Mode = "TemplateCategoryList"; 
			if(isQueryParams == true) {
				urlParams.ObjectName = thisObj.getQueryTemplate();
			} else if(isQueryParams == false) {
				urlParams.ObjectName = thisObj.getDisplayTemplate();
			}
			thisObj.CategoryList = com.sap.xmii.common.util.MIIi5Util.getServiceResponseInJson(serviceURL, urlParams);
			com.sap.xmii.common.util.confPopupType = thisObj.confPopupType;
		}
		
		groupData = thisObj.CategoryList;
		// delete Aggregation Modes parameter from PIC Analysis query.
		for(var i = 0; i < groupData.length; i++){
			if (groupData[i].id === 55 ) {
				for(var j = 0; j < groupData[i].children.length; j++){
					if (45 === groupData[i].children[j].contextType){
						groupData[i].children.splice(j,1);
					}
				}
			}
		}
		//Initializing Transaction Parameters value if it is null
		if(thisObj.getQueryObject().getParameter("VirtualTagID") != undefined && isQueryParams == true){
			for(var i = 0; i < groupData.length; i++){
				if (groupData[i].id === 62 && groupData[i].children.length > 0) {
					for(var j = 0; j< groupData[i].children.length; j++){
						if(groupData[i].children[j].propValue == null || groupData[i].children[j].propValue == undefined)
							groupData[i].children[j].propValue = "";
						if(groupData[i].children[j].defaultPropValue == null || groupData[i].children[j].defaultPropValue == undefined)
							groupData[i].children[j].defaultPropValue = "";
					}
					break;
				}
			}
		}
		// to sort the array of objects
		if(groupData != undefined){
			groupData.sort(function(a, b){
				var tempCategoryA=a.name.toLowerCase(), tempCategoryB=b.name.toLowerCase();
				if (tempCategoryA < tempCategoryB) //sort string ascending
					return -1 ;
				if (tempCategoryA > tempCategoryB)
					return 1;
				return 0 ;//default return value (no sorting)
			});
		}
		createQueryParameterSelectionDialog(configParamsTable,groupData);
	}
	/**
	 * This function sets the propValue = "" if the parameter is deleted from ConfigureParamsTable
	 */
	function deleteValuefromCategoryList(deletedItems){
		if(thisObj.CategoryList == undefined){
			var serviceURL = com.sap.xmii.common.util.GenericConstants.UI5CATALOG_URL;
			var urlParams = {}; 
			urlParams.Mode = "TemplateCategoryList"; 
			if(isQueryParams == true) {
				urlParams.ObjectName = thisObj.getQueryTemplate();
			} else if(isQueryParams == false) {
				urlParams.ObjectName = thisObj.getDisplayTemplate();
			}
			thisObj.CategoryList = com.sap.xmii.common.util.MIIi5Util.getServiceResponseInJson(serviceURL, urlParams);
			com.sap.xmii.common.util.confPopupType = thisObj.confPopupType;
		}

		for(var i = 0 ; i < deletedItems.length ; i++){
			if(deletedItems[i].propValue != ""){
				for(var k = 0 ; k < thisObj.CategoryList.length ; k++){
					if(thisObj.CategoryList[k].id ==  deletedItems[i].groupId){
						for(var j = 0 ; j < thisObj.CategoryList[k].children.length ; j++){
							if(thisObj.CategoryList[k].children[j].name == deletedItems[i].name){
								thisObj.CategoryList[k].children[j].propValue = "";
								break;
							}
						}
					}
				}
			}
		}
	}
	/**
	 * This function is used to delete selected row in the Query Parameter Configuration Table. 
	 */
	function deleteParameter(rowContext) {
		var index = rowContext.substr(rowContext.lastIndexOf("/")+1,rowContext.length) ;
		var tableDataArray = configParamsTable.getModel().getData().modelData;
		var deletedCategory = tableDataArray.splice(index,1);
		deleteValuefromCategoryList(deletedCategory);
		if(tableDataArray.length == 0)
			sap.ui.getCore().byId("ConfigureQueryTableDeleteAllButton").setEnabled(false);
		
		configParamsTable .getModel().setData({modelData: tableDataArray});
		configParamsTable .getModel().refresh();
	}

	/**
	 * This function is used to delete all rows in the Query Parameter Configuration Table 
	 */
	function deleteAllParameters(configParamsTable) {
		var categoryList = configParamsTable.getModel().getData().modelData;
		deleteValuefromCategoryList(categoryList);
		var emptyDataArray = [];
		configParamsTable.getModel().setData({modelData: emptyDataArray});
		configParamsTable.rerender();
		sap.ui.getCore().byId("ConfigureParamsTable").data("GroupsSelected",[]);
	}
	
	function pushToChangedParameters(paramName , paramValue, isBoolean , isDisplayParam){
		
		var arr = $.grep(thisObj.changedParams,function(obj){
			if(obj.Name ===  paramName){
				if(isBoolean != undefined && isBoolean == true){
					if(paramValue == "true"){
						obj.Value = true;
					}else{
						obj.Value = false;
					}
				}else
					obj.Value = paramValue;
				return obj;
			}
		});
		
		if(!isArrayNotEmpty(arr)){
			if(isBoolean != undefined && isBoolean == true){
				if(paramValue == "true"){
					thisObj.changedParams.push({Name :paramName , Value : true , "isDisplayParam" : isDisplayParam});
				}else{
					thisObj.changedParams.push({Name :paramName , Value : false , "isDisplayParam" :isDisplayParam});
				}
			}else
			     if(thisObj.getQueryObject().FileType == "CatalogQuery" && thisObj.getQueryObject().Mode == "PICAnalysis") {
				    if(paramName!="DateFormat")
						thisObj.changedParams.push({Name :paramName , Value : paramValue , "isDisplayParam" :isDisplayParam});
				 }else
					thisObj.changedParams.push({Name :paramName , Value : paramValue , "isDisplayParam": isDisplayParam});
		}
	}
	function openConfigurationPopup(thisObj, isQueryParams){
		//clear all the tooltips before opening any popup
		$('.v-m-tooltip').find('.v-background').remove();
		
		if("PICAnalysis" == thisObj.getQueryObject().Mode
				&& thisObj.getQueryObject().getParameter("SelectedTagCategories") != undefined
				&& thisObj.getQueryObject().getParameter("SelectedTagCategories") != ""){
			var newSelectedTagCat = decodeURIComponent(thisObj.getQueryObject().getParameter("SelectedTagCategories"));
			var newSelectedTagCatAliases = decodeURIComponent(thisObj.getQueryObject().getParameter("SelectedTagCategoryAliases"));
			var newDisplaySelectedTagCat = decodeURIComponent(thisObj.getQueryObject().getParameter("DisplayTagCategories"));
			
			thisObj.getQueryObject().setParameter("SelectedTagCategories",newSelectedTagCat);
			thisObj.getQueryObject().setParameter("SelectedTagCategoryAliases",newSelectedTagCatAliases);
			thisObj.getQueryObject().setParameter("DisplayTagCategories",newDisplaySelectedTagCat);
		}
		
		var confPopupDialogId = com.sap.xmii.common.util.MIIi5Util.generateGuid();
		var title = '';
		if(isQueryParams == true)
			title = com.sap.xmii.common.util.MessageBundle.getText("XFLD_CONF_QUERY_PARAMS");
		else
			title = com.sap.xmii.common.util.MessageBundle.getText("XFLD_CONF_DISPLAY_PARAMS");
			
		var configureParamsDialog = new sap.m.Dialog(confPopupDialogId, {
			modal: true, 
			title : title, 
			contentWidth:"75%", 
			contentHeight:"70%"}).addStyleClass("sapUiSizeCompact");
		
		function closeConfigurationPopup(event){
			configureParamsDialog.destroyContent();
			configureParamsDialog.destroyButtons();
			configParamsTable.destroy();
		}
		
		configureParamsDialog.attachAfterClose(closeConfigurationPopup);
		
		var applyButton = new sap.m.Button("queryApplyButton", {
			text: com.sap.xmii.common.util.MessageBundle.getText("XBUT_APPLY"),
			tooltip: com.sap.xmii.common.util.MessageBundle.getText("XLBL_APPLY_SELECTED_PARAMETERS")
		});
		applyButton.attachPress(function() {
			//apply all the parameters from table model on chart/grid
			//remove shadow and close popup.
			var configParamsTable = sap.ui.getCore().byId("ConfigureParamsTable");
			var tableModel = configParamsTable.getModel().getData().modelData;
			if(isSpecLimitColumnChanged(thisObj))
				processSpecLimitColumn(thisObj);
			if(isMarkerStyleSetToNull(thisObj))
				setNullValueforMarkerStyle(thisObj);
			if(thisObj.getQueryObject().getParameter("VirtualTagID") != undefined)
				thisObj.changedParams = modifyTransactionParameters(thisObj.changedParams,tableModel);
			for(var i=0; i<thisObj.changedParams.length; i++) {
				if(isQueryParams == true) {
					if(thisObj.changedParams[i].isDisplayParam)
						thisObj.getChartTemplateObject().setProperty(thisObj.changedParams[i].Name, thisObj.changedParams[i].Value);
					else 
						thisObj.getQueryObject().setParameter(thisObj.changedParams[i].Name, thisObj.changedParams[i].Value);
	
				}else{
					thisObj.getChartTemplateObject().setProperty(thisObj.changedParams[i].Name, thisObj.changedParams[i].Value);
				}
			}
			// apply changed params to configure visulization for PIC Analysis
			if(thisObj.kpiViewObj){
				//update KPI configuration after "apply" is pressed in config parameters 
				var KPIObj  =  thisObj.getKpiViewObj();
				if(KPIObj.FileType == "CatalogQuery" && KPIObj.Mode == "PICAnalysis"){
				if (KPIObj.Config == undefined) {
		        	KPIObj = $.extend(true, {}, createDefaultKPIConfig(KPIObj), KPIObj);
		       		KPIObj.Config.chartType = com.sap.xmii.common.util.i5ChartTypes.CHART_TYPE_LINE;
		    }
				var addChangedPropertyToConfig = function(changedPropertyName){
		    	if (KPIObj.Config.changedProperties.indexOf(changedPropertyName) == -1) {
					KPIObj.Config.changedProperties.push(changedPropertyName);
				}
		    };
		  		var addQueryPropertyToConfig = function(name, value){
		    	var property = {
		    			"Name" : "" + name + "",
		    			"Value" : "" + value + ""
		    		};
		    	if (KPIObj.Config.QueryParameters != undefined) {
					var index = KPIObj.Config.QueryParameters.length;
					KPIObj.Config.QueryParameters[index] = property;
					KPIObj.Config.QueryParameters.length = index + 1;
				} else {
					KPIObj.Config.QueryParameters = {};
					KPIObj.Config.QueryParameters[0] = property;
					KPIObj.Config.QueryParameters.length = 1;
				}
		    };
		    	var toggleDisplayLabelColumnStatus = function (oDuration, yearDisplay, quarterDisplay, monthDisplay, weekDisplay, dayDisplay, shiftDisplay, hourDisplay, minuteDisplay) {
		    	oDuration.yearDisplay = yearDisplay;
		    	oDuration.quarterDisplay = quarterDisplay;
		    	oDuration.monthDisplay = monthDisplay;
		    	oDuration.weekDisplay = weekDisplay;
		    	oDuration.dayDisplay = dayDisplay;
		    	oDuration.shiftDisplay = shiftDisplay;
		    	oDuration.hourDisplay = hourDisplay;
		    	oDuration.minuteDisplay = minuteDisplay;
		    };
		    	var setDisplayLabelColumnForGranularity = function (granularity, oDuration) {
		    	if (granularity == "Year"){
		    		toggleDisplayLabelColumnStatus(oDuration, true, false, false, false, false, false, false);
		    	}
		    	if (granularity == "Quarter") {
		    		toggleDisplayLabelColumnStatus(oDuration, true, true, false, false, false, false, false);
		    	}
		    	if (granularity == "Month") {
		    		toggleDisplayLabelColumnStatus(oDuration, true, false, true, false, false, false, false);
		    	}
		    	if (granularity == "Week") {
		    		toggleDisplayLabelColumnStatus(oDuration, true, false, true, true, false, false, false);
		    	}
		    	if (granularity == "Day") {
		    		toggleDisplayLabelColumnStatus(oDuration, true, false, true, true, true, false, false);
		    	}
		    	if (granularity == "Hour") {
		    		toggleDisplayLabelColumnStatus(oDuration, true, false, true, true, true, true, false);
		    	}
		    	if (granularity.match(/Minutes/) != null) {
		    		toggleDisplayLabelColumnStatus(oDuration, true, false, true, true, true, true, true);
		    	}
		    	if (granularity == "None" || granularity == ""){
		    		toggleDisplayLabelColumnStatus(oDuration, false, false, false, false, false, false, false);
		    	}
		    };
		    	//Add the changed parameters to the kpiObject configuration
		   		if(isArrayNotEmpty(thisObj.changedParams)){
		    		var startDate = null;
		    		var endDate = null;
		    	for(var i=0; i < thisObj.changedParams.length; i++){
		    		var paramName = thisObj.changedParams[i].Name;
		    		var paramValue = thisObj.changedParams[i].Value;		
		    		addQueryPropertyToConfig(paramName, paramValue);
		    		if(paramName == "TimePeriod"){
		    			KPIObj.Config.duration.selectedDuration = paramValue;
		    		}else if(paramName == "StartDate"){
		    			startDate = paramValue;
						KPIObj.Config.duration.startDate = getYyyymmddFromDate(new Date(startDate));
						KPIObj.Config.duration.start_ISO8601 = toISO8601DateString(getYyyymmddFromDate(new Date(startDate)),getHhmmssFromDate(new Date(startDate)));
		    		}else if(paramName == "EndDate"){
		    			endDate = paramValue;
						KPIObj.Config.duration.endDate = getYyyymmddFromDate(new Date(endDate));
						KPIObj.Config.duration.end_ISO8601 = toISO8601DateString(getYyyymmddFromDate(new Date(endDate)),getHhmmssFromDate(new Date(endDate)));
		    		}else if(paramName == "Granularity"){
			    		KPIObj.Config.duration.granularity = paramValue;
			    		setDisplayLabelColumnForGranularity(paramValue, KPIObj.Config.duration);
			        	addChangedPropertyToConfig("granularity");
		    		}else if(paramName == "SelectedTagCategories"){
		    			KPIObj.Config.selectedCategories = paramValue.split(",");
		    			KPIObj.Config.candidateCategories = paramValue.split(",");
		    			
		    		}else if(paramName == "SelectedTagCategoryAliases"){
		    			KPIObj.Config.selectedCategoriesAliases = paramValue.split(",");
		    			KPIObj.Config.candidateCategoriesAliases = paramValue.split(",");
		    			
		    		}else if(paramName == "AnalysisAggregationModes"){
		    			KPIObj.Config.aggregationModes = paramValue.split(/,/);
		    			KPIObj.Config.selectedAggregationModes = paramValue.split(/,/);
		    			KPIObj.Config.selectedDrillDownAggregationModes = [];
		    			addChangedPropertyToConfig("aggregationModes");
		    		}else if(paramName == "SelectedTagCategoryUOMs"){
		    			KPIObj.Config.categoryUoMs = paramValue.split(/,/);
		    			KPIObj.Config.selectedCategoryUoMs = paramValue.split(/,/);
		    		}else if(paramName == "SelectedGroupByProperties"){
						var sPath = KPIObj.Path + "/" + removeExtension(KPIObj.Name);
						var isPropAliasUsed = true;
						var params = {
							"Mode" : "loadGroupByAlias",
							"objectname" :sPath,
							"GroupId" : 55,
							"content-type" : "text/json",
							"isPropAliasUsed": isPropAliasUsed,
							"SelectedGroupByProperties":paramValue
							};
						//alias resultSet from server	
						var result = getDataFromServer(XMII_CECATALOG_URL, params);
						var defaultValues = "";
						if(isObjectNotNull(result) && isObjectNotNull(result.Rowsets) && isObjectNotNull(result.Rowsets.Rowset) &&  isObjectNotNull(result.Rowsets.Rowset[0])){
							var row = result.Rowsets.Rowset[0].Row;
							if(row != null && row.length > 0){
								for( var j=0; j < row.length; j++){
										var rowAt = row[j];
										if(rowAt.Name == 'SelectedGroupByProperties'){
											// get alias
											defaultValues = rowAt.DefaultValue;
										}
								}
							}
						}
		    			//Have to reset dimensions in the KPIConfig, as the values from configure query dialog should be taken
		    			var dimensions = [];
		    			var level=0;
		    			dimensions.push({
		    				level : level,
		    				dimension : "Namespace",
		    				selected : true,
		    				filterSelected : '',
		    				values : []
		    			});
		    			var valueArray = defaultValues.split(",");
		    			for(var j=0; j < valueArray.length; j++){
							if(valueArray[j] != ""){
							    var dimensionName = valueArray[j];
								if(dimensionName.indexOf("=")>-1) {
									var property = dimensionName.split("=")[1];
									dimensionName = dimensionName.split("=")[0];
								}else{
									var index = valueArray[j].indexOf(".");
									var property = valueArray[j];
									if(index > -1){
										property = valueArray[j].substring(index+1);
									}
								}
								var selected = false;
								level = j+1;
								dimensions.push({
									level : level,
									dimension : property,
									groupByName: dimensionName,
									selected : selected,
									filterSelected : '',
									values : []
								});
							}
		    			}
		    			KPIObj.Config.dimensions = dimensions;
		    		}
		    	}
		   		}
		   		var chartCellId = "";
		   		if (!com.sap.xmii.common.util.MIIi5Util.isNullOrEmpty(thisObj.chartPosId) && thisObj.chartPosId.match(/kpi/)){
		   			chartCellId = thisObj.chartPosId.replace(/kpi/, "");
		   		}
		   		if(sap.ui.getCore().byId(chartCellId)){
		   			sap.ui.getCore().byId(chartCellId).data("Object").Config = KPIObj.Config;
		   		} else {
		   			thisObj.setKpiViewObj(KPIObj);
		   		}
				}
			}
			if("PICAnalysis" == thisObj.getQueryObject().Mode){
				thisObj.selectedQueryParams = tableModel;
				thisObj.getChartTemplateObject().setProperty("ValueColumns", getValueColumnsForChart());
				var timeLabel = getLabelColumnsForSelectedConfiguration();
				if(timeLabel != undefined && timeLabel != ""){
					thisObj.getChartObject().setXDimensions(timeLabel);
					thisObj.getChartTemplateObject().setProperty("LabelColumns", timeLabel+",Namespace");
				}
				thisObj.refresh();
				thisObj.queryParams = jQuery.extend(true,[],thisObj.selectedQueryParams);
			}else if(isQueryParams == true) {
				thisObj.selectedQueryParams = tableModel;
				//thisObj.refresh();
				thisObj.refreshChart();
				thisObj.queryParams = jQuery.extend(true,[],thisObj.selectedQueryParams);
			} else {
				thisObj.selectedDisplayParams = tableModel;
				thisObj.update(false);
				thisObj.displayParams = jQuery.extend(true,[],thisObj.selectedDisplayParams);	
			}
			
			if(configureParamsDialog.isOpen())
				configureParamsDialog.close();
				applyButton.destroy();
		});
		
		var cancelButton = new sap.m.Button({//Cancel Button
			text: com.sap.xmii.common.util.MessageBundle.getText("XBUT_CANCEL"),
			tooltip: com.sap.xmii.common.util.MessageBundle.getText("XBUT_CANCEL")
		});
		cancelButton.attachPress(function(){
			thisObj.dataSeriesDetails = jQuery.extend(true, [], thisObj.dataSeriesDetailsBackupForCancel);
			thisObj.penTypes = jQuery.extend(true, [], thisObj.penTypesBackupForCancel);
			thisObj.colorIndicators = jQuery.extend(true, [], thisObj.colorIndicatorsBackupForCancel);
			thisObj.colorContexts = jQuery.extend(true, [], thisObj.colorContextsBackupForCancel);
			thisObj.displayColumns = jQuery.extend(true,[],thisObj.displayColumnsBackupForCancel);
			thisObj.tagSelection = jQuery.extend(true,[],thisObj.tagSelectionBackupForCancel);
			thisObj.selectedTags = jQuery.extend(true,[],thisObj.selectedTagsBackupForCancel);
			if(isQueryParams == true) {
				thisObj.selectedQueryParams = jQuery.extend(true,[],thisObj.queryParams);
			}else{
				thisObj.selectedDisplayParams = jQuery.extend(true,[],thisObj.displayParams);
			}
			configureParamsDialog.close();
			//configureParamsDialog.destroy();
		});

		configureParamsDialog.addButton(applyButton);
		configureParamsDialog.addButton(cancelButton);
		var otoolbar = new sap.m.Toolbar({
			content: [
			        //TODO : uncomment this : duplicate id issue
			        //new sap.ui.commons.Button("ConfigureQueryTableAddButton", {
			        new sap.m.Button("", {
			        	text: com.sap.xmii.common.util.MessageBundle.getText("XBUT_ADD"),
			        	icon : "sap-icon://add",
			        	tooltip: com.sap.xmii.common.util.MessageBundle.getText("XLBL_ADD_PARAMETERS"),
			        	press: function() {
				        	addParameters(configParamsTable);		        	
				        }
			        }),
			        //TODO : uncomment this : duplicate id issue
			        //new sap.ui.commons.Button("ConfigureQueryTableDeleteAllButton", {
			        new sap.m.Button("ConfigureQueryTableDeleteAllButton", {
			        	text: com.sap.xmii.common.util.MessageBundle.getText("XBUT_DELETE_ALL"),
			        	icon : "sap-icon://sys-cancel",
			        	tooltip: com.sap.xmii.common.util.MessageBundle.getText("XLBL_DELETE_ALL_PARAMETERS"),
			        	press: function() { 
				        	deleteAllParameters(configParamsTable);
				        	sap.ui.getCore().byId("ConfigureQueryTableDeleteAllButton").setEnabled(false);
			        	}
			        })]
		});

		configParamsTable = createConfigurationTable(thisObj, isQueryParams);
		configParamsTable.setHeaderToolbar(otoolbar);
		
		var searchField = new sap.m.SearchField({width :"100%",placeholder: com.sap.xmii.common.util.MessageBundle.getText("XLBL_SEARCH_PARAM"),  
			search: function (oEvt) {
			    // add filter for search
			    var aFilters = [];
			    var sQuery = oEvt.getSource().getValue();
			    if (sQuery && sQuery.length > 0) {
			    	var filter = new sap.ui.model.Filter("name", sap.ui.model.FilterOperator.Contains, sQuery);
			    	aFilters.push(filter);
			    }
		
			    // update list binding
			    var binding = configParamsTable.getBinding("items");
			    binding.filter(aFilters, "Application");
		  }
		});
		
		configureParamsDialog.addContent(searchField);
		configureParamsDialog.addContent(configParamsTable);

		thisObj.getChartLayout().addDependent(configureParamsDialog);
		configureParamsDialog.open();
		
		var tableModel = configParamsTable.getModel().getData().modelData;
		//SAving the old statePara
		if(isQueryParams == true) {
			thisObj.selectedQueryParams = tableModel;
			thisObj.queryParams = jQuery.extend(true,[],thisObj.selectedQueryParams);
		} else {
			thisObj.selectedDisplayParams = tableModel;
			thisObj.displayParams = jQuery.extend(true,[],thisObj.selectedDisplayParams);	
		}
		//var boxLeft = position.left;
		//var boxTop = position.top;
	//	$('#' + confPopupDialogId).css({position: com.sap.xmii.common.util.GenericConstants.ABSOLUTE, left:boxLeft, top:boxTop, margin:"5px", background:"#FFF", width:"1000px"});
	}
	//Function to check whether the MarkerStyle is changed to null
	function isMarkerStyleSetToNull(thisObj){
		var isMarkerStyleSetToNull = false;
		for(var i=0; i<thisObj.changedParams.length; i++) {
			if(thisObj.changedParams[i].Name === "MarkerStyle" && thisObj.changedParams[i].Value === ""){
				isMarkerStyleSetToNull = true;
				break;
			}
		}
		return isMarkerStyleSetToNull;
	}
	//Function to set the MarkerStyle value to -1 if the selected value is null
	function setNullValueforMarkerStyle(thisObj){
		for(var i=0; i<thisObj.changedParams.length; i++) {
			if(thisObj.changedParams[i].Name === "MarkerStyle" && thisObj.changedParams[i].Value === ""){
				thisObj.changedParams[i].Value = "-1";
				break;
			}
		}
	}
	//Function to check whether the Specification Limit Column is changed to null
	function isSpecLimitColumnChanged(thisObj){
		var isSpecLimitColumnChanged = false;
		for(var i=0; i<thisObj.changedParams.length; i++) {
			if(thisObj.changedParams[i].Name === "UpperLimitColumn" && thisObj.changedParams[i].Value === ""){
				isSpecLimitColumnChanged = true;
				break;
			}else if(thisObj.changedParams[i].Name === "CenterLimitColumn" && thisObj.changedParams[i].Value === ""){
				isSpecLimitColumnChanged = true;
				break;
			}else if(thisObj.changedParams[i].Name === "LowerLimitColumn" && thisObj.changedParams[i].Value === ""){
				isSpecLimitColumnChanged = true;
				break;
			}
		}
		return isSpecLimitColumnChanged;
	}
	//Function to change the Specification Limit Values to it's default value if Specification Limit Columns are changed to null
	function processSpecLimitColumn(thisObj){
		for(var i=0; i<thisObj.changedParams.length; i++) {
			if(thisObj.changedParams[i].Name === "UpperLimitColumn" && thisObj.changedParams[i].Value === ""){
				thisObj.getChartTemplateObject().setProperty("UpperLimit" , thisObj.getChartTemplate().getUpperLimit());
			}else if(thisObj.changedParams[i].Name === "CenterLimitColumn" && thisObj.changedParams[i].Value === ""){
				thisObj.getChartTemplateObject().setProperty("CenterLimit" , thisObj.getChartTemplate().getCenterLimit());
			}else if(thisObj.changedParams[i].Name === "LowerLimitColumn" && thisObj.changedParams[i].Value === ""){
				thisObj.getChartTemplateObject().setProperty("LowerLimit" , thisObj.getChartTemplate().getLowerLimit());
			}
		}
	}
	
	function createConfigurationTable(thisObj, isQueryParams) {

		if(thisObj.getChartTemplateObject().getProperty("KPIObject") == "true"){

			//removing the labelColumns and valueColumns from selectedParamerter for KPI 
			for(var i = thisObj.selectedDisplayParams.length -1 ; i >= 0 ; i--){
				if(thisObj.selectedDisplayParams[i].groupId == 17){
					thisObj.selectedDisplayParams.splice(i,1);
				}
			}
		}
		
		var configParamsTable = new sap.m.Table("ConfigureParamsTable",{
			width: "100%",
			columns :[ new sap.m.Column({ width :"16%" ,mergeDuplicates: true,header: new sap.m.Label({text :com.sap.xmii.common.util.MessageBundle.getText("XLBL_GROUP_NAME")})}),
			           new sap.m.Column({ width :"16%" ,header: new sap.m.Label({text :com.sap.xmii.common.util.MessageBundle.getText("XLBL_PARAM_NAME")})}),
			           new sap.m.Column({ width :"16%", header: new sap.m.Label({text :com.sap.xmii.common.util.MessageBundle.getText("XLBL_PARAM_DESC")})}),
			           new sap.m.Column({ width :"16%", header: new sap.m.Label({text :com.sap.xmii.common.util.MessageBundle.getText("XLBL_PARAM_VALUE")})}),
			           new sap.m.Column({ width :"16%", header: new sap.m.Label({text :com.sap.xmii.common.util.MessageBundle.getText("XLBL_PARAM_CURRENT_VALUE")})}),
			           new sap.m.Column({ width :"4%", header: new sap.m.Label()})
			]
		});
		
		function sortParameters(params) {
			params.sort(function(a, b){
				var group1=a.groupId, group2=b.groupId;
				if (group1 < group2) //sort string ascending
					return -1 ;
				if (group1 > group2)
					return 1;
				return 0 ;//default return value (no sorting)
			});
			return params;
		}

		var newSelectedParams = [];
		if(isQueryParams == true) {
			newSelectedParams = sortParameters(thisObj.selectedQueryParams);
		} else if(isQueryParams == false) {
			newSelectedParams = sortParameters(thisObj.selectedDisplayParams);
		}
		
		jQuery.each(newSelectedParams, function(iIndex, param) {
			if(param.name == "DateFormat"){
				if (param.defaultPropValue != "NA")
					dateFormatter = param.defaultPropValue;
				else 
					dateFormatter = "MM/dd/yyyy HH:mm:ss";
			}
		});

		var configQueryParamTableModel =  new sap.ui.model.json.JSONModel();
		configQueryParamTableModel.setData({modelData: newSelectedParams});
		configParamsTable.setModel(configQueryParamTableModel);
		configParamsTable.bindItems("/modelData",function(sID,oContext){
			var paramListItem = new  sap.m.ColumnListItem();
			if(oContext === undefined){
				return 	paramListItem;
			}
			return createRow(oContext,paramListItem,dateFormatter);
		});
		return configParamsTable;
	}
	/**
	 * This function is responsible to get the selected Tags details for Catalog Query
	 */
	function getSelectedTagsForCatalogQuery(oContext){
		if(thisObj.selectedTags == null || thisObj.selectedTags == undefined || thisObj.selectedTags.length == 0){

			thisObj.selectedTags = [];
			var selectedObjects , selectedAlias , allObjects ;
			//Getting the selectedObjects, allObjecta and alises
			if(thisObj.getQueryObject().getParameter("SelectedObjects") != ""){
				allObjects = thisObj.getQueryObject().getParameter("SelectedObjects").split(",");
			}else{
				allObjects = thisObj.getQueryObject().getSelectedObjects().split(",");
			}
			selectedObjects = thisObj.getQueryObject().getParameter("SelectedTags").split(",");
			selectedAlias = thisObj.getQueryObject().getParameter("SelectedAliases").split(",");

			//loop through the allObjects and compare with the selectedObject to set the checked to true or false
			for (var i = 0 ; i < allObjects.length ; i++) {
				var tagName = allObjects[i].substring(allObjects[i].lastIndexOf(":") + 1);
				isObjectPresenInSelectedObjects = false;
				for (var j = 0; j < selectedObjects.length ; j++){
					if(tagName == selectedObjects[j].substring(selectedObjects[j].lastIndexOf(":") + 1)){
						isObjectPresenInSelectedObjects = true;
						thisObj.selectedTags.push({"name" : selectedObjects[j],"Alias" : selectedAlias[j] ,"checked" :true})
					}
				}
				if(!isObjectPresenInSelectedObjects){
					thisObj.selectedTags.push({"name" : tagName,"Alias" : "" ,"checked" :false})
				}
			}

		}
		thisObj.selectedTagsBackupForCancel = jQuery.extend(true, [], thisObj.selectedTags);
		return thisObj.selectedTags;
	}
	/**
	 * function responsible to create the data for the display columns having all the structural parameters
	 * @param oContext
	 * @return
	 */
	function getDisplayColumnsData(oContext){
		if(thisObj.displayColumns == null || thisObj.displayColumns == undefined || isArrayEmpty(thisObj.displayColumns)) {
			thisObj.displayColumns = [];	
			var columnsBoolean, columnsHeading, columnsWidth, columnsAlignment,columnsFormat , displayColumns;
			
			columnsBoolean = thisObj.getGridObject().getShowColumnsAsBoolean().split(",");
			columnsHeading = thisObj.getGridObject().getColumnHeadings().split(",");
			columnsWidth = thisObj.getGridObject().getColumnWidths().split(",");
			columnsAlignment = thisObj.getGridObject().getColumnAlignments().split(",");
			columnsFormat = thisObj.getGridObject().getColumnFormats().split(",");
			displayColumns = thisObj.getGridObject().getDisplayColumns().split(",");
			for(var i =0 ; i < columnsHeading.length ; i++){
				thisObj.displayColumns.push({ "ColumnHeadings" : columnsHeading[i], "ColumnWidths" :  columnsWidth[i],  
					"ColumnAlignments": columnsAlignment[i], "ColumnFormats": columnsFormat[i], 
					"ShowColumnsAsBoolean" :columnsBoolean[i] == "true" ? true :false, "checked":true ,"DisplayColumns" : displayColumns[i]});
			}
			
		}
		thisObj.displayColumnsBackupForCancel = jQuery.extend(true, [], thisObj.displayColumns);
		return thisObj.displayColumns;
	}

	/*
	/**
	 * The default delimiter is kept as "_"
	 */
	function applyNamespaceDelimiterForTags(tagArray) {
		var selectedObjects = "";
		var delim = '_';
		if(checkForDemiliter(tagArray, '_')){
			delim = '_';
		}else if(checkForDemiliter(tagArray, '~')){
			delim = '~';
		}else if(checkForDemiliter(tagArray, '\\.')){
			delim = '.';
		}else if(checkForDemiliter(tagArray, '\\|')){
			delim = '|';
		}else if(checkForDemiliter(tagArray, '\\^')){
			delim = '^';
		}else if(checkForDemiliter(tagArray, '%')){
			delim = '%';
		}

		selectedObjects = createDelimitedString(tagArray,delim);
		return {"delimiter": delim,"selectedObjects": selectedObjects};
	}
	
	function validateDoubleField(paramValue){
		return /^[+-]?\d+(\.\d+)?$/.test(paramValue);	
	}
	
	function validateIntegerField(paramValue){
		return /^[0-9]{1,10}$/.test(paramValue);
	}
	
	//this would start the busy indicator
	function showBusyIndicator() {
		sap.ui.core.BusyIndicator.show(0);
	}

	//this would hide the busy indicator
	function hideBusyIndicator() {
		sap.ui.core.BusyIndicator.hide();
	}
	
	function fnTreeOpen(oEvent, type){
		var id = oEvent.getParameter("id");
		var node = sap.ui.getCore().byId(id);
		var childrenLoaded = node.data("ChildrenLoaded");
		if (oEvent.getParameters().path != undefined && type =="navigation") {
			if (oEvent.getParameter("opened") == false)
				childrenLoaded = true;
			path = oEvent.getParameters().path;
		} else {
			var cd = node.getCustomData();
			var cdObj = cd[0].getValue("Object");
			var path = cdObj.Path;
			if (node.data("project") && type != "svg" && type != "valueHelp" ) {
				path = cdObj.Path + "/WEB";
			}
		}
		var	param = {"mode":"ContentList","content-type":"text/json", "folder":path};
		if (type == "save") {
			param = {"mode":"ContentList","mask":"cemd","content-type":"text/json", "folder":path};
		} else if (type == "search" || type == "navigation" ) {
			param = {"mode":"ContentList","mask":"cemd","content-type":"text/json", "folder":path};
		} else if (type == "includeFile") {
			param = {"mode":"ContentList","mask":"js|css","content-type":"text/json", "folder":path};
		} else if (type == "svg") {
			param = {"mode":"ContentList","mask":"tqxc","content-type":"text/json", "folder":path};
		} else if (type == "queryTemplate") {
			param = {"mode":"ContentList","mask":"QUERY","content-type":"text/json", "folder":cdObj.Path};
		} else if (type == "icons") {
			param = {"mode":"ContentList","mask":"png|ico|bmp|jpg|jpeg","content-type":"text/json", "folder":path};
		} else if (type == "settings") {
			param = {"mode":"ContentList","mask":"html|jsp","content-type":"text/json", "folder":path};
		} else if (type == "templatesave" || type == "templates") {
			param = {"mode":"ContentList","mask":"cemt","content-type":"text/json", "folder":path};
		} else if (type == "valueHelp") {
			param = {"mode":"ContentList","mask":"vlhp","content-type":"text/json", "folder":path};
		}
		if (!childrenLoaded) {
			showBusyIndicator();
			var data = com.sap.xmii.common.util.MIIi5Util.getServiceResponseInJson(com.sap.xmii.common.util.GenericConstants.CECATALOG_URL, param);
			hideBusyIndicator();
			addNodes(data, node, type);
			node.data("ChildrenLoaded",true);
		}
	}
	
	function addNodes(data, parentNode, type){
		if (data.Rowsets.Rowset[0].Row == null)
			return;
		for (var i =0 ; i < data.Rowsets.Rowset[0].Row.length ; i++) {
			var name = data.Rowsets.Rowset[0].Row[i].Name;
			var isExpanded = ((data.Rowsets.Rowset[0].Row[i].FileType != '' )? false : true);
			var oNode = null;
			if (isExpanded) {
				oNode = new sap.ui.commons.TreeNode(com.sap.xmii.common.util.MIIi5Util.generateGuid(), {text:name, expanded: false, icon:"//"+window.location.host + "/XMII/JavaScript/resources/Images/folder_1.gif", hasExpander:true});
				if (type == "navigation") {
					oNode.attachToggleOpenState(function(oEvent){
						fnTreeOpen(oEvent, "navigation");
					});
					parameterArray = { "id" : oNode.getId() , "path" :data.Rowsets.Rowset[0].Row[i].Path};
					// This is used if the opened dashboard is saved under some
					// folder
					oNode.fireToggleOpenState(parameterArray);
					if(oParentNodeSelected != null){
						oNode.expand(i);
						oParentNodeSelected.expand(i);
					}
				}
			} else {
				oNode = new sap.ui.commons.TreeNode(com.sap.xmii.common.util.MIIi5Util.generateGuid());
				// in case of save as well we just need to display only the
				// dashboards
				if(type == "search" || type == "save"){
					name= removeExtension(name);
				} else if (type == "navigation") {
					name= removeExtension(name);
					oNode.data("nodedraggable","true", true);
				} else if(type == "settings") {
					var cemdFile = name.match(/.cemd$/g);
					if (cemdFile != null) {
						continue;
					}
				} else if (type == "templatesave" || type == "templates") {
					//dont have to do anything just have to assign the same
				} else {
					var cemdFile= name.match(/.cemd$/g);
					if (cemdFile != null) {
						continue;
					}
					if (type == "includeFile") {
						if (name.match(/(.js$|.css$)/gi) == null) {
							continue;
						}
					}
				}
				oNode.setText(name);
			}
			if (type == "navigation") {
				if (CURRENT_FILE_PATH != null) {
					var fileName = data.Rowsets.Rowset[0].Row[i].Path +"/"+ data.Rowsets.Rowset[0].Row[i].Name;
					if (CURRENT_FILE_PATH == (fileName.substr(0 , fileName.lastIndexOf(".")))) {
						oParentNodeSelected = parentNode;
						oNodeSelected = oNode;
					}
				}
			}

			var customData = new sap.ui.core.CustomData({
				key : "Object", // string
				value : data.Rowsets.Rowset[0].Row[i]
			});

			oNode.addCustomData(customData);
			oNode.data("ChildrenLoaded",false);
			if (type == "navigation") {
				oNode.data("ChildrenLoaded",true);
			}
			oNode.attachToggleOpenState(function(oEvent){
				fnTreeOpen(oEvent, type);
			});
			parentNode.addNode(oNode);
		}
	}
	
	function selectBrowseFile(oEvent, type, callbackFn){
		if (typeof callbackFn == "undefined")
			callbackFn = callbackFn;
		if(type == "includeFile"){
			if(pathField == null){
				var filePath = sap.ui.getCore().byId("browseFileTextField").getValue();
				var fileRowRepeater = sap.ui.getCore().byId("fileRows");
				//get index of row to be deleted
				var fileRow = fileRowRepeater.getRows()[indexOfSelectedRow];
				var fileRowModel = fileRowRepeater.getModel();
				//fetching the existing data from the model
				var fileListData = fileRowModel.getData();
				fileListData.data[indexOfSelectedRow].filePath = filePath;
				
				//extension
				var extension = filePath.substring(filePath.lastIndexOf('.')+1,filePath.length).toUpperCase();
				if(extension == "JS"){
					fileListData.data[indexOfSelectedRow].scriptType = "text/javascript";
				}else if(extension == "CSS"){
					fileListData.data[indexOfSelectedRow].scriptType = "text/css";
				}
				sap.ui.getCore().byId("includeFilePath").setValue(filePath);
				fileRowModel.setData(fileListData);
				fileRowRepeater.rerender();
			}else{
				hideNotificationBar();
				var filePath = sap.ui.getCore().byId("browseFileTextField").getValue();
				pathField.setValue(filePath);
				pathField.fireChange();
			}
			
		}else if(type == "svg"){
			var filePath = sap.ui.getCore().byId("browseFileTextField").getValue();
			sap.ui.getCore().byId("chooseQueryValueField").setValue(filePath);
		}else if(type == "queryTemplate"){
			hideNotificationBar();
			var browseFileTextField = sap.ui.getCore().byId("browseFileTextField");
			var filePath = browseFileTextField.getValue();
			filePath = filePath.substring(0,filePath.lastIndexOf("."));
			if(com.sap.xmii.common.util.MIIi5Util.isObjectNotNull(pathField)){
				pathField.setValue(filePath);
				if(typeof callbackFn == "function"){
					callbackFn(pathField,browseFileTextField.data("Object") );
				}
			}else{
				var queryField = sap.ui.getCore().byId("queryName");
				if(com.sap.xmii.common.util.MIIi5Util.isObjectNotNull(queryField)){
					queryField.setValue(filePath);
				}
			}
			 $(sap.ui.getCore().byId("queryName")).trigger('change' , [filePath]);
		}else if(type == "icons"){
			var filePath = sap.ui.getCore().byId("browseFileTextField").getValue();
			pathField.setValue(filePath);
			pathField.fireChange({"newValue" : filePath});
			if(typeof callbackFn == "function"){
				callbackFn(pathField);
			}
		}else if(type == "settings"){
			hideNotificationBar();
			var filePath = sap.ui.getCore().byId("browseFileTextField").getValue();
			pathField.setValue(filePath);
			pathField.fireChange();
		} else if (type == "templates") {
			hideNotificationBar();
			var filePath = sap.ui.getCore().byId("browseFileTextField").getValue();
			pathField.setValue(filePath);
			pathField.fireChange();
			if(typeof callbackFn == "function"){
				callbackFn(pathField);
			}
		} else if (type == "valueHelp") {
			hideNotificationBar();
			var filePath = sap.ui.getCore().byId("browseFileTextField").getValue();
			filePath = filePath.substring(0,filePath.lastIndexOf("."));
			sap.ui.getCore().byId("i5ValueHelpName").setValue(filePath);
			$(sap.ui.getCore().byId("i5ValueHelpName")).trigger('change' , [filePath]);
		}
		
		sap.ui.getCore().byId("browseFileDialog").destroy();
	}
	
	function populateSearchFileResultInBrowse(searchText, type){
		showBusyIndicator();
		var data = [];
		var param = {"mode":"ContentList","method":"Search", "mask": "Web", "content-type":"text/json", "objectName":"*"+searchText+"*"};
		
	  //create request parameters for the service
		if(type == "includeFile"){
			param = {"mode":"ContentList","method":"Search","mask":"js|css","content-type":"text/json", "objectName":"*"+searchText+"*"};
		}else if(type == "svg"){
			param = {"mode":"ContentList","method":"Search","mask":"tqxc","content-type":"text/json", "objectName":"*"+searchText+"*"};
		}else if(type == "queryTemplate"){
			param = {"mode":"ContentList","method":"Search","mask":"QUERY","content-type":"text/json", "objectName":"*"+searchText+"*"};
		}else if(type == "icons"){
			param = {"mode":"ContentList","method":"Search","mask":"png|ico|bmp|jpg|jpeg|vds","content-type":"text/json", "objectName":"*"+searchText+"*"};
		}else if(type == "settings"){
			param = {"mode":"ContentList","method":"Search","mask":"html|jsp","content-type":"text/json", "objectName":"*"+searchText+"*"};
		} else if (type == "templates") {
			param = {"mode":"ContentList","method":"Search","mask":"cemt","content-type":"text/json", "objectName":"*"+searchText+"*"};
		} else if (type == "valueHelp") {
			param = {"mode":"ContentList","method":"Search","mask":"vlhp","content-type":"text/json", "objectName":"*"+searchText+"*"};
		}
		  
		  
		  //make service call to get the search results
//		com.sap.xmii.common.util.MIIi5Util.getServiceResponseInJson(com.sap.xmii.common.util.GenericConstants.CECATALOG_URL, param);
		data = com.sap.xmii.common.util.MIIi5Util.getServiceResponseInJson(com.sap.xmii.common.util.GenericConstants.CECATALOG_URL, param);
		  //create and populate the tree with only leaf nodes
		  var oTree = sap.ui.getCore().byId("browseFileTree");
		  if(oTree != null)
			  oTree.destroyNodes();
		  else
			  oTree = new sap.ui.commons.Tree("browseFileTree");
		  oTree.setWidth("98%");
		  oTree.setShowHeaderIcons(false);
		  oTree.setShowHorizontalScrollbar(false);
		  //oTree.addStyleClass("searchResultTree");
		  oTree.setTitle(com.sap.xmii.common.util.MessageBundle.getText("XTIT_SEARCH_RESULTS"));

		  if(data != null && data.Rowsets.Rowset[0].Row != null){
			  for(var i =0 ; i < data.Rowsets.Rowset[0].Row.length ; i++){
				  var name = data.Rowsets.Rowset[0].Row[i].Name;
				  var path =  data.Rowsets.Rowset[0].Row[i].Path;
				  var rootFolderIndex = path.indexOf("/");
				  var rootFolder = path;
				  if(rootFolderIndex != -1)
					  rootFolder = path.substring(0,path.indexOf("/"));
				  oNode = new sap.ui.commons.TreeNode(com.sap.xmii.common.util.MIIi5Util.generateGuid());
				  oNode.setIcon("//"+window.location.host + "/XMII/JavaScript/resources/Images/document_plain.png");
				  oTree.addNode(oNode);
				  oNode.data("Object",data.Rowsets.Rowset[0].Row[i]);
				  var fullPath = path + "/" + name;
				  oNode.setText(fullPath);
			  }
		  }else{
			  //show no data view if search results are empty
			  oNode = new sap.ui.commons.TreeNode(com.sap.xmii.common.util.MIIi5Util.generateGuid(),{text: com.sap.xmii.common.util.MessageBundle.getText("NO_DATA_FOUND"), selectable: false});
			  sap.ui.getCore().byId("browseFileTree").addNode(oNode);
		  }
	}
	
	function createTreeRootProjects(data, treeId, type){
		var isSelected = false;
		if (null != data.Rowsets.Rowset[0].Row && data.Rowsets.Rowset[0].Row.length > 0) {
			var oTree = sap.ui.getCore().byId(treeId);
			for (var i =0 ; i < data.Rowsets.Rowset[0].Row.length ; i++) {
				isSelected = false;
				var name = data.Rowsets.Rowset[0].Row[i].Name;
				if (name.match(/^MyContent_/g) != null) {
					if(type == "includeFile")
						continue;
					name = com.sap.xmii.common.util.MessageBundle.getText("MY_CONTENT");
					isSelected = true;
				}
				var oNode = new sap.ui.commons.TreeNode(com.sap.xmii.common.util.MIIi5Util.generateGuid(), {text:name, expanded: false, hasExpander:true});
				oNode.data("Object", data.Rowsets.Rowset[0].Row[i]);
				oNode.data("project", true);
				oNode.setIcon("//" + window.location.host + "/XMII/JavaScript/resources/Images/S_PROJCT.gif");
				var isDeployed = data.Rowsets.Rowset[0].Row[i].Deployed;
	    	  	var isShared = data.Rowsets.Rowset[0].Row[i].Shared;
				if (isDeployed === "true") {
					oNode.setIcon("//" + window.location.host + "/XMII/JavaScript/resources/Images/DeployedIcon.gif");
				} else if (isShared === "true") {
					oNode.setIcon("//" + window.location.host + "/XMII/JavaScript/resources/Images/SharedIcon.gif");
				}
				oNode.data("ChildrenLoaded",false);
				oNode.attachToggleOpenState(type,fnTreeOpen);
				oNode.setIsSelected(isSelected);
				if (data.Rowsets.Rowset[0].Row[i].Name.match(/^MyContent_/g) != null) {
					oTree.insertNode(oNode,0);
					oTree.oSelectedNode = oNode;
					var pathValue = sap.ui.getCore().byId("pathText");
					if (pathValue != undefined)
						pathValue.setValue(com.sap.xmii.common.util.MessageBundle.getText("MY_CONTENT"));
				} else {
					oTree.addNode(oNode);
				}
			}
		} else {
			sap.ui.getCore().byId(sectionId).addContent(new sap.m.Label(com.sap.xmii.common.util.MIIi5Util.generateGuid()).setText(com.sap.xmii.common.util.MessageBundle.getText("MSG_NO_DATA")));
			sap.ui.getCore().byId(sectionId).setMaxHeight("60px");
		}
	}
	
	function populateSaveTree(treeId, type) {
		if (type == "queryTemplate" ) {
			var param = {"mode":"ContentList","mask":"Project","content-type":"text/json"};
		} else {
			var	param = {"mode":"ContentList","mask":"Project","content-type":"text/json", "GetCEProject":"true"};
		}
		
		showBusyIndicator();
		var data = com.sap.xmii.common.util.MIIi5Util.getServiceResponseInJson(com.sap.xmii.common.util.GenericConstants.CECATALOG_URL, param);
		hideBusyIndicator();
		createTreeRootProjects(data, treeId, type);
	}
	
	function openBrowseFileDialog(index,type, filePathField, callbackFn){
		pathField = filePathField;
		indexOfSelectedRow = index;
		var browseFileDialog = sap.ui.getCore().byId("browseFileDialog");
		if(browseFileDialog == null){
			browseFileDialog = new sap.m.Dialog("browseFileDialog", {modal: true,
				title: com.sap.xmii.common.util.MessageBundle.getText("XLBL_SELECT_FILE"),
				width: "40%"
			});
		}else{
			browseFileDialog.destroyContent();
			browseFileDialog.destroyButtons();
		}
		browseFileDialog.attachAfterClose(function(){
			this.destroyContent();
			this.destroyButtons();
		}, browseFileDialog);
		
		//adding the tree to browse the files
		var verticalLayout = new sap.ui.layout.Grid({
			id : "browseFileLayout",
			defaultSpan : "L12 M12 S12",
			vSpacing: 0,
			width: "100%"
		});
		
		var searchFileField = new sap.m.SearchField({
				width: "98%",
				//enableListSuggest: false,
				search: function(oEvent){
				sap.ui.getCore().byId("browseFileTextField").setValue("");
				var searchFieldInput = oEvent.getParameter("query");
				if(searchFieldInput != "" || searchFieldInput != null)
					populateSearchFileResultInBrowse(searchFieldInput, type);
				}
			});
		searchFileField.addEventDelegate({onAfterRendering: function(){
				$("[type='search']").attr("placeholder",com.sap.xmii.common.util.MessageBundle.getText("SEARCH"));
			}}, searchFileField);
	//	searchFileField.setStartSuggestion(0);
	//	searchFileField.attachSuggest(function(oEvent){
//				if(oEvent.getParameters().value == ""){
//					sap.ui.getCore().byId("browseFileTextField").setValue("");
//					sap.ui.getCore().byId("browseFileTree").destroyNodes();
//					populateSaveTree("browseFileTree", type);
//					sap.ui.getCore().byId("browseFileTree").setTitle("");
//					oEvent.getSource().setValue("");
//				}
//			}, searchFileField);
		verticalLayout.addContent(searchFileField);
		var browseFileTree = new sap.ui.commons.Tree("browseFileTree",{
			height : "304px",
			select: function(oEvent){
				//file path to the text box
				var dataObj = oEvent.getParameters('treeFolder').node.data("Object");
				if(dataObj == null){
					return;
				}
				var filePath = "";
				if(type == "includeFile" || type == "icons"){
					filePath = "/XMII/CM/" + dataObj.Path.replace("/WEB","") + "/" +dataObj.Name;
				}else if(type == "svg"){
					filePath = dataObj.Path + "/" +dataObj.Name;
				}
				else if(type == "queryTemplate"){
					if(dataObj.FileType != ""){
						sap.ui.getCore().byId("browseFileOkBTN").setEnabled(true);
						filePath = dataObj.Path + "/" +dataObj.Name;
					}else{
						sap.ui.getCore().byId("browseFileOkBTN").setEnabled(false);
					}
				}
				else if(type == "settings"){
					if(dataObj.FileType != ""){
						sap.ui.getCore().byId("browseFileOkBTN").setEnabled(true);
						filePath = "/XMII/CM/" + dataObj.Path.replace("/WEB","") + "/" +dataObj.Name;
					}else{
						sap.ui.getCore().byId("browseFileOkBTN").setEnabled(false);
					}
				} else if (type == "templates") {
					if (dataObj.FileType != "") {
						sap.ui.getCore().byId("browseFileOkBTN").setEnabled(true);
						filePath = dataObj.Path + "/" +dataObj.Name;
					} else {
						sap.ui.getCore().byId("browseFileOkBTN").setEnabled(false);
					}
				} else if(type == "valueHelp" ){
					if(dataObj.FileType != ""){
						sap.ui.getCore().byId("browseFileOkBTN").setEnabled(true);
						filePath = dataObj.Path + "/" +dataObj.Name;
					}else{
						sap.ui.getCore().byId("browseFileOkBTN").setEnabled(false);
					}
				}
				sap.ui.getCore().byId("browseFileTextField").setValue(filePath);
				sap.ui.getCore().byId("browseFileTextField").data("Object", dataObj);
		}});
		browseFileTree.attachBrowserEvent("dblclick", function(event){
			if(sap.ui.getCore().byId("browseFileTree").getSelection().getHasExpander() == false){
				selectBrowseFile(event, type, callbackFn);
			}
		});
		browseFileTree.setShowHeaderIcons(true);
		//browseFileTree.setHeight("304px");
		browseFileTree.setWidth("98%");
		browseFileTree.setShowHorizontalScrollbar(false);
		verticalLayout.addContent(browseFileTree);
		
		//adding the file label and text field for the selected file

		var horizontalLayout = new sap.ui.layout.Grid({
			id : "browseFileHorizontalLayout",
			defaultSpan: "L2"
		});//.addStyleClass("browseFileBar");

		var browseFileLabel = new sap.m.Label("browseFileLabel", {width: "100%", text:com.sap.xmii.common.util.MessageBundle.getText("XLBL_FILE_PATH")+":"});
		browseFileLabel.setTextAlign(sap.ui.core.TextAlign.Right);
		browseFileLabel.setTooltip(com.sap.xmii.common.util.MessageBundle.getText("XLBL_FILE_PATH"));
		browseFileLabel.addStyleClass("saveDialogLabel");
		
		var browseFileTextField = new sap.m.Input("browseFileTextField", {width: "100%", value:"", enabled: false});
		browseFileTextField.setTooltip(com.sap.xmii.common.util.MessageBundle.getText("XLBL_FILE_PATH"));
		browseFileLabel.setLabelFor(browseFileTextField);
		browseFileTextField.setLayoutData(new sap.ui.layout.GridData({span : "L10 M10"}));
		
		horizontalLayout.addContent(browseFileLabel);
		horizontalLayout.addContent(browseFileTextField);
		//verticalLayout.addContent(serverHorizontalLayout);
		verticalLayout.addContent(horizontalLayout);
		browseFileDialog.addContent(verticalLayout);
		populateSaveTree("browseFileTree", type);

		var browseFileSaveButton = new sap.m.Button({
			id:"browseFileOkBTN", 
			text: com.sap.xmii.common.util.MessageBundle.getText("XBUT_OK"), 
			tooltip: com.sap.xmii.common.util.MessageBundle.getText("XBUT_OK")
			}).attachPress(function(oEvent){
				selectBrowseFile(oEvent,type, callbackFn);
			});
		
		browseFileDialog.addButton(browseFileSaveButton);
		
		browseFileDialog.addButton(new sap.m.Button({text: com.sap.xmii.common.util.MessageBundle.getText("XBUT_CANCEL"), tooltip: com.sap.xmii.common.util.MessageBundle.getText("XBUT_CANCEL"), press:function(){
			sap.ui.getCore().byId("browseFileDialog").destroy();
			var queryName = sap.ui.getCore().byId("queryName");
			if(queryName != undefined){
				sap.ui.getCore().byId("queryName").setValue("");
			}
		}}));
		browseFileDialog.open();
	}
	
	/**
	 * Function responsible to create column list template 
	 * @param defaultValueJSON configureStructuralParametersTable
	 * @return parameterColumnsListItems
	 */
	function createColumnListTemplate(defaultValueJSON , configureStructuralParametersTable ){
		
		//Creation of Model
		var parameterModel = new sap.ui.model.json.JSONModel();
		parameterModel.setData({modelData:defaultValueJSON.Rows});
		configureStructuralParametersTable.setModel(parameterModel);
		
		//Creation of ColumnListItems
		var parameterColumnsListItems  = new sap.m.ColumnListItem();
		//Adding the cell to it
		//Looping through defaultValueJSON.Columns to create columnslistItems
		for(var j = 0 ; j < defaultValueJSON.Columns.length  ;j++){
			var parameterField = null;
			//Based on the Datatype, creating the respective control
			switch(defaultValueJSON.Columns[j].DataType){
			case "String" :
				//Creation of Input
				parameterField = new sap.m.Input({value :"{"+defaultValueJSON.Columns[j].ColumnName +"}" , change:function(){
					//Getting the row index and setting that row index checked data as true
					var path = this.getBindingContext().getPath();
					var position = parseInt(path.substring(path.lastIndexOf("/")+1));
					configureStructuralParametersTable.getModel().getData().modelData[position].Checked = "true";

				}});
				if(com.sap.xmii.common.util.MIIi5Util.isObjectNotNull(defaultValueJSON.Columns[j].Name)){
					parameterField.bindProperty("value" ,defaultValueJSON.Columns[j].Name );
				}else{
					parameterField.bindProperty("value" , defaultValueJSON.Columns[j].ColumnName  );
				}
				break;
			case "DisableString" :
				if(defaultValueJSON.Columns[j].Name == null || defaultValueJSON.Columns[j].Name == undefined){
					//Creation of Input setting enabled as false
					parameterField = new sap.m.Input({value :"{"+defaultValueJSON.Columns[j].ColumnName +"}" , enabled : false, change:function(){
						//Getting the row index and setting that row index checked data as true
						var path = this.getBindingContext().getPath();
						var position = parseInt(path.substring(path.lastIndexOf("/")+1));
						configureStructuralParametersTable.getModel().getData().modelData[position].Checked = "true";

					}});
				}else{
					//Creation of Input setting enabled as false
					parameterField = new sap.m.Input({value :"{"+defaultValueJSON.Columns[j].Name +"}" , enabled : false, change:function(){
						//Getting the row index and setting that row index checked data as true
						var path = this.getBindingContext().getPath();
						var position = parseInt(path.substring(path.lastIndexOf("/")+1));
						configureStructuralParametersTable.getModel().getData().modelData[position].Checked = "true";

					}});
				}
				break;
			case "Double" :
				//Creation of Input with validation of double field on change
				parameterField = new sap.m.Input({value :"{"+defaultValueJSON.Columns[j].ColumnName +"}"});
				parameterField.attachChange(function(){
					//validation for double
					if(this.getValue() != ""){
						var valid = validateDoubleField(this.getValue());
						if(valid){
							this.setValueState(sap.ui.core.ValueState.None);
							sap.ui.getCore().byId("configureParameterApplyButton").setEnabled(true);
							//Getting the row index and setting that row index checked data as true
							var path = this.getBindingContext().getPath();
							var position = parseInt(path.substring(path.lastIndexOf("/")+1));
							configureStructuralParametersTable.getModel().getData().modelData[position].Checked = "true";
						}else{
							this.setValueState(sap.ui.core.ValueState.Error);
							sap.ui.getCore().byId("configureParameterApplyButton").setEnabled(false);
						}
					}else{
						this.setValueState(sap.ui.core.ValueState.Error);
						sap.ui.getCore().byId("configureParameterApplyButton").setEnabled(false);
					}
				});
				break;
			case "Color" :
				//Creation of color picker
				//if Name is provided meaning, the columns name is something different and the value to which we have to bind is different
				if(defaultValueJSON.Columns[j].Name ==  null || defaultValueJSON.Columns[j].Name == undefined)
					parameterField = new com.sap.mii.ui.composite.TagColorPicker({hexcode: "{"+defaultValueJSON.Columns[j].ColumnName +"}"});
				else 
					parameterField = new com.sap.mii.ui.composite.TagColorPicker({hexcode: "{"+defaultValueJSON.Columns[j].Name +"}"});
				//Attaching the change event
				parameterField.attachChange( function(){
					//Getting the row index and setting that row index checked data as true
					var path = this.getBindingContext().getPath();
					var position = parseInt(path.substring(path.lastIndexOf("/")+1));
					configureStructuralParametersTable.getModel().getData().modelData[position].Checked = "true";
				});	
				break;
			case "Multiple" :
				//Creation of Select
				parameterField = new sap.m.Select({change:function(){
					//Getting the row index and setting that row index checked data as true
					var path = this.getBindingContext().getPath();
					var position = parseInt(path.substring(path.lastIndexOf("/")+1));
					configureStructuralParametersTable.getModel().getData().modelData[position].Checked = "true";
				}});
				//For PenTypes
				if(defaultValueJSON.Columns[j].ColumnName == "Type"){
					var type = com.sap.xmii.common.util.PEN_TYPE;
				}else if (defaultValueJSON.Columns[j].ColumnName == "MarkerStyle"){
					//For MarkerStyle
					var type = com.sap.xmii.common.util.MARKER_STYLE;
				}else if(defaultValueJSON.Columns[j].ColumnName == "LineStyle"){
					// for Line Style
					var type = com.sap.xmii.common.util.LINE_STYLES;
				}
				//Creating item and adding it to the parameterField
				for(var k = 0 ; k < type.length ; k++){
					oItem = new sap.ui.core.ListItem();
					oItem.setText(type[k]);
					oItem.setKey(type[k]);
					parameterField.addItem(oItem);		
				}	
				parameterField.setSelectedKey("{"+defaultValueJSON.Columns[j].ColumnName+"}");

				break;
			case "Icon" : 
				//Creation of TextField with browse button
				parameterField = new sap.ui.layout.HorizontalLayout();
				//Textfield to hold path name
				var iconField = new sap.m.Input({width:"150px"}).bindProperty("value" ,defaultValueJSON.Columns[j].Name);
				//Attaching onAfterRendering so that in case of !<null> path name should be set otherwise nothing
				iconField.addEventDelegate({
					onAfterRendering : function(oEvent){
					//Getting the input field
					var control = oEvent.srcControl;
					//Getting the value to be set
					var icons = control.getBindingContext().getObject().MatchIcons;
					//if value is not <null> meaning set the value otherwise not
					if(icons != "<null>"){
						control.setValue(icons);
					}else{
						control.setValue("");
					}
				}});
				//Browse Button to browse for icons within the projects
				var iconBrowse = new sap.m.Button({width:"30%",text:"..."});
				//Press event	
				iconBrowse.attachPress(function(oEvent){
					//Getting the parent
					var parent = oEvent.getSource().getParent();
					//Getting the actual control created in the table
					var control = parent.getContent()[0];
					//Calling to openBrowseFileDialog to display the dialog for browse
					openBrowseFileDialog(-1,"icons", iconField,function(){
						//Getting the path
						var iconValueString = iconField.getValue();
						//Checking whether the filepath is set to ""
						if(iconValueString != ""){
							//Adding the serve
							iconValueString = iconValueString.substring(iconValueString.indexOf("/CM/")+1);
						}
						control.setValue(iconValueString);
					});
					//Getting the row index and setting that row index checked data as true
					var path = this.getBindingContext().getPath();
					var position = parseInt(path.substring(path.lastIndexOf("/")+1));
					configureStructuralParametersTable.getModel().getData().modelData[position].Checked = "true";
				});
				parameterField.addContent(iconField);
				parameterField.addContent(iconBrowse);
				break;
			case "LiteButton" :
				//Creation the transparent button
				parameterField = new sap.m.Button({type :"Transparent" , text : "{"+defaultValueJSON.Columns[j].ColumnName +"}"});
				parameterField.attachPress(function(oEvent){
					//only in case of color context lite button, the edit dialog should appear
					if(defaultValueJSON.Type == "ColorContext")
						openEditColorContextDialog(defaultValueJSON, oEvent.getSource());
					//Getting the row index and setting that row index checked data as true
					var path = this.getBindingContext().getPath();
					var position = parseInt(path.substring(path.lastIndexOf("/")+1));
					configureStructuralParametersTable.getModel().getData().modelData[position].Checked = "true";
				});
				break;
			case "ValueHelpField":
				//Creation of value help field
				var name = defaultValueJSON.Columns[j].Name;
				
				parameterField = new sap.m.Input({ showValueHelp : true});
				
				if(com.sap.xmii.common.util.MIIi5Util.isObjectNotNull(name)){
					parameterField.bindProperty("value" ,  name );
				}else{
					parameterField.bindProperty("value" , defaultValueJSON.Columns[j].ColumnName);
				}
				
				parameterField.attachValueHelpRequest(function(oEvent){
					if(name ==  "SelectedTagCategoryUOMs"){
						createDynamicValueHelpDialog(oEvent.getSource(),"UOM" , thisObj.picAnalysisParam["UOM"]);
					}
				});
				break;
			default :
				//Creation default input field
				parameterField = new sap.m.Input({text :"{"+defaultValueJSON.Columns[j].ColumnName +"}",change:function(){
					//Getting the row index and setting that row index checked data as true
					var path = this.getBindingContext().getPath();
					var position = parseInt(path.substring(path.lastIndexOf("/")+1));
					configureStructuralParametersTable.getModel().getData().modelData[position].Checked = "true";
				}});
			}
			//Adding the cells to the columns list Items
			parameterColumnsListItems.addCell(parameterField);

		}
		//Setting the column list items to the table's items and giving the path to get the value to render the rows
		configureStructuralParametersTable.bindAggregation("items", {
			path: "/modelData",
			template: parameterColumnsListItems
		});
	}

	/**
	 * Function responsible to open a dialog for structural parameters
	 * @param defaultValueJSON
	 * @return
	 */
	function openConfigureStructuralParameters(defaultValueJSON, oContext){
		if(defaultValueJSON.Type == "ColorIndicator") {//if colorIndicator parameter is selected
			//Creation of JSON of the default value to pass
			defaultValueJSON.Columns = [{"DataType" :"Double" ,"ColumnName" :"From"},{"DataType" :"Double" ,"ColumnName" :"To"},{"DataType" :"Color" ,"ColumnName" :"Color"}];
			//Setting the array to the JSON
			defaultValueJSON.Rows = createJSONForColorIndicator(oContext);
		} else if (defaultValueJSON.Type == "PenType") {//if penType is selected
			//Creation of JSON to have Columns details
			defaultValueJSON.Columns = [{"DataType" :"DisableString" ,"ColumnName" :"ValueColumns"},{"DataType" :"Multiple" ,"ColumnName" :"Type"}];
			
			//Setting the array to the JSON
			defaultValueJSON.Rows = createJSONForPenType(oContext);
		} else if(defaultValueJSON.Type == "DataSeries") {//if dataSeries parameter is selected
			//Creation of JSON to have Columns details
			defaultValueJSON.Columns = [{"DataType" :"DisableString" ,"Name" :"index","ColumnName" :"Id"},{"DataType" :"Color" ,"ColumnName" :"Color"},{"DataType" :"Multiple" ,"ColumnName" :"MarkerStyle"},{"DataType" :"Color" ,"ColumnName" :"ViolationColor"},{"DataType" :"Double" ,"ColumnName" :"LineThickness"},{"DataType" :"Multiple" ,"ColumnName" :"LineStyle"}];
			//Setting the array to the JSON
			defaultValueJSON.Rows = createJSONForDataSeries(oContext);
			
		} else if(defaultValueJSON.Type == "ColorContext") {//For Color Context
			//Creation of JSON to have Columns details
			//Creation of JSON to have Columns details
			defaultValueJSON.Columns = [{"DataType" :"Color" ,"ColumnName" :"Color" , "Name" :"MatchColors"},{"DataType" :"Icon" ,"ColumnName" :"Icon", "Name" :"MatchIcons"}];
			var matchColumns = "";
			if(thisObj.changedParams.length <= 0 || (thisObj.colorContexts == null || thisObj.colorContexts == undefined)){
				matchColumns = thisObj.getGridObject().getMatchColumns();
			}else{
				var arr = $.grep(thisObj.changedParams,function(obj){
					if(obj.Name ===  "MatchColumns"){
						return obj.Value;
					}
				});
				if(arr.length != 0)
					matchColumns = arr[0].Value;
			}
			if(matchColumns != undefined && matchColumns != null && matchColumns != ""){
				var columnArray = matchColumns.split(",");
				for(var i = 0 ; i < columnArray.length ; i++){
					if(columnArray[i] != "null")
						defaultValueJSON.Columns.push({"DataType" : "LiteButton" , "ColumnName" : columnArray[i]});
				}
			}
			defaultValueJSON.Rows = createJSONForColorContext(oContext);
		}

		//Creation of the dialog
		var configureStructuralParameterDialog = sap.ui.getCore().byId("configureStructuralParameterDialog");
		if(configureStructuralParameterDialog == null) {
			configureStructuralParameterDialog = new sap.m.Dialog("configureStructuralParameterDialog", {modal: true
				//contentWidth: "50%"
			}).addStyleClass("sapUiSizeCompact");
		} else {
			configureStructuralParameterDialog.destroyContent();
			configureStructuralParameterDialog.destroyButtons();
		}
		//attach after close function
		configureStructuralParameterDialog.attachAfterClose(function(){
			this.destroyContent();
			this.destroyButtons();
		}, configureStructuralParameterDialog);

		//Creation of table
		var configureStructuralParametersTable = new sap.m.Table("configureStructuralParametersTable");

		//Based on the Type, create the button to the dialog or name of dialog
		if(defaultValueJSON.Type == "ColorIndicator"){
			//Setting the title to the dialog
			configureStructuralParameterDialog.setTitle(com.sap.xmii.common.util.MessageBundle.getText("XLBL_CONFIGURE_COLOR_INDICATOR"));
			//Creation of Add button
			var addButtonIndicator = new sap.m.Button({text:com.sap.xmii.common.util.MessageBundle.getText("XBUT_ADD"), icon : "sap-icon://add", 
				press : function(){
					//Getting the model
					var paramerterModel = configureStructuralParametersTable.getModel();
					//Getting the data
					var parameterModelData = paramerterModel.getData().modelData;
	
					//Getting the last value so that the new row can be populated with the last value
					//Checking for  parameterModelData
					if(parameterModelData != null && parameterModelData.length){
						var lastToValue = parameterModelData[parameterModelData.length-1].To;
						var lastFromValue = parameterModelData[parameterModelData.length-1].From;
					} else {
						//var lastToValue = 0;
						parameterModelData =[];
					}
					
					var isValid = validateColorIndicator(configureStructuralParametersTable);
					if(!isValid) {
						sap.ui.getCore().byId("configureParameterApplyButton").setEnabled(false);
						return ;
					}
					
					// #1570798208
					//Create the new row details
					if(lastToValue == undefined)
						var newRow = {"Color" : "#000000"};
					else
						var newRow = {"From" :""+lastToValue+"" , "Color" : "#000000"};
					//Create the new row details
					//var newRow = {"From" :""+lastToValue+"" , "To" :""+lastToValue+"" , "Color" : "#000000"};
					//Push the new row to the data array
					parameterModelData.push(newRow);
					//Set the data to the model
					paramerterModel.setData({modelData : parameterModelData});
					//Set the model to table 
					configureStructuralParametersTable.setModel(paramerterModel);
					//Rerender the table with one more row
					configureStructuralParametersTable.rerender();
				}
			}); 
			//Creation of DeleteButton
			var deleteButtonIndicator = new sap.m.Button({text:com.sap.xmii.common.util.MessageBundle.getText("XBUT_DELETE"), icon : "sap-icon://decline",press : function(){
				//Getting the selected contexts
				var selectedContext = configureStructuralParametersTable.getSelectedContexts();
				//Getting the model Data
				var parameterModelData = configureStructuralParametersTable.getModel().getData().modelData;
				//Checking for empty selectedContext
				if(selectedContext != null && selectedContext != undefined && selectedContext.length > 0){
					//Looping through the selectedContext to delete it
					for(var i = 0; i < selectedContext.length ; i++){
						//Getting the path
						var path = selectedContext[i].getPath();
						//Getting the index of the selectedContext from the path mentioned
						var indexOfSelectedRow = path.substring(path.lastIndexOf("/")+1);
						//Deleting the index
						parameterModelData.splice(indexOfSelectedRow,1);
						//Refreshing the model
						configureStructuralParametersTable.getModel().refresh();
					}
				}
				//Once deleted removing the selection from the table
				configureStructuralParametersTable.removeSelections();
				if(validateColorIndicator(configureStructuralParametersTable)) {
					sap.ui.getCore().byId("configureParameterApplyButton").setEnabled(true);
					return ;
				}
			}
			});
			//Creation of header toolbar to contain add and delete button
			var headerToolbar = new sap.m.Toolbar({
				content: [addButtonIndicator , deleteButtonIndicator]
			});
			//Adding the header toolbar to the table
			configureStructuralParametersTable.setHeaderToolbar(headerToolbar);
			//Setting the selection mode to the table
			configureStructuralParametersTable.setMode("SingleSelectMaster");
			//Setting the dialog  width
			configureStructuralParameterDialog.setContentWidth("50%");
		} else if (defaultValueJSON.Type == "DataSeries") {
			//If Data series is selected
			configureStructuralParameterDialog.setTitle(com.sap.xmii.common.util.MessageBundle.getText("XLBL_CONFIGURE_DATA_SERIES"));
			//Setting the dialog  width
			configureStructuralParameterDialog.setContentWidth("50%");
		} else if (defaultValueJSON.Type == "PenType") {
			//If PenType is selected
			configureStructuralParameterDialog.setTitle(com.sap.xmii.common.util.MessageBundle.getText("XLBL_CONFIGURE_PEN_TYPE"));
			//Setting the dialog  width
			configureStructuralParameterDialog.setContentWidth("50%");
		} else if (defaultValueJSON.Type == "ColorContext") {
			//If color context is selected
			configureStructuralParameterDialog.setTitle(com.sap.xmii.common.util.MessageBundle.getText("XLBL_CONFIGURE_COLOR_CONTEXT"));
			//Creation of content of colo context dialog
			var colorContextVerticalLayout = createContentForColorContext(defaultValueJSON, configureStructuralParametersTable);
			//Adding the content
			configureStructuralParameterDialog.addContent(colorContextVerticalLayout);
			//Making the row in the table selectable
			configureStructuralParametersTable.setMode("SingleSelectMaster");
			configureStructuralParameterDialog.setContentWidth("100%");
		}

		//Looping through defaultValueJSON.Columns to create columns
		for(var i = 0 ; i < defaultValueJSON.Columns.length ;i++){
			configureStructuralParametersTable.addColumn(new sap.m.Column({header: new sap.m.Label({text :""+defaultValueJSON.Columns[i].ColumnName +"", textAlign: "Center"})}));
		}

		//Creation of ColumnListItems
		createColumnListTemplate(defaultValueJSON , configureStructuralParametersTable );
		
		//Adding the table to the dialog
		configureStructuralParameterDialog.addContent(configureStructuralParametersTable);
		//Creation of Apply button
		configureStructuralParameterDialog.addButton(new sap.m.Button("configureParameterApplyButton",{text: com.sap.xmii.common.util.MessageBundle.getText("XBUT_APPLY"), tooltip: com.sap.xmii.common.util.MessageBundle.getText("XLTP_APPLY"), 
			press:function(){
			
			if(	thisObj.getChartTemplateObject().chartConfig.ChartType == "Gauge") {
			if(!validateColorIndicator(configureStructuralParametersTable)) {
				sap.ui.getCore().byId("configureParameterApplyButton").setEnabled(false);
				return ;
			}
			}
			
				//Getting the table
				var parameterTable = sap.ui.getCore().byId("configureStructuralParametersTable");
				//Getting the modelData
				var parameterModelData = parameterTable.getModel().getData("Object").modelData;
				//For color Indicator
				if(defaultValueJSON.Type == "ColorIndicator"){
					//Looping through the model data to get the exact format how we had received the default value
					var defaultValue = "";
					if(parameterModelData != null && parameterModelData != undefined && parameterModelData.length > 0){
						for(var i = 0; i < parameterModelData.length ; i ++){
							defaultValue += (i+1);
							defaultValue += ",";
							defaultValue += parameterModelData[i].From;
							defaultValue += ",";
							defaultValue += parameterModelData[i].To;
							defaultValue += "," ;
							defaultValue += parameterModelData[i].Color;
	
							if(i != parameterModelData.length-1)
								defaultValue +="_";
						}
					}
					if(defaultValue != ""){
						pushToChangedParameters("ColorIndicator",defaultValue);
					} else {
						pushToChangedParameters("ColorIndicator", null);
					}
				} else if(defaultValueJSON.Type == "DataSeries") {
					var lineStyle, markerStyle;
					for(var i=0; i<parameterModelData.length; i++){
						if(parameterModelData[i].Checked === "true") {
							pushToChangedParameters("PenColor." + parameterModelData[i].index, parameterModelData[i].Color);
							
							if(parameterModelData[i].LineStyle === "Solid")
								lineStyle = 0;
							else if(parameterModelData[i].LineStyle === "Dashed")
								lineStyle = 1;
							else if(parameterModelData[i].LineStyle === "Dotted")
								lineStyle = 2;
							
							pushToChangedParameters( "LineStyle." + parameterModelData[i].index, lineStyle);
							pushToChangedParameters( "LineThickness." + parameterModelData[i].index, parameterModelData[i].LineThickness);
							
							markerStyle = parameterModelData[i].MarkerStyle.substring(0, parameterModelData[i].MarkerStyle.indexOf(' '));
							pushToChangedParameters("PenMarkerStyle." + parameterModelData[i].index,markerStyle);
							pushToChangedParameters("PenType." + parameterModelData[i].index,parameterModelData[i].PenType);
							pushToChangedParameters("ViolationMarkerColor." + parameterModelData[i].index,  parameterModelData[i].ViolationColor);
						}
					}
				} else if (defaultValueJSON.Type == "PenType"){
					for(var index = 0 ; index < parameterModelData.length ; index++){
						if(parameterModelData[index].Checked === "true") {
							var paramName = "PenType." + (parameterModelData[index].index + 1);
							pushToChangedParameters(paramName, parameterModelData[index].Type);
						}
					}
				} else if(defaultValueJSON.Type == "ColorContext"){
					//creation of data to be pushed to the changed parameters
					createJSONOnApplyOfColorContextDialog(defaultValueJSON , parameterModelData);
				}
				sap.ui.getCore().byId("configureStructuralParameterDialog").close();
			}
		}));
		//Creation of cancel Button
		configureStructuralParameterDialog.addButton(new sap.m.Button({text: com.sap.xmii.common.util.MessageBundle.getText("XBUT_CANCEL"), tooltip: com.sap.xmii.common.util.MessageBundle.getText("XLTP_CANCEL"), 
			press:function(){
				resetDataForCancel(defaultValueJSON.Type);
				sap.ui.getCore().byId("configureStructuralParameterDialog").destroy();
			}
		}));

		configureStructuralParameterDialog.open();
		//jQuery.sap.byId(divCellId).append('<div id=\"'+divCellId+'ec-container\" style="width: 100%;height:100%;overflow:scroll"></div> <script src='+cameraLiveURL+' async></scr' + 'ipt>');

	}
	
	/**
	 * This function is responsible to open the configuration dialog for PIC analysis parameters
	 * @param valueJSON
	 * @param oContext
	 * @param toolBar
	 * @return
	 */
	function openConfigurePICAnalysisParameters(valueJSON , oContext ){
		
		// Getting the common data like Available tag/node category  and UOM.
		getPICAnaysisCommonData();
		
		//Creation of the dialog
		var picAnalysisParameterDialog = sap.ui.getCore().byId("picAnalysisParameterDialog");
		if(picAnalysisParameterDialog == null){
			picAnalysisParameterDialog = new sap.m.Dialog("picAnalysisParameterDialog", {modal: true
			}).addStyleClass("sapUiSizeCompact");
		}else{
			picAnalysisParameterDialog.destroyContent();
			picAnalysisParameterDialog.destroyButtons();
		}
		//attach after close function
		picAnalysisParameterDialog.attachAfterClose(function(){
			this.destroyContent();
			this.destroyButtons();
		}, picAnalysisParameterDialog);

		//For each parameters
		if(valueJSON.Type == "TagSelection"){
			
			picAnalysisParameterDialog.setTitle(oBundle.getText("XLBL_CONFIGURE_TAG_SELECTION"));
			// Creation of the JSON data for dialog content
			valueJSON = createRowDataforTagSelection(valueJSON);

			// Creation of the Dialog content which includes available tag category
			var hlayoutForTagSelection = new sap.m.Toolbar({design : sap.m.ToolbarDesign.Transparent ,width : "100%",content :[ 
	                     new sap.m.Title({text:oBundle.getText("XLTP_TAG_CATEGORY")}),
	                     new sap.m.ToolbarSpacer(),
	                     new sap.m.Button({text : oBundle.getText("XLBL_ADD_CATEGORY") , press : function(){
								createDynamicValueHelpDialog(sap.ui.getCore().byId("configurePICAnalysisParamTable"),"AvailableTagCategory" ,
										thisObj.picAnalysisParam.AvailableTagCategory);
	                    }})
	                 ]
			});

			// Creation of table
			var configurePICAnalysisParamTable = new sap.m.Table("configurePICAnalysisParamTable");
			
			// Looping through valueJSON.Columns to create columns
			for(var i = 0 ; i < valueJSON.Columns.length ;i++){
				configurePICAnalysisParamTable.addColumn(new sap.m.Column({header: new sap.m.Label({text :""+valueJSON.Columns[i].ColumnName +"", textAlign: "Center"})}));
			}
			configurePICAnalysisParamTable.addColumn(new sap.m.Column({ width :"4%", header: new sap.m.Label()}));
			configurePICAnalysisParamTable.setMode(sap.m.ListMode.SingleSelectMaster);

			configurePICAnalysisParamTable.attachSelectionChange(function(oEvent){
				// Getting the selected item , removing from the valueJSON
				var selectedRow = oEvent.getSource()._aSelectedPaths;
				var index = selectedRow[0].substr(selectedRow[0].lastIndexOf("/")+1,selectedRow[0].length) ;

				var formulaInput = sap.ui.getCore().byId("tagCategoryField");
				var formulaAddBtn = sap.ui.getCore().byId("addFormulaButton");
				if(formulaInput.getValue() != ""){
					formulaInput.setValue(formulaInput.getValue() + " " + valueJSON.Rows[index].SelectedTagCategories);
				}else{
					formulaInput.setValue(valueJSON.Rows[index].SelectedTagCategories);
				}
				formulaAddBtn.setEnabled(true);
				formulaInput.focus();
			});

			var groupByPropertiesExisted = checkSelectGroupByProperties(thisObj); 

			var parameterModel = new sap.ui.model.json.JSONModel();
			parameterModel.setData({modelData:valueJSON.Rows});
			configurePICAnalysisParamTable.setModel(parameterModel);
			configurePICAnalysisParamTable.bindItems("/modelData",function(sID,oContext){
				// Creation of ColumnListItems
				var paramListItem = new  sap.m.ColumnListItem();
				if(oContext === undefined){
					return 	paramListItem;
				}
				return createSelectTagCatTemplate(oContext,paramListItem, groupByPropertiesExisted);
			});

			picAnalysisParameterDialog.addContent(hlayoutForTagSelection);
			picAnalysisParameterDialog.addContent(configurePICAnalysisParamTable);

			var oDivider = new sap.ui.commons.HorizontalDivider("HorizontalBar",{visible: true, width: "100%", type: "Area", height: "Small"});
			picAnalysisParameterDialog.addContent(oDivider);
			
			var formulaBar = createPICAnalysisFormulaBar(valueJSON);
			picAnalysisParameterDialog.addContent(formulaBar);
			
		}else if(valueJSON.Type == "NodeSelectionExpression"){
			picAnalysisParameterDialog.setTitle(com.sap.xmii.common.util.MessageBundle.getText("XLBL_CONFIGURE_NODE_SELECTION"));
			if(oContext.getProperty("propValue")!=""|| oContext.getProperty("isChanged")  ){
				var paramValue = oContext.getProperty("propValue");
			}else{
				var paramValue = oContext.getProperty("defaultPropValue");
			}
			//Creation of the Dialog content 
			var vLayoutNodeSelection = createPropertyExpressionContent("NodeSelectionExpression" , true , paramValue.replace(/\\"/g,'\"'));
			picAnalysisParameterDialog.addContent(vLayoutNodeSelection);
			
		}else if(valueJSON.Type == "SelectedNodes"){
			picAnalysisParameterDialog.setTitle(com.sap.xmii.common.util.MessageBundle.getText("XLBL_CONFIGURE_SEL_NODE"));
			var vLayoutNodeSelection = createNodeSelectionDialogContent(oContext);
			picAnalysisParameterDialog.addContent(vLayoutNodeSelection);
		}
		else if(valueJSON.Type == "ScopePropertyExpression"){
			
			picAnalysisParameterDialog.setTitle(com.sap.xmii.common.util.MessageBundle.getText("XLBL_CONFIGURE_ANALYSIS_SCOPE"));
			if(oContext.getProperty("propValue")!="" || oContext.getProperty("isChanged")){
				var paramValue = oContext.getProperty("propValue");
			}else{
				var paramValue = oContext.getProperty("defaultPropValue");
			}
			//Creation of the Dialog content 
			var vLayoutAnalysisScope = createPropertyExpressionContent("ScopePropertyExpression" , true , paramValue.replace(/\\"/g,'\"'));
			
			picAnalysisParameterDialog.addContent(vLayoutAnalysisScope);
			
		}else if(valueJSON.Type == "ScopePeColExpression"){
			
			picAnalysisParameterDialog.setTitle(oBundle.getText("XLBL_CONFIGURE_PE_COL_SCOPE"));
			if(oContext.getProperty("propValue")!="" || oContext.getProperty("isChanged")){
				var paramValue = oContext.getProperty("propValue");
			}else{
				var paramValue = oContext.getProperty("defaultPropValue");
			}
			//Creation of the Dialog content 
			var vLayoutAnalysisScope = createPropertyExpressionContent("ScopePeColExpression" , true , paramValue.replace(/\\"/g,'\"'));
			
			picAnalysisParameterDialog.addContent(vLayoutAnalysisScope);
			
		}else if(valueJSON.Type == "SelectedGroupByProperties"){

			picAnalysisParameterDialog.setTitle(com.sap.xmii.common.util.MessageBundle.getText("XLBL_CONFIGURE_SECONDARY_DIMENSION"));
			if(oContext.getProperty("propValue")!="" || oContext.getProperty("isChanged")){
				var paramValue = oContext.getProperty("propValue");
			}else{
				var paramValue = oContext.getProperty("defaultPropValue");
			}
			//Creation of the Dialog content 
			var vLayoutSecondaryDimension = createPropertyExpressionContent("SelectedGroupByProperties" , false , paramValue.replace(/\\"/g,'\"'));
			
			picAnalysisParameterDialog.addContent(vLayoutSecondaryDimension);
			
		
		}else if(valueJSON.Type == "ScopeDimColExpression"){
		
			// picAnalysisParameterDialog.setTitle(oBundle.getText("XLBL_CONFIGURE_PE_COL_SCOPE"));
			picAnalysisParameterDialog.setTitle(oBundle.getText("XLBL_CONFIGURE_KPI_DIM_SCOPE"));
			if(oContext.getProperty("propValue")!="" || oContext.getProperty("isChanged")){
				var paramValue = oContext.getProperty("propValue");
			}else{
				var paramValue = oContext.getProperty("defaultPropValue");
			}
			//Creation of the Dialog content 
			getKPIDimFromServer(thisObj);
			var vLayoutAnalysisScope = createPropertyExpressionContent("ScopeDimColExpression" , true , paramValue.replace(/\\"/g,'\"'));
			
			picAnalysisParameterDialog.addContent(vLayoutAnalysisScope);
		
		}
		//Adding ok button
		picAnalysisParameterDialog.addButton(new sap.m.Button({text : com.sap.xmii.common.util.MessageBundle.getText("XBUT_OK"),press : function(){
			if(valueJSON.Type == "TagSelection"){
				if (valueJSON.Rows.length == 0) {
					showMessageBox(oBundle.getText("XMSG_SELECT_TAG_SPECIFIC_CAT"), sap.m.MessageBox.Icon.ERROR, oBundle.getText("XMSG_VALIDATION_FAILED"));
					return "Error";
				}
				
				var preValue = thisObj.tagSelectionBackupForCancel;
				var selectedTagCategory = "";
				var selectedTagCategoryAlias = "";
				var selectedTagCategoryUOM = "";
				var selectedTagCategoryAMs = "";
				var selectedTagCatIntermediate = "";
				var selectedTagCatPrice = "";
				//Looping through the valueJSON to create the string and store it in global variable
				for(var i = 0 ; i < valueJSON.Rows.length ; i++){
					
					var row = valueJSON.Rows[i];
					selectedTagCategory = selectedTagCategory  + ( i == 0  ? row.SelectedTagCategories : ","+row.SelectedTagCategories);
					selectedTagCategoryAlias = selectedTagCategoryAlias  + ( i == 0  ?  row.SelectedTagCategoryAliases : ","+row.SelectedTagCategoryAliases);
					var currentUOM = row.SelectedTagCategoryUOMs == oBundle.getText("XLBL_DEFAULT_UOM_VALUE") ? "" : row.SelectedTagCategoryUOMs;
					selectedTagCategoryUOM = selectedTagCategoryUOM  + ( i == 0  ? currentUOM : ","+currentUOM);
					selectedTagCategoryAMs = selectedTagCategoryAMs + ( i == 0 ? row.AnalysisAggregationModes : ","+row.AnalysisAggregationModes);
					if(row.SelectedTagCategoryIntermediates == undefined){
						row.SelectedTagCategoryIntermediates = "";
					}
					selectedTagCatIntermediate = selectedTagCatIntermediate + 
																	( i == 0 ? row.SelectedTagCategoryIntermediates : ","+row.SelectedTagCategoryIntermediates);

					
	    		if(row.SelectedTagCategoryCostCalculates == undefined){
					row.SelectedTagCategoryCostCalculates = "";
				} else {
					row.SelectedTagCategoryCostCalculates = row.SelectedTagCategoryCostCalculates + "";
				}
				if (row.SelectedTagCategoryCostCalculates.indexOf("singleCat") >= 0) {
					var singleCatArr =  row.SelectedTagCategoryCostCalculates.split(":");
					var singleCat = singleCatArr[1];
					for (var j=0; j < valueJSON.Rows.length ; j++) {
						var row2 = valueJSON.Rows[j];
						if (row2.SelectedTagCategories.trim() == singleCat.trim()) {
							row.SelectedTagCategoryCostCalculates = row2.SelectedTagCategoryCostCalculates;
							break;
						}
					}
				}
				selectedTagCatPrice = selectedTagCatPrice + ( i == 0 ? row.SelectedTagCategoryCostCalculates : ","+row.SelectedTagCategoryCostCalculates);
				}
				
				pushToChangedParameters("SelectedTagCategories" , selectedTagCategory);
				pushToChangedParameters("DisplayTagCategories" , selectedTagCategory);
				pushToChangedParameters("SelectedTagCategoryAliases" ,selectedTagCategoryAlias);
				pushToChangedParameters("SelectedTagCategoryUOMs", selectedTagCategoryUOM);
				pushToChangedParameters("AnalysisAggregationModes" ,selectedTagCategoryAMs);
				pushToChangedParameters("SelectedTagCategoryIntermediates", selectedTagCatIntermediate);
				pushToChangedParameters("SelectedTagCategoryCostCalculates", selectedTagCatPrice);

				thisObj.tagSelection = valueJSON.Rows;
				oContext.getProperty().isChanged = true;
			}else if(valueJSON.Type == "NodeSelectionExpression"){
				var preValue = oContext.getProperty().propValue;
				//Removing the "Enter" from the value
				var expressionValue = sap.ui.getCore().byId("propertyExpArea").getValue().replace(/\"/g,'\\"');
				var encodedValue = encodeURI(expressionValue).replace(/%0A/g , " ");
				//Assign the data
				oContext.getProperty().propValue = decodeURI(encodedValue);	
				oContext.getProperty().isChanged = true;
				pushToChangedParameters("NodeSelectionExpression" ,decodeURI(encodedValue));
				
			}else if(valueJSON.Type == "SelectedNodes"){
				var preValue = oContext.getProperty().propValue;
				var configurePICAnalysisParamTable = sap.ui.getCore().byId("configurePICAnalysisParamTable");
				var modelData = configurePICAnalysisParamTable.getModel().getData().modelData;
				var selectedNodeValue = "";
				if(com.sap.xmii.common.util.MIIi5Util.isObjectNotNull(modelData)){
					for(var i= 0 ; i < modelData.length ;i++){
						selectedNodeValue = selectedNodeValue + (selectedNodeValue == "" ? modelData[i].Name : ","+ modelData[i].Name);
					}
				}
				if(selectedNodeValue == "")
					pushToChangedParameters("SelectedNodes" , "");	
				else
					pushToChangedParameters("SelectedNodes" , selectedNodeValue);
				oContext.getProperty().propValue = selectedNodeValue;
				oContext.getProperty().isChanged = true;
			}else if(valueJSON.Type == "ScopePropertyExpression" || valueJSON.Type == "ScopePeColExpression" || valueJSON.Type == "ScopeDimColExpression"){
				var preValue = oContext.getProperty().propValue;
				//Removing the "Enter" from the value
				getPeInfoName(valueJSON.Type, sap.ui.getCore().byId("propertyExpArea").getValue());
				var expressionValue = sap.ui.getCore().byId("propertyExpArea").getValue().replace(/\"/g,'\\"');
				var encodedValue = encodeURI(expressionValue).replace(/%0A/g , " ");
				//Assign the data
				oContext.getProperty().propValue = decodeURI(encodedValue);	
				oContext.getProperty().isChanged = true;
				pushToChangedParameters(valueJSON.Type , decodeURI(encodedValue));
				if(isObjectNotNull(encodedValue)
						&& (valueJSON.Type == "ScopePropertyExpression" || valueJSON.Type == "ScopePeColExpression")){
					disableTagIntermediateCheckBox();
				}
			}else if(valueJSON.Type == "SelectedGroupByProperties"){
				var propertyTable = sap.ui.getCore().byId("propertyTable");
				var modelData = propertyTable.getModel().getData().modelData;
				var selectedNodeValue = "";
				if(com.sap.xmii.common.util.MIIi5Util.isObjectNotNull(modelData)){
					for(var i= 0 ; i < modelData.length ;i++){
						selectedNodeValue = selectedNodeValue + (selectedNodeValue == "" ? modelData[i].Name : ","+ modelData[i].Name);
						if(modelData[i].Name.trim().indexOf("[AWS]") === -1
								&& modelData[i].Name.trim().indexOf("[DIM]") === -1){
							disableTagIntermediateCheckBox();
						}
					}
				}
				thisObj.getQueryObject().overrides["GroupByPropertiesIsChanged"] = "true";
				if(selectedNodeValue == ""){
					pushToChangedParameters("SelectedGroupByProperties" , "");	
				}else{
					pushToChangedParameters("SelectedGroupByProperties" , selectedNodeValue);	
				}
				getPeInfoName(valueJSON.Type, selectedNodeValue);
				oContext.getProperty().isChanged = true;
				oContext.getProperty().propValue =  selectedNodeValue;
			}
			picAnalysisParameterDialog.close();
		}}));
		//Adding cancel button
		picAnalysisParameterDialog.addButton(new sap.m.Button({text : com.sap.xmii.common.util.MessageBundle.getText("XBUT_CANCEL"),press : function(){
			picAnalysisParameterDialog.close();
		}}));
		picAnalysisParameterDialog.open();
	}
	/**
	 * Function responsible to get commons data for PIC Analysis catalog query like UOM , Available Tag/Node Category
	 * @param toolBar
	 * @return
	 */
	function getPICAnaysisCommonData(){
		if(thisObj.picAnalysisParam == null || this.picAnalysisParam == undefined){
			
			thisObj.picAnalysisParam = [];
			
			var param ={"Mode" : "GetStructuralParameters","Operation" :"getPICAnalysisRegularParam", "content-type":"text/json"};
			//Getting the data
			var parameters = com.sap.xmii.common.util.MIIi5Util.getServiceResponseInJson(com.sap.xmii.common.util.GenericConstants.CECATALOG_URL, param);
			//Checking for the rowset which contains available node Categories
			if(com.sap.xmii.common.util.MIIi5Util.isObjectNotNull(parameters) && com.sap.xmii.common.util.MIIi5Util.isObjectNotNull(parameters.Rowsets) && isArrayNotEmpty(parameters.Rowsets.Rowset) &&
					com.sap.xmii.common.util.MIIi5Util.isObjectNotNull(parameters.Rowsets.Rowset[0]) && com.sap.xmii.common.util.MIIi5Util.isObjectNotNull(parameters.Rowsets.Rowset[0].Row)) {
				thisObj.picAnalysisParam["AvailableNodeCategory"] = [];
				for(var l = 0 ; l < parameters.Rowsets.Rowset[0].Row.length ; l++){
					thisObj.picAnalysisParam["AvailableNodeCategory"].push({"Name":parameters.Rowsets.Rowset[0].Row[l].Name , "PropertySets" : parameters.Rowsets.Rowset[0].Row[l].PropertySetName , "Property" : parameters.Rowsets.Rowset[0].Row[l].PropertyName});
				}

			}
			
			//Checking for the next rowset which contains UOM
			if(com.sap.xmii.common.util.MIIi5Util.isObjectNotNull(parameters) && com.sap.xmii.common.util.MIIi5Util.isObjectNotNull(parameters.Rowsets) && isArrayNotEmpty(parameters.Rowsets.Rowset) &&
					com.sap.xmii.common.util.MIIi5Util.isObjectNotNull(parameters.Rowsets.Rowset[1]) && com.sap.xmii.common.util.MIIi5Util.isObjectNotNull(parameters.Rowsets.Rowset[1].Row)) {
				thisObj.picAnalysisParam["UOM"] = [];
				for(var l = 0 ; l < parameters.Rowsets.Rowset[1].Row.length ; l++){
					thisObj.picAnalysisParam["UOM"].push({"Name":parameters.Rowsets.Rowset[1].Row[l].Name});
				}
			}
			//Checking for the rowset which contains available tag Categories
			if(com.sap.xmii.common.util.MIIi5Util.isObjectNotNull(parameters) && com.sap.xmii.common.util.MIIi5Util.isObjectNotNull(parameters.Rowsets) && isArrayNotEmpty(parameters.Rowsets.Rowset) &&
					com.sap.xmii.common.util.MIIi5Util.isObjectNotNull(parameters.Rowsets.Rowset[2]) && com.sap.xmii.common.util.MIIi5Util.isObjectNotNull(parameters.Rowsets.Rowset[2].Row)) {
				thisObj.picAnalysisParam["AvailableTagCategory"] = [];
				for(var l = 0 ; l < parameters.Rowsets.Rowset[2].Row.length ; l++){
					thisObj.picAnalysisParam["AvailableTagCategory"].push({"Name":parameters.Rowsets.Rowset[2].Row[l].Name});
				}
			}
			//Checking for the rowset which contains available group categories
			if(com.sap.xmii.common.util.MIIi5Util.isObjectNotNull(parameters) && com.sap.xmii.common.util.MIIi5Util.isObjectNotNull(parameters.Rowsets) && isArrayNotEmpty(parameters.Rowsets.Rowset) &&
					com.sap.xmii.common.util.MIIi5Util.isObjectNotNull(parameters.Rowsets.Rowset[3]) && com.sap.xmii.common.util.MIIi5Util.isObjectNotNull(parameters.Rowsets.Rowset[3].Row)) {
				thisObj.picAnalysisParam["Categories"] = [];
				for(var l = 0 ; l < parameters.Rowsets.Rowset[3].Row.length ; l++){
					thisObj.picAnalysisParam["Categories"].push({"Name":parameters.Rowsets.Rowset[3].Row[l].Name});
				}
			}

			if (com.sap.xmii.common.util.MIIi5Util.isObjectNotNull(parameters.Rowsets.Rowset[4]) && com.sap.xmii.common.util.MIIi5Util.isObjectNotNull(parameters.Rowsets.Rowset[4].Row)) {
				SSCEStructuralParamaters.globalPICAnalysisParam["tagCategoryDiscrete"] = [];
				for(var l = 0 ; l < parameters.Rowsets.Rowset[4].Row.length ; l++){
					SSCEStructuralParamaters.globalPICAnalysisParam["tagCategoryDiscrete"].push({"Name":parameters.Rowsets.Rowset[4].Row[l].Name});
				}
			}
			
			if(isArrayEmpty(thisObj.picAnalysisParam["AvailablePEName"])){
				thisObj.picAnalysisParam["AvailablePEName"] = [];
				var serverURL = "/XMII/EventTemplate?Mode=getAllPEInfo";
				var tableResult = com.sap.xmii.common.util.MIIi5Util.getServiceResponseInJson(serverURL);
				if(!isArrayEmpty(tableResult)){
					for(var i = 0; i < tableResult.length; i++){
						var hasAnalysisCols = false;
						if(!isArrayEmpty(tableResult[i].peColDetail)){
							SSCEStructuralParamaters.globalPEColsMap[tableResult[i].peName] = [];
							for(var j = 0; j < tableResult[i].peColDetail.length; j++){
								if(tableResult[i].peColDetail[j].analysisRelevant == "T"){
									SSCEStructuralParamaters.globalPEColsMap[tableResult[i].peName].push({"PeCol":tableResult[i].peColDetail[j].peColName, "PeInfoName":tableResult[i].peName});
									hasAnalysisCols = true;
								}
							}
						}
						if(hasAnalysisCols){
							thisObj.picAnalysisParam["AvailablePEName"].push({"PeInfoName":tableResult[i].peName});;
						}
					}
				}
			}

		}
	}
	/**
	 * Function responsible to create the content for Tag Selection dialogs
	 * @param valueJSON
	 * @return
	 */
	function createTagCategoryDialogContent(valueJSON ){
		
		var hLayoutAvailableTagCategory = new sap.ui.layout.HorizontalLayout().addStyleClass("colorPicker");
		
		// Available tag Category
		var tagCategoryLabel = new sap.m.Label({text : com.sap.xmii.common.util.MessageBundle.getText("XLBL_TAG_CATEGORY")}).addStyleClass("categoryLabelClass");
		var tagCategoryField = new sap.m.Input({showValueHelp : true});
		tagCategoryField.attachValueHelpRequest(function(){
			createDynamicValueHelpDialog(tagCategoryField,"AvailableTagCategory" ,thisObj.picAnalysisParam.AvailableTagCategory);
		});
		tagCategoryField.attachLiveChange(function(){
			if(this.getValue != ""){
				var isValueTagCategory = false;
				//Looping through available tag category to check if this.getValue() is any of the tag category
				//if yes, enable the add button
				var availableCategory = thisObj.picAnalysisParam.AvailableTagCategory;
				for(var k = 0; k< availableCategory.length ; k++){
					if(availableCategory[k].Name == this.getValue()){
						isValueTagCategory = true;
					}
				}
				if(!isValueTagCategory){
					addTagCategoryButton.setEnabled(false);
					return;
				}
				//Looping through selected tag category to check if this.getValue() is any of the selected tag category
				//if yes, disable the add button
				for(var i = 0; i< valueJSON.Rows.length ; i++){
					if(valueJSON.Rows[i].SelectedTagCategories == this.getValue()){
						addTagCategoryButton.setEnabled(false);
						return;
					}
				}
				addTagCategoryButton.setEnabled(true);
			}else{
				addTagCategoryButton.setEnabled(false);
			}
		});
		tagCategoryField.attachChange(function(){
			if(this.getValue != ""){
				var isValueTagCategory = false;
				//Looping through available tag category to check if this.getValue() is any of the tag category
				//if yes, enable the add button
				var availableCategory = thisObj.picAnalysisParam.AvailableTagCategory;
				for(var k = 0; k< availableCategory.length ; k++){
					if(availableCategory[k].Name == this.getValue()){
						isValueTagCategory = true;
					}
				}
				if(!isValueTagCategory){
					addTagCategoryButton.setEnabled(false);
					return;
				}
				//Looping through selected tag category to check if this.getValue() is any of the selected tag category
				//if yes, disable the add button
				for(var i = 0; i< valueJSON.Rows.length ; i++){
					if(valueJSON.Rows[i].SelectedTagCategories == this.getValue()){
						addTagCategoryButton.setEnabled(false);
						return;
					}
				}
				addTagCategoryButton.setEnabled(true);
			}else{
				addTagCategoryButton.setEnabled(false);
			}
		});
		//Add Tag Category button
		var addTagCategoryButton = new sap.m.Button({enabled : false , text : com.sap.xmii.common.util.MessageBundle.getText("XBUT_ADD")}).addStyleClass("colorPicker");
		addTagCategoryButton.attachPress(function(){
			//Push the selected data to the valueJSON and set the updated data to the model
			var configurePICAnalysisParamTable = sap.ui.getCore().byId("configurePICAnalysisParamTable");
			valueJSON.Rows.push({"SelectedTagCategories" : tagCategoryField.getValue(), "SelectedTagCategoryAliases" : tagCategoryField.getValue() , "SelectedTagCategoryUOMs" :""});
			configurePICAnalysisParamTable.getModel().setData({modelData : valueJSON.Rows});
			configurePICAnalysisParamTable.getModel().refresh();
			addTagCategoryButton.setEnabled(false);
		});
		hLayoutAvailableTagCategory.addContent(tagCategoryLabel);
		hLayoutAvailableTagCategory.addContent(tagCategoryField);
		hLayoutAvailableTagCategory.addContent(addTagCategoryButton);
		
		return hLayoutAvailableTagCategory;
	}
	/**
	 * Function responsible to get data for Tag Selection 
	 * @return
	 */
	function creationRowDataforTagSelection(){
		//if(thisObj.tagSelection == null || thisObj.tagSelection == undefined || thisObj.tagSelection.length == 0 ){

			thisObj.tagSelection =[];
			var selectedCategory , selectedAlias , selectedUOM, AnalysisAggregationModes, SelectedTagCategoryIntermediates, selectedCost;

			selectedCategory = thisObj.getQueryObject().getParameter("SelectedTagCategories");
			selectedAlias = thisObj.getQueryObject().getParameter("SelectedTagCategoryAliases");
			selectedUOM = thisObj.getQueryObject().getParameter("SelectedTagCategoryUOMs");
			analysisAggregationModes = thisObj.getQueryObject().getParameter("AnalysisAggregationModes");
			selectedTagCategoryIntermediates = thisObj.getQueryObject().getParameter("SelectedTagCategoryIntermediates");
			selectedCost = thisObj.getQueryObject().getParameter("SelectedTagCategoryCostCalculates");

			if(isArrayNotEmpty(thisObj.changedParams)) {
				for(var i=0;i<thisObj.changedParams.length;i++) {
					if(thisObj.changedParams[i].Name == "SelectedTagCategories") 
						selectedCategory = thisObj.changedParams[i].Value;
					if(thisObj.changedParams[i].Name == "SelectedTagCategoryAliases") 
						selectedAlias = thisObj.changedParams[i].Value;
					if(thisObj.changedParams[i].Name == "SelectedTagCategoryUOMs") 
						selectedUOM = thisObj.changedParams[i].Value;
					if(thisObj.changedParams[i].Name == "AnalysisAggregationModes") 
						analysisAggregationModes = thisObj.changedParams[i].Value;
					if(thisObj.changedParams[i].Name == "SelectedTagCategoryIntermediates") 
						selectedTagCategoryIntermediates = thisObj.changedParams[i].Value;
					if(thisObj.changedParams[i].Name == "SelectedTagCategoryCostCalculates") 
						selectedCost = thisObj.changedParams[i].Value;
				}
			}
			if(selectedCategory != "" && selectedCategory != null && selectedCategory != undefined){

				var categoryArray = selectedCategory.toString().split(",");
				var aliasArray = selectedAlias.toString().split(",");
				var UOMArray = selectedUOM.toString().split(",");
				var AggregationModes = analysisAggregationModes.toString().split(",");
				var intermArray = selectedTagCategoryIntermediates.split(",");
				var costArray = selectedCost.split(",");
				for(var i=0 ; i < categoryArray.length ; i++){
					var uom = (UOMArray[i] == undefined || UOMArray[i] == "")? oBundle.getText("XLBL_DEFAULT_UOM_VALUE"):UOMArray[i];
					thisObj.tagSelection.push({"SelectedTagCategories" : categoryArray[i] , "SelectedTagCategoryAliases" : aliasArray[i], "SelectedTagCategoryUOMs" : uom, 
						"AnalysisAggregationModes" : AggregationModes[i], "SelectedTagCategoryIntermediates" : intermArray[i], "SelectedTagCategoryCostCalculates" : costArray[i]});
				}
			}
			thisObj.tagSelectionBackupForCancel = jQuery.extend(true, [], thisObj.tagSelection);
		//}
		return thisObj.tagSelection;
	}
	/**
	 * Function responsible to create dialog content for node selection
	 * @param valueJSON
	 * @return
	 */
	function createNodeSelectionDialogContent(oContext){
		var data = [];
		if(oContext.getProperty("propValue") != "" || oContext.getProperty("isChanged")){
			
			var defaultValue = oContext.getProperty("propValue") == null? "" :oContext.getProperty("propValue");
		}else{
			var defaultValue = oContext.getProperty("defaultPropValue");
		}
		if(defaultValue != "" && defaultValue!=undefined){
			var valueArray = defaultValue.split(",");
			for(var i= 0 ; i < valueArray.length; i++){
				data.push({"Name" :valueArray[i]});
			}
		}
		var vLayoutNodeSelection = new sap.ui.layout.VerticalLayout({width : "100%"});
		//Selected Node
		//Table
		var configurePICAnalysisParamTable = new sap.m.Table("configurePICAnalysisParamTable");
		configurePICAnalysisParamTable.setMode(sap.m.ListMode.Delete);
		configurePICAnalysisParamTable.attachDelete(function(oEvent){
				//Getting the item selected and deleting it
				var listItemID = oEvent.getParameter("listItem").getId();
				
				var index = listItemID.substring(listItemID.lastIndexOf("-")+1);

				data.splice(index,1);
				configurePICAnalysisParamTable.getModel().refresh();
		});
		//columns list item
		var parameterColumnsListItems = new sap.m.ColumnListItem({
			cells: [ new sap.m.Label({text : "{Name}"})
					]
		});
		configurePICAnalysisParamTable.addColumn(new sap.m.Column());

		var oModel = new sap.ui.model.json.JSONModel();
		oModel.setData({modelData : data});
		configurePICAnalysisParamTable.setModel(oModel);
		
		//Setting the column list items to the table's items and giving the path to get the value to render the rows
		configurePICAnalysisParamTable.bindAggregation("items", {
			path: "/modelData",
			template: parameterColumnsListItems
		});
		//Creation of the toolBar items for the table
		var tableToolbar = new sap.m.Toolbar({design : sap.m.ToolbarDesign.Transparent ,content :[
		                                                new sap.m.Title({text : com.sap.xmii.common.util.MessageBundle.getText("XLBL_SELECTED_NODE")}), 
		                                                new sap.m.ToolbarSpacer(), 
		                                                new sap.m.Button({text : com.sap.xmii.common.util.MessageBundle.getText("XBUT_ADD_NODE"),press : function(){
		                                                	showPICDialog("AvailableNodes" , true , oContext);
		                                                	
		                                                }})
		                                                ]
		});
		configurePICAnalysisParamTable.setHeaderToolbar(tableToolbar);
		vLayoutNodeSelection.addContent(configurePICAnalysisParamTable);
		
		return vLayoutNodeSelection;
	}
	
	function showPICDialog(info, isOnlyGroupNames, context) {

	    jQuery.sap.registerModulePath('CECustomControls', '/XMII/CompositionEnvironment/js/customControls');
	    jQuery.sap.require("CECustomControls.PICTreeTable");

	    //var picDialog = new sap.m.Dialog({width:"80%", verticalScrolling: false, title : oBundle.getText("XTIT_EXPRESSION_EDITOR")});

	    var picDialog = new sap.m.Dialog("showPICDialog", {
	        modal: true,
	        width: "30rem",
	        title: com.sap.xmii.common.util.MessageBundle.getText("XTLT_PIC"),
	        tooltip: com.sap.xmii.common.util.MessageBundle.getText("XTLT_PIC")
	    }).addStyleClass("sapUiSizeCompact");
	    /*	var treeLayout = new sap.m.Panel({ height:"700px",
	    		headerText: oBundle.getText("XTLT_PIC")
	    		});*/
	    var picTreeTable = new com.sap.mii.ui.PICTreeTable({
	        showActionColumn: false,
	        onlyGroup: isOnlyGroupNames
	    });
	    //treeLayout.addContent(picTreeTable);


	    var oTextView = new sap.m.Label("selectedTag");
	    var objectType;
	    var groupName;
	    var oLayout = new sap.ui.layout.VerticalLayout("Layout1", {
	        content: [picTreeTable, oTextView]
	    });
	    picTreeTable.attachSelectRow(function (event) {
	        setTagInTextView(event);
	    });

	    var applyButton = new sap.m.Button("timePeriodApplyButton", {
	        text: com.sap.xmii.common.util.MessageBundle.getText("XBUT_APPLY"),
	        enabled: false,
	        press: function () {
	            if (info == "AvailableNodes") {
	                var configurePICAnalysisParamTable = sap.ui.getCore().byId("configurePICAnalysisParamTable");
	                var nodes = configurePICAnalysisParamTable.getModel().getData().modelData;
	                for (var i = 0; i < nodes.length; i++) {
	                    if (nodes[i].Name == oTextView.getText()) {
	                        picDialog.close();
	                        return;
	                    }
	                }
	                configurePICAnalysisParamTable.getModel().getData().modelData.push({
	                    "Name": oTextView.getText()
	                });
	                configurePICAnalysisParamTable.getModel().refresh();

	            } else if (info == "PICTree") {
	                sap.ui.getCore().byId("picTreeSelected").setValue(oTextView.getText());
	                sap.ui.getCore().byId("picTreeObjectType").setValue(objectType);
	                sap.ui.getCore().byId("picTreeGroupName").setValue(groupName);
	            }
	            picDialog.close();
	        }
	    });

	    var cancelButton = new sap.m.Button("timePeriodCancelButton", {
	        text: com.sap.xmii.common.util.MessageBundle.getText("XBUT_CANCEL"),
	        press: function () {
	            picDialog.close();
	        }
	    });
	    picDialog.addContent(oLayout);
	    picDialog.addButton(applyButton);
	    picDialog.addButton(cancelButton);
	    picDialog.attachAfterClose(handleClosedPICEvent);
	    picDialog.open();

	    function handleClosedPICEvent() {
	        picDialog.detachAfterClose(handleClosedPICEvent);
	        picDialog.destroy();
	    }

	    function setTagInTextView(event) {
	        var tagNamespace = event.getParameter("Namespace");
	        oTextView.setText(tagNamespace);
	        objectType = event.getParameter("ObjectType");
	        groupName = event.getParameter("Name");
	        applyButton.setEnabled(event.getParameter("Selected"));	

	    }
	}
	/**
	 * Function responsible to create property expression content
	 * @param dialogInfo
	 * @param fieldInfo
	 * @param valueJSON
	 * @return
	 */
	function createPropertyExpressionContent(dialogInfo , fieldInfo , paramValue){
		// Creating the property expression content
		var vLayoutCategoryProperty = new sap.ui.layout.VerticalLayout({width : "100%"});
		
		var categoryPropertyHeader;
		if(dialogInfo == "ScopeDimColExpression"){
			categoryPropertyHeader = new sap.m.Toolbar({design : sap.m.ToolbarDesign.Transparent ,width : "100%",content :[ 
		                              		                                                                         new sap.m.Title({text:oBundle.getText("XLBL_KPI_DIM_SCOPE")}),
		                              		                                                                         new sap.m.ToolbarSpacer(),
		                              		                                                                         new sap.m.Button({text : oBundle.getText("XBUT_ADD_KPI_DIM") , press : function(){	                              		                                                    
		                              		                                                                        	createKPIDimScopeDialog(propertyArea,SSCEStructuralParamaters.globalPICAnalysisParam.KPIList);
		                              		                                                                         }})
		                              		                                                                         ]
	       })
		}
		else if(dialogInfo == "ScopePeColExpression"){
			categoryPropertyHeader = new sap.m.Toolbar({
				design : sap.m.ToolbarDesign.Transparent,
				width : "100%",
				content :[
					new sap.m.Title({text:oBundle.getText("XLBL_PE_COL_EXPRESSION")}),
					new sap.m.ToolbarSpacer(),
					new sap.m.Button({text : oBundle.getText("XBUT_ADD_PE_PROPERTY_NEW"),
						press : function(){
						createPEColDialog(propertyArea , thisObj.picAnalysisParam.AvailablePEName, "Scope");
						}
					})
				]
			});
		}else {
			categoryPropertyHeader = new sap.m.Toolbar({
				design : sap.m.ToolbarDesign.Transparent,
				width : "100%",content :[
					new sap.m.Title({text:oBundle.getText("XLBL_PROP_EXP")}),
					new sap.m.ToolbarSpacer(),
					new sap.m.Button({
						text : oBundle.getText("XBUT_ADD_PROPERTY"),
						press : function(){
							if(dialogInfo == "SelectedGroupByProperties")
								createDynamicValueHelpDialog(propertyArea , "AddPropertyToTable" ,  thisObj.picAnalysisParam.AvailableNodeCategory);
							else
								createDynamicValueHelpDialog(propertyArea , "AddProperty" ,  thisObj.picAnalysisParam.AvailableNodeCategory);
						}
					})
				]
			});
		}
		//Creating the propertyArea based on the dialogInfo
		if(dialogInfo == "NodeSelectionExpression"){
			var propertyArea = new sap.m.TextArea("propertyExpArea",{ value : paramValue, width : "100%",rows : 6});
			
		}else if(dialogInfo == "ScopePropertyExpression" || dialogInfo == "ScopePeColExpression" || dialogInfo == "ScopeDimColExpression"){
			var propertyArea = new sap.m.TextArea("propertyExpArea",{ value : paramValue, width : "100%",rows : 6});
		}else if(dialogInfo == "SelectedGroupByProperties"){
			var data = [];
			if(paramValue !=""){
				var paramArray = paramValue.split(",");
				for(var i = 0 ; i < paramArray.length;i++){
					data.push({"Name":paramArray[i]});
				}
			}
			var propertyArea = new sap.m.Table("propertyTable");
			propertyArea.setMode(sap.m.ListMode.Delete);
			propertyArea.attachDelete(function(oEvent){
				//Getting the item selected and deleting it from valueJSON
				var listItemID = oEvent.getParameter("listItem").getId();

				var index = listItemID.substring(listItemID.lastIndexOf("-")+1);
				//check if is special shift item
				var shiftCheckBox = sap.ui.getCore().byId("shiftCheckBox");
				if ((data[index].Name == oBundle.getText("XLI_AWS_ITEM")) && (shiftCheckBox.getChecked())) {				
					shiftCheckBox.setChecked(false);
				}
				data.splice(index,1);
				propertyArea.getModel().refresh();
			});
			var parameterColumnsListItems = new sap.m.ColumnListItem({
				cells: [ new sap.m.Label({text : "{Name}"})
						]
			});
			
			propertyArea.addColumn(new sap.m.Column());
			
			var oModel = new sap.ui.model.json.JSONModel();
			oModel.setData({modelData :data});
			propertyArea.setModel(oModel);
			
			//Setting the column list items to the table's items and giving the path to get the value to render the rows
			propertyArea.bindAggregation("items", {
				path: "/modelData",
				template: parameterColumnsListItems
			});
			
			var addPePropsBtn = new sap.m.Button({text : oBundle.getText("XBUT_ADD_PE_PROPERTY_NEW") , press : function(){
				createPEColDialog(propertyArea , thisObj.picAnalysisParam.AvailablePEName, "GroupBy");
			}});
			categoryPropertyHeader.addContent(addPePropsBtn);

			getKPIDimFromServer(thisObj);
			var addKpiDimBtn = new sap.m.Button({
				text: oBundle.getText("XBUT_KPI_DIM"),
				press: function(){
					createKpiDimDialog(propertyArea);
				}
			});
			categoryPropertyHeader.addContent(addKpiDimBtn);

			//checkbox for shift groupby
			var shiftLabel = new sap.m.Label({
				text : "Shift",
				tooltip : "Shift",
			});

			var shiftBox = new sap.ui.commons.CheckBox({
				id : "shiftCheckBox",
				checked : "{/Config/duration/shiftDisplay}",
				change : function (oEvent) {
					var isChecked = oEvent.mParameters.checked;
					var modelData = propertyArea.getModel().getData().modelData;
					if (isChecked) {						
						modelData.push({"Name" :oBundle.getText("XLI_AWS_ITEM")});
					} else {
						for(var i = 0 ; i < modelData.length ; i++){
							if(modelData[i].Name == oBundle.getText("XLI_AWS_ITEM"))
							{
								indexOfItem = i;
								break;
							}
						}
						if(indexOfItem != -1){ 
							modelData.splice(indexOfItem, 1 );
						}
					}
					
					propertyArea.getModel().refresh();
				}
			});

			categoryPropertyHeader.addContent(shiftLabel);
			categoryPropertyHeader.addContent(shiftBox);
		}



		vLayoutCategoryProperty.addContent(categoryPropertyHeader);
		vLayoutCategoryProperty.addContent(propertyArea);
		
		//Based on the fieldInfo, following button will be shown
		if(fieldInfo){
			var hLayoutButtons = new sap.ui.layout.HorizontalLayout();

			var equalToButton = new sap.m.Button({text : "=", press : function(){
				onClickOfPropertyExpButton("=");
			}}).addStyleClass("controlPaddingRightStyle");
			hLayoutButtons.addContent(equalToButton);

			var lessThanEqualButton = new sap.m.Button({text :"<=", press : function(){
				onClickOfPropertyExpButton("<=");
			}}).addStyleClass("controlPaddingRightStyle");
			hLayoutButtons.addContent(lessThanEqualButton);

			var lessThanButton = new sap.m.Button({text:"<", press : function(){
				onClickOfPropertyExpButton("<");
			}}).addStyleClass("controlPaddingRightStyle");
			hLayoutButtons.addContent(lessThanButton);

			var greaterThanButton = new sap.m.Button({text:">", press : function(){
				onClickOfPropertyExpButton(">");
			}}).addStyleClass("controlPaddingRightStyle");
			hLayoutButtons.addContent(greaterThanButton);

			var greaterThanEqualButton = new sap.m.Button({text:">=", press : function(){
				onClickOfPropertyExpButton(">=");
			}}).addStyleClass("controlPaddingRightStyle");
			hLayoutButtons.addContent(greaterThanEqualButton);

			var notEqualToButton = new sap.m.Button({text:"<>", press : function(){
				onClickOfPropertyExpButton("<>");
			}}).addStyleClass("controlPaddingRightStyle");
			hLayoutButtons.addContent(notEqualToButton);

			var ANDButton = new sap.m.Button({text:"AND", press : function(){
				onClickOfPropertyExpButton("AND");
			}}).addStyleClass("controlPaddingRightStyle");
			hLayoutButtons.addContent(ANDButton);

			var ORButton = new sap.m.Button({text:"OR", press : function(){
				onClickOfPropertyExpButton("OR");
			}}).addStyleClass("controlPaddingRightStyle");
			hLayoutButtons.addContent(ORButton);

			var NOTButton = new sap.m.Button({text:"NOT", press : function(){
				onClickOfPropertyExpButton("NOT");
			}}).addStyleClass("controlPaddingRightStyle");
			hLayoutButtons.addContent(NOTButton);

			var LIKEButton = new sap.m.Button({text:"LIKE", press : function(){
				onClickOfPropertyExpButton("LIKE");
			}}).addStyleClass("controlPaddingRightStyle");
			hLayoutButtons.addContent(LIKEButton);

			var openBraceButton = new sap.m.Button({text:"(", press : function(){
				onClickOfPropertyExpButton("(");
			}}).addStyleClass("controlPaddingRightStyle");
			hLayoutButtons.addContent(openBraceButton);

			var closeBraceButton = new sap.m.Button({text:")", press : function(){
				onClickOfPropertyExpButton(")");
			}});
			hLayoutButtons.addContent(closeBraceButton);
			vLayoutCategoryProperty.addContent(hLayoutButtons);
		}
		return vLayoutCategoryProperty;
	}
	

	/**
	 * Function is responsible to add PE part for Selectd Group by properties.
	 * @param parameterField, valueJSON
	 * @return
	 */
	function createPEColDialog(parameterField, valueJSON, type){
		//Creation of dialog
		var valueHelpDialog = new sap.m.Dialog();
		//Attach after close function
		valueHelpDialog.attachAfterClose(function(){
			valueHelpDialog.destroyContent();
			valueHelpDialog.destroyButtons();
		}, valueHelpDialog);
		valueHelpDialog.setTitle(oBundle.getText("XLBL_PE_PROPERTY"));
		
		var oLabelType = new sap.m.Label({
			text : oBundle.getText("XLBL_PE_NAME") + ":	",
			design: "Bold"
		});
		
		var dropdownContent = new sap.m.Select({tooltip:oBundle.getText("XLBL_PE_NAME"),
			width: "150px",
			change : function(oEvent){
				var selected = dropdownContent.getSelectedKey().trim();
				var jsonModel = new sap.ui.model.json.JSONModel();
				jsonModel.setData({modelData : SSCEStructuralParamaters.globalPEColsMap[selected]});
				contentList.setModel(jsonModel);
		}
		});
		
		var contentList = new sap.m.List({width :"100%",
			columns :[ new sap.m.Column({ header : new sap.m.Label({text : oBundle.getText("XLBL_PE_NAME")}),width :"40%"}) ,
			           new sap.m.Column({ header : new sap.m.Label({text : oBundle.getText("XLBL_PE_COLUMN_NAME")}),width :"40%"})
			]});
		var listTemplate = new sap.m.ColumnListItem({
			cells: [ new sap.m.Label({text : "{PeInfoName}"}),
			         new sap.m.Label({text : "{PeCol}"})
					]
		});
		
		
		contentList.setMode(sap.m.ListMode.MultiSelect);
		
		
		//Setting the column list items to the table's items and giving the path to get the value to render the rows
		contentList.bindAggregation("items", {
			path: "/modelData",
			template : listTemplate
		});

		if(!isArrayEmpty(valueJSON)){
			for(var p = 0; p < valueJSON.length; p++){
				var oItem = new sap.ui.core.ListItem();
				oItem.setText(valueJSON[p].PeInfoName);
				oItem.setKey(valueJSON[p].PeInfoName);
				dropdownContent.addItem(oItem);
			}
			var jsonModel = new sap.ui.model.json.JSONModel();
			jsonModel.setData({modelData : SSCEStructuralParamaters.globalPEColsMap[valueJSON[0].PeInfoName]});
			contentList.setModel(jsonModel);
		};
		
		contentList.attachSelectionChange(function(oEvent){
			var tp = "ScopePeColExpression";
			if(parameterField == "ScopePeColExpression"){
				tp = "SelectedGroupByProperties"
			}
			if(isArrayNotEmpty(contentList.getSelectedContexts()) || hasPeCols || global_peInfoName[tp] != ""){
				dropdownContent.setEnabled(false);
			}else{
				dropdownContent.setEnabled(true);
			}
		});	
		
		//Make the selected PE Columns checked in the grid;
		var hasPeCols = false;
		if(type == "GroupBy"){
			if(parameterField.getItems() != ""){
				var valueArray = parameterField.getItems();
				var index = 0;
				for(var i = 0 ; i < valueArray.length ; i++){
					if(valueArray[i].getCells()[0].getText().indexOf("[PE]") == 0){
						hasPeCols = true;
						if(index == 0){
							var cols = valueArray[i].getCells()[0].getText().substr(4).split(".");
							dropdownContent.setSelectedKey(cols[0]);
							var jsonModel = new sap.ui.model.json.JSONModel();
							jsonModel.setData({modelData : SSCEStructuralParamaters.globalPEColsMap[cols[0]]});
							contentList.setModel(jsonModel);
							dropdownContent.setEnabled(false);
							index++;
						}
						var modelData = contentList.getModel().getData().modelData;
						for(var j = 0 ; j < modelData.length ; j++){
							var absolutePropertyName = "[PE]" +  modelData[j].PeInfoName + "." +  modelData[j].PeCol;
							if(absolutePropertyName == valueArray[i].getCells()[0].getText()){
								contentList.setSelectedItem(contentList.getItems()[j]);
							}
						}
					}
				}
			}
			if(!hasPeCols){
				checkSelectedPEInfoName("ScopePeColExpression", dropdownContent, contentList);
			}
		}else{
			if(parameterField.getValue() != ""){
				var value = parameterField.getValue();
				if(value.indexOf("\"[PE]") != -1){
					var str = value.split("\"");
					if(str.length > 0){
						for(var i in str){
							if(str[i].trim().indexOf("[PE]") === 0){
								hasPeCols = true;
								var peCol = str[i].substr(4).split(".");
								if(peCol.length > 1){
									dropdownContent.setSelectedKey(peCol[0]);
									dropdownContent.setEnabled(false);
									var jsonModel = new sap.ui.model.json.JSONModel();
									jsonModel.setData({modelData : SSCEStructuralParamaters.globalPEColsMap[peCol[0]]});
									contentList.setModel(jsonModel);
									dropdownContent.setEnabled(false);
									break;
								}
							}
						}
					}
				}
			}
			if(!hasPeCols){
				checkSelectedPEInfoName("SelectedGroupByProperties", dropdownContent, contentList);
			}
		}
		
		
		valueHelpDialog.addContent(oLabelType);
		valueHelpDialog.addContent(dropdownContent);
		valueHelpDialog.addContent(contentList);
		//opening the dialog
		valueHelpDialog.open();
		//Creation of OK button
		valueHelpDialog.addButton(new sap.m.Button({id:"okButton",text: oBundle.getText("XBUT_OK"),press  : function(){
			var valueForParamField = ""; 
			if(isArrayNotEmpty(contentList.getSelectedContexts())){
				var valueForParamField = "";
				for(var i = 0 ; i < contentList.getSelectedContexts().length ;i++){
					//Getting the item selected
					var path = contentList.getSelectedContexts()[i].getPath();
					var index = path.substring(path.lastIndexOf("/")+1);
					
					//Getting the model data from the index
					var modelData = contentList.getSelectedContexts()[i].getModel().getData().modelData[index];
					if(type == "GroupBy"){
						var valueName =  "[PE]"+modelData.PeInfoName + "."+modelData.PeCol;
						var modelData = parameterField.getModel().getData().modelData;
						
						var arr = $.grep(modelData,function(obj){
							if(obj.Name ===  valueName){
								return obj;
							}
						});
						if(!isArrayNotEmpty(arr)){
							modelData.push({"Name" :valueName});
						}
					}else{
						var valueName = "\"[PE]"+modelData.PeInfoName + "."+modelData.PeCol +"\"";
						valueForParamField = valueForParamField + (valueForParamField == "" ? valueName : " "+ valueName);
					}
				}
				if(type == "GroupBy"){
					parameterField.getModel().refresh();
				}else{
					parameterField.setValue(parameterField.getValue() + valueForParamField);
					parameterField.fireChange();
				}
			}	
			valueHelpDialog.close();
		}}));
		
		//Creation of CANCEL button
		valueHelpDialog.addButton(new sap.m.Button({text: oBundle.getText("XBUT_CANCEL"),press  : function(){
			valueHelpDialog.close();
		}}));
	}
	
	/**
	 * Function is responsible to add the "buttonExp" at the cursor position of the propertyExpArea
	 * @param buttonExps
	 * @return
	 */
	function onClickOfPropertyExpButton(buttonExp){
		
		var propertyTextArea = sap.ui.getCore().byId("propertyExpArea");
		propertyTextArea.focus();
		
		//Getting the focus info
		var selectionStart = propertyTextArea.getFocusInfo().selectionStart;
		var selectionEnd = propertyTextArea.getFocusInfo().selectionEnd;
		//Get the values before selection start and after the selection end
	    var begin = (propertyTextArea.getValue()).substring(0, selectionStart);
	    var end = (propertyTextArea.getValue()).substring( selectionEnd , propertyTextArea.getValue().length);
	    
	    propertyTextArea.setValue(begin + buttonExp + end);
	}
	/**
	 * This function would check if the array is not undefined, null and length is greater than 0
	 * @param array
	 * @return
	 */
	function isArrayNotEmpty(array) {
	    if (array !== undefined && array != null && array.length > 0)
	        return true;

	    return false;
	}
	/**
	 * This function would check if the array is undefined, null or empty
	 * @param array
	 * @return
	 */
	function isArrayEmpty(array) {
	    if (array === undefined || array == null || array.length == 0)
	        return true;

	    return false;
	}
	/**
	 * Function is responsible to create the value help dialog 
	 * @param parameterField
	 * @param type
	 * @param valueJSON
	 * @return
	 */
	function createDynamicValueHelpDialog(parameterField,type ,valueJSON){
	//Creation of dialog
	var valueHelpDialog = new sap.m.Dialog();
	//Attach after close function
	valueHelpDialog.attachAfterClose(function(){
		valueHelpDialog.destroyContent();
		valueHelpDialog.destroyButtons();
	}, valueHelpDialog);
	
	//Creation of list and its template based on the type
	if(type == "AddProperty" || type == "AddPropertyToTable"){
		
		var contentList = new sap.m.List({width :"100%",
			columns :[ new sap.m.Column({ header : new sap.m.Label({text : oBundle.getText("XLBL_CATEGORY")}),width :"40%"}) ,
			           new sap.m.Column({ header : new sap.m.Label({text : oBundle.getText("XLBL_PROPERTY_SET")}),width :"40%"}),
			           new sap.m.Column({ header : new sap.m.Label({text : oBundle.getText("XLBL_PROPERTY")}),width :"40%"}),
			]});
		var listTemplate = new sap.m.ColumnListItem({
			cells: [ new sap.m.Label({text : "{Name}"}),
			         new sap.m.Label({text : "{PropertySets}"}),
			         new sap.m.Label({text : "{Property}"})
					]
		});
		
		//Facet filter (Issue : 1570788582)
		var oCategoryModel = new sap.ui.model.json.JSONModel();
		var oPropertySetsModel = new sap.ui.model.json.JSONModel();
		var oPropertyModel = new sap.ui.model.json.JSONModel();
		
		var oCategoryJSON = [];
		var oPropertySetsJSON = [];
		var oPropertyJSON = [];
		
		var oCategoryFFL = new sap.m.FacetFilterList ({
			title : "Name",
			listOpen : categoryhandleListOpen,
			listClose : handleListClose
			});
		
		var oPropertySetsFFL = new sap.m.FacetFilterList ({
			title : "PropertySets",
			listOpen : propertySetshandleListOpen,
			listClose : handleListClose
			});

		var oPropertyFFL = new sap.m.FacetFilterList ({
			title : "Property",
			listOpen : propertyhandleListOpen,
			listClose : handleListClose
			});
		
		var oFF = new sap.m.FacetFilter ({lists : [oCategoryFFL, oPropertySetsFFL, oPropertyFFL],
			reset : handleReset
			});
		oFF.setShowPopoverOKButton(true);

	}else{
		var contentList = new sap.m.List({width :"100%",
			columns :[ new sap.m.Column({ width :"40%"}) 
			]});
		var listTemplate = new sap.m.ColumnListItem({
			cells: [ new sap.m.Label({text : "{Name}"})]
		});
	}

	function categoryhandleListOpen(oEvent){
		
		var oList = oEvent.getSource();
		var oItems = oList.getAggregation("items");
		var temp_array = []; //Temporary array to hold unique text values
		var text_array = []; //Holds text values of a Facet Filter List
		
		for(var i = 0; i<oItems.length; i++) {
			text_array[i] = oItems[i].getText();
		}
		
		$.each(text_array, function(index , value) {
		  if ($.inArray( value ,temp_array) === -1) {
		       temp_array.push(value);
		       oCategoryJSON.push({"text" : value});
		   }
		});
		
		if(oCategoryModel.getData().length == undefined) {
			oCategoryModel.setData(oCategoryJSON);
			this.bindAggregation("items", {
				path: "/",
				template: new sap.m.FacetFilterItem({
					text: "{text}"
			})
		});	
		oCategoryFFL.setModel(oCategoryModel);	
		}
		
	}
	
	function propertySetshandleListOpen(oEvent){
		
		var oList = oEvent.getSource();
		var oItems = oList.getAggregation("items");
		var temp_array = []; //Temporary array to hold unique text values
		var text_array = []; //Holds text values of a Facet Filter List
				
		for(var i = 0; i<oItems.length; i++) {
			text_array[i] = oItems[i].getText();
		}
		
		$.each(text_array, function(index , value) {
		       if ($.inArray( value ,temp_array) === -1) {
		          temp_array.push(value);
		          oPropertySetsJSON.push({"text" : value});
		       }
		       
	});
		if(oPropertySetsModel.getData().length == undefined) {
			oPropertySetsModel.setData(oPropertySetsJSON);
			this.bindAggregation("items", {
				path: "/",
				template: new sap.m.FacetFilterItem({
					text: "{text}"
			})
		});	
		oPropertySetsFFL.setModel(oPropertySetsModel);
		}
		
	}
	
	function propertyhandleListOpen(oEvent){

		var oList = oEvent.getSource();
		var oItems = oList.getAggregation("items");
		var temp_array = []; //Temporary array to hold unique text values
		var text_array = []; //Holds text values of a Facet Filter List
		
		for(var i = 0; i<oItems.length; i++) {
			text_array[i] = oItems[i].getText();
		}
		
		$.each(text_array, function(index , value) {
		       if ($.inArray( value ,temp_array) === -1) {
		          temp_array.push(value);
		          oPropertyJSON.push({"text" : value});
		       }
		       
	});
		if(oPropertyModel.getData().length == undefined) {
			oPropertyModel.setData(oPropertyJSON);
			this.bindAggregation("items", {
				path: "/",
				template: new sap.m.FacetFilterItem({
					text: "{text}"
			})		
		});	
		oPropertyFFL.setModel(oPropertyModel);
		}
		
	}

	function handleListClose(oEvent) {
		
		var oFacetFilter = oEvent.getSource().getParent();
		
		var oFacetFilterLists = oFacetFilter.getLists().filter(function(oList) {
			
			if(oList.getSelectedItems().length != 0)
				return oList.getActive() && oList.getSelectedItems().length;
			else
				return oList.getActive() && oList.getItems().length;
			
		});
		
		var oFilter = new sap.ui.model.Filter(oFacetFilterLists.map(function(oList) {
			
			if (oList.getSelectedItems().length != 0) {
			return new sap.ui.model.Filter(oList.getSelectedItems().map(function(oItem) {
				return new sap.ui.model.Filter(oList.getTitle(), "EQ", oItem.getText());
			}), false);
			}
			else {
				return new sap.ui.model.Filter(oList.getItems().map(function(oItem) {
					return new sap.ui.model.Filter(oList.getTitle(), "EQ", oItem.getText());
				}), false);
			}
		}), true);

		applyFilter(oFilter);
		
	}
	
	function handleReset(oEvent) {
		
		var oFacetFilter = sap.ui.getCore().byId(oEvent.getParameter("id"));
		var oFacetFilterLists = oFacetFilter.getLists();
		for(var i=0; i < oFacetFilterLists.length; i++) {
			for(var i=0; i < oFacetFilterLists.length; i++) {
				oFacetFilterLists[i].setSelectedKeys();
			}
		}
		applyFilter([]);	
		
	}
	
	function applyFilter(oFilter) {
		
		contentList.getBinding("items").filter(oFilter);
		
	}
	
	if(type == "UOM"){
		contentList.setMode(sap.m.ListMode.SingleSelectMaster);
	}else if (type == "AddProperty" || type == "AddPropertyToTable" || type == "AvailableTagCategory"){
		contentList.setMode(sap.m.ListMode.MultiSelect);
	}
	
	if(type == "UOM")
		valueHelpDialog.setTitle(oBundle.getText("XLBL_UNIT_OF_MEASUREMENT"));
	else if(type == "AvailableTagCategory")
		valueHelpDialog.setTitle(oBundle.getText("XLBL_TAG_CATEGORY"));
	
	var jsonModel = new sap.ui.model.json.JSONModel();
	jsonModel.setData({modelData : valueJSON});
	contentList.setModel(jsonModel);
	//Setting the column list items to the table's items and giving the path to get the value to render the rows
	contentList.bindAggregation("items", {
		path: "/modelData",
		template : listTemplate
	});
	
	if(type == "AddProperty" || type == "AddPropertyToTable"){
		oCategoryFFL.bindAggregation("items", {
			path : "/modelData",
			template : new sap.m.FacetFilterItem({
				text : "{Name}"
			})
		});
		oCategoryFFL.setModel(jsonModel);
		oPropertySetsFFL.bindAggregation("items", {
			path : "/modelData",
			template : new sap.m.FacetFilterItem({
				text : "{PropertySets}"
			})
		});
		oPropertySetsFFL.setModel(jsonModel);
		oPropertyFFL.bindAggregation("items", {
			path : "/modelData",
			template : new sap.m.FacetFilterItem({
				text : "{Property}"
			})
		});
		oPropertyFFL.setModel(jsonModel);
	}
	
	//if the parameter Field has value, set that items in content list selected
	
	if(type == "UOM"){
		if(parameterField.getValue() != ""){
			var indexOfItem = -1;
			var modelData = contentList.getModel().getData().modelData;
			for(var i = 0 ; i < modelData.length ; i++){
				if(modelData[i].Name == parameterField.getValue()){
					indexOfItem = i;
					break;
				}
			}
			if(indexOfItem != -1){
				var itemToBeSelected = contentList.getItems()[i];
				contentList.setSelectedItem(itemToBeSelected);
			}
		}
	}else if(type == "AddPropertyToTable"){
		if(parameterField.getItems() != ""){
			var modelData = contentList.getModel().getData().modelData;
			var valueArray = parameterField.getItems();
			for(var i = 0 ; i < valueArray.length ; i++){
				for(var j = 0 ; j < modelData.length ; j++){
					var absolutePropertyName = modelData[j].Name + "." +  modelData[j].PropertySets + "." +  modelData[j].Property;
					if(absolutePropertyName == valueArray[i].getCells()[0].getText()){
						contentList.setSelectedItem(contentList.getItems()[j]);
					}
				}
			}
		}
	}else if(type == "AvailableTagCategory"){
		if(parameterField.getItems() != ""){
			var modelData = contentList.getModel().getData().modelData;
			var valueArray = parameterField.getModel().getData().modelData;
			for(var i = 0 ; i < valueArray.length ; i++){
				for(var j = 0 ; j < modelData.length ; j++){
					var absolutePropertyName = modelData[j].Name;
					if(absolutePropertyName == valueArray[i].SelectedTagCategories){
						contentList.setSelectedItem(contentList.getItems()[j]);
					}
				}
			}
		}
	}
	
	//Adding the content
	valueHelpDialog.addContent(oFF);
	valueHelpDialog.addContent(contentList);

	//opening the dialog
	valueHelpDialog.open();
	//Creation of OK button
	valueHelpDialog.addButton(new sap.m.Button({id:"okButton",text: oBundle.getText("XBUT_OK"),press  : function(){
		var valueForParamField = ""; 
		if(isArrayNotEmpty(contentList.getSelectedContexts())){
			for(var i = 0 ; i < contentList.getSelectedContexts().length ;i++){
				//Getting the item selected
				var path = contentList.getSelectedContexts()[i].getPath();
				var index = path.substring(path.lastIndexOf("/")+1);
				
				//Getting the model data from the index
				var modelData = contentList.getSelectedContexts()[i].getModel().getData().modelData[index];
				
				if(type == "AddProperty"){
					var valueName = "\"" + modelData.Name + "."+modelData.PropertySets +"." +modelData.Property +"\"";
					valueForParamField = valueForParamField + (valueForParamField == "" ? valueName : " "+ valueName);
					
				}else if(type == "AddPropertyToTable"){
					var valueName =  modelData.Name + "."+modelData.PropertySets +"." +modelData.Property ;
					var modelData = parameterField.getModel().getData().modelData;
					
					var arr = $.grep(modelData,function(obj){
						if(obj.Name ===  valueName){
							return obj;
						}
					});
					if(!isArrayNotEmpty(arr)){
						modelData.push({"Name" :valueName});
					}
					
				}else if(type == "AvailableTagCategory"){
					var valueName =  modelData.Name;
					var modelData = parameterField.getModel().getData().modelData;
					
					var arr = $.grep(modelData,function(obj){
						if(obj.SelectedTagCategories ===  valueName){
							return obj;
						}
					});
					if(!isArrayNotEmpty(arr)){
						modelData.push({"SelectedTagCategories" :valueName, "SelectedTagCategoryUOMs" :oBundle.getText("XLBL_DEFAULT_UOM_VALUE"), 
							"SelectedTagCategoryAliases" :valueName, "SelectedTagCategoryIntermediates" :false, "AnalysisAggregationModes":"SUM", "SelectedTagCategoryCostCalculates" : false});	
					}
				}else{
					valueForParamField = valueForParamField + (valueForParamField == "" ? modelData.Name : ","+modelData.Name);
				}
			}
			//Setting the value back to the input field
			if(type == "AddProperty"){
				parameterField.setValue(parameterField.getValue() + valueForParamField);
				parameterField.fireChange();
			}else if(type == "AddPropertyToTable" || type == "AvailableTagCategory"){
				parameterField.getModel().refresh();
			}else{
				parameterField.setValue(valueForParamField);
				parameterField.fireChange();
			}
		}
		valueHelpDialog.close();
	}}));
	//Creation of CANCEL button
	valueHelpDialog.addButton(new sap.m.Button({text: com.sap.xmii.common.util.MessageBundle.getText("XBUT_CANCEL"),press  : function(){
		valueHelpDialog.close();
	}}));

}

	function resetDataForCancel(type) {
		if(type == "DataSeries")
			thisObj.dataSeriesDetails = jQuery.extend(true, [], thisObj.dataSeriesDetailsBackupForCancel);
		else if(type == "PenType")
			thisObj.penTypes = jQuery.extend(true, [], thisObj.penTypesBackupForCancel);
		else if(type == "ColorIndicator")
			thisObj.colorIndicators = jQuery.extend(true, [], thisObj.colorIndicatorsBackupForCancel);
		else if(type == "ColorContext")
			thisObj.colorContexts = jQuery.extend(true, [], thisObj.colorContextsBackupForCancel);
		else if(type == "DisplayColumns")
			thisObj.displayColumns = jQuery.extend(true, [], thisObj.displayColumnsBackupForCancel);
		else if(type == "TagSelection")
			thisObj.tagSelection = jQuery.extend(true, [], thisObj.tagSelectionBackupForCancel);
		else if(type == "SelectedTags")
			thisObj.selectedTags = jQuery.extend(true, [], thisObj.selectedTagsBackupForCancel);
	}
	
	/**
	 * Creation of Row JSON for color Indicator
	 * @param oContext
	 * @return colorIndicatorJSONRowsArray
	 */
	function createJSONForColorIndicator(oContext) {
		//Creation of Rows array 
		
		if(thisObj.colorIndicators == null || thisObj.colorIndicators == undefined || thisObj.colorIndicators.length == 0) {
			thisObj.colorIndicators = [];
			//Getting the Default value or Value
			if(oContext.getProperty("propValue") == "") {
				var colorIndicatoDefaultValue = oContext.getProperty("defaultPropValue");
			} else {
				var colorIndicatoDefaultValue = oContext.getProperty("propValue");
			}
			//Checking for the colorIndicatoDefaultValue is empty or not
			if(colorIndicatoDefaultValue != null && colorIndicatoDefaultValue != undefined){
				//Splitting string into array
				var defaultValueArray = colorIndicatoDefaultValue.split("_");
				//Looping through the array to get From,To and Color value and push it to colorIndicatorJSONRowsArray
				for(var index = 0 ; index < defaultValueArray.length ; index++){
					var itemArray = defaultValueArray[index].split(",");
					var  Rows ={"From" : itemArray[1], "To" :  itemArray[2] ,"Color" :itemArray[3]};
					if(Rows.Color == undefined)
						Rows.Color = "#000000";
					thisObj.colorIndicators.push(Rows);
				}
			}
			thisObj.colorIndicatorsBackupForCancel = jQuery.extend(true, [], thisObj.colorIndicators);
		}

		return thisObj.colorIndicators;
	}
	/**
	 * Function to create the JSON for configure Pen type dialog
	 * @param oContext
	 * @return
	 */
	function createJSONForPenType(oContext){
		//try to get penTypes from model, if not present then follow the steps mentioned below
		//get value columns from model, split by "," and fetch that many no of penTypes as the no of value columns (set Checked as false).
		//If penTypes are present in model, return the same.
		//
		//penTypes data should be in the format mentioned below
		//When the value from drop down is changed, Checked is set to true and only then it should be applied when user clicks on apply button
		
		/*[ {Checked: "true", Type: "Bar", ValueColumns: "Profit", index: "0"}, 
			{Checked: "true", Type: "Bar", ValueColumns: "Revenue", index: "1"}, 
			{Checked: "true", Type: "Bar", ValueColumns: "Year", index: "2"}] */
		if(thisObj.penTypes == null || thisObj.penTypes == undefined || thisObj.penTypes.length == 0) {
			thisObj.penTypes = [];
			var valueColumnsArray = thisObj.getChartTemplateObject().getProperty("ValueColumns").split(',');
			for(var i=0; i<valueColumnsArray.length; i++) {
				thisObj.penTypes.push({Checked : "false", 
					Type : thisObj.getChartTemplateObject().chartConfig["PenType." + (i+1)],
					ValueColumns : valueColumnsArray[i],
					index: i}
				);
			}
		} 
		thisObj.penTypesBackupForCancel = jQuery.extend(true, [], thisObj.penTypes);
		return thisObj.penTypes;
	}
	/**
	 * Function to create JSON for the Data Series dialog
	 * @param oContext
	 * @return
	 */
	function createJSONForDataSeries(oContext){
		
		//try to get dataSeriesDetails from model, if not present then follow the steps mentioned below
		//get PenMarkerStyle, PenColor, LineStyle, LineThickness, PenType & ViolationMarkerColor for 32 pen,
		//build the dataSeriesDetails and put it in  thisObj for later use.
		//If dataSeriesDetails are present in model, return the same.
		//
		//dataSeriesDetails data should be in the format mentioned below
		//When the value from drop down is changed, Checked is set to true and only then it should be applied when user clicks on apply button
		
		/*[ {Checked: "true", Color: "#3333FF", LineStyle: "Dashed", LineThickness: "5.0", MarkerStyle: "2 (Circle)", 
		 * PenType: "Bar", ViolationColor: "#FF0000", index: "1"}] */
		
		if(thisObj.dataSeriesDetails == null || thisObj.dataSeriesDetails == undefined || thisObj.dataSeriesDetails.length == 0) {
			thisObj.dataSeriesDetails = [];
			var markerStyle, lineStyle, dataSeriesIndex;
			for(var i=0; i<32; i++) {
				dataSeriesIndex = i + 1;
				markerStyle = com.sap.xmii.common.util.MARKER_STYLE[thisObj.getChartTemplateObject().getProperty("PenMarkerStyle." + dataSeriesIndex)];
				lineStyle = com.sap.xmii.common.util.LINE_STYLES[thisObj.getChartTemplateObject().getProperty("LineStyle." + dataSeriesIndex)];
				thisObj.dataSeriesDetails.push({
					Checked : "false",
					Color: thisObj.getChartTemplateObject().getProperty("PenColor." + dataSeriesIndex),
					LineStyle: lineStyle,
					LineThickness: thisObj.getChartTemplateObject().getProperty("LineThickness." + dataSeriesIndex),
					MarkerStyle: markerStyle,
					PenType: thisObj.getChartTemplateObject().getProperty("PenType." + dataSeriesIndex),
					ViolationColor: thisObj.getChartTemplateObject().getProperty("ViolationMarkerColor." + dataSeriesIndex),
					index: dataSeriesIndex
				});
			}
		} 
		
		thisObj.dataSeriesDetailsBackupForCancel = jQuery.extend(true, [], thisObj.dataSeriesDetails);
		return thisObj.dataSeriesDetails;
	}

	/**
	 * Function to create the JSON for color Context
	 * @param defaultValueJSON
	 * @param oContext
	 * @return
	 */
	function createJSONForColorContext(oContext){
		if(thisObj.colorContexts == null || thisObj.colorContexts == undefined || thisObj.colorContexts.length == 0) {
			thisObj.colorContexts = [];
			var matchValues,matchIcons,matchColors;
			
			matchIcons = thisObj.getGridObject().getMatchIcons();
			matchColors = thisObj.getGridObject().getMatchColors();
			matchValues = thisObj.getGridObject().getMatchValues();
			
			if((matchColors != "" && matchColors != "null") || (matchIcons != "" && matchIcons != "null")){
				var iconArray = matchIcons.split(",");
				var colorArray = matchColors.split(",");
				for(var i=0; i < iconArray.length ;i++){
					thisObj.colorContexts.push({"MatchIcons": iconArray[i].substring(iconArray[i].indexOf("/CM/")+1), "MatchColors" :colorArray[i]});
				}
			}
			if(matchValues != "" && matchValues != "null"  ){
				var valueArray = matchValues.split(";");
				var columnsArray = thisObj.getGridObject().getMatchColumns().split(",");
				for(var k = 0 ; k < valueArray.length - 1 ; k++){
					var matchValuesArray = valueArray[k].split(",");
					for(var j =0; j < columnsArray.length ;j++)
						thisObj.colorContexts[k][columnsArray[j]] = matchValuesArray[j];
				}
			}
		}
		thisObj.colorContextsBackupForCancel = jQuery.extend(true, [], thisObj.colorContexts);
		return thisObj.colorContexts;
	}
	
	/**
	 * Function to add the edit column when user clicks on the lite buttons
	 * @param defaultValueJSON
	 * @param id
	 * @return
	 */
	function openEditColorContextDialog(defaultValueJSON, control){
		//Getting the text of the control to get the match mode,string match type and value
		var assignedContextValue = control.getText();
		var assignedContextValueArray = assignedContextValue.split(":");
		//Match mode
		var matchModeValue = assignedContextValueArray[0];
		//in Regex, ExactMatch is implicit
		if(matchModeValue == "Regex") {
			//String Match Type 
			var stringMatchTypeValue = "exact match";
			//Value
			var contextValue = assignedContextValueArray[1];
		} else {
			//String Match Type 
			var stringMatchTypeValue = assignedContextValueArray[1].toLowerCase().replace("_"," ");
			//Value
			var contextValue = assignedContextValueArray[2];
		}
		
		//Creation of dialog
		var editColorContextDialog = new sap.m.Dialog({title :com.sap.xmii.common.util.MessageBundle.getText("XLBL_CONTEXT_VALUE")});
		//Attaching the after close  
		editColorContextDialog.attachAfterClose(function(){
			this.destroyContent();
			this.destroyButtons();
			this.destroy();
		},editColorContextDialog);
		
		//Creation of Vertical Layout to keep all the content
		var editColorContextVLayout = new sap.ui.layout.VerticalLayout();

		//Creation of Horizontal layout to hold the match mode
		var matchModeHLayout = new sap.ui.layout.HorizontalLayout();
		
		//Creation of Match mode Label
		var matchModeLabel = new sap.m.Label({text:com.sap.xmii.common.util.MessageBundle.getText("XLBL_MATCH_MODE"),width : "120px"}).addStyleClass("colorContext");
		//Creation of MatchMode Select
		var matchModeSelect = new sap.m.Select("matchMode").addStyleClass("colorContextForSelect");
		//Adding the items to it.
		var matchMode = com.sap.xmii.common.util.MATCH_MODE;
		//Looping through the match mode to add item
		for(var i = 0; i < matchMode.length ;i++) {
			var oItem = new sap.ui.core.ListItem();
			oItem.setText(matchMode[i]);
			oItem.setKey(matchMode[i]);
			matchModeSelect.addItem(oItem);	
		}
		matchModeSelect.setSelectedKey(matchModeValue);
		matchModeSelect.attachChange(function() {
			matchModeValue = matchModeSelect.getSelectedKey();
			//in case of Regex, stringMatchTypeSelect is EXACT MATCH others can not be selected
			if(matchModeValue == "Regex"){
				stringMatchTypeSelect.setEnabled(false);
			}else{
				stringMatchTypeSelect.setEnabled(true);
			}
			var selectedStringMatch = stringMatchTypeSelect.getSelectedKey();
			stringMatchTypeSelect.removeAllItems();
			//In case of String we have different string match types
			if(matchModeValue == "String") {
				//Getting the string match types for string
				var matchTypes = com.sap.xmii.common.util.STRING_MATCH_TYPES_STRING;
				//Looping though the matchTypes for adding the items
				for(var i = 0 ; i < matchTypes.length ; i++) {
					var oItem = new sap.ui.core.ListItem();
					oItem.setText(matchTypes[i]);
					oItem.setKey(matchTypes[i].toLowerCase());
					stringMatchTypeSelect.addItem(oItem);
				}
			} else {
				//Getting the string match types for other than string
				var matchTypes = com.sap.xmii.common.util.STRING_MATCH_TYPES;
				//Looping though the matchTypes for adding the items
				for(var i = 0 ; i < matchTypes.length ; i++) {
					var oItem = new sap.ui.core.ListItem();
					oItem.setText(matchTypes[i]);
					oItem.setKey(matchTypes[i].toLowerCase());
					stringMatchTypeSelect.addItem(oItem);
				}
			}
			stringMatchTypeSelect.setSelectedKey(selectedStringMatch);
		});
		//Adding the content
		matchModeHLayout.addContent(matchModeLabel);
		matchModeHLayout.addContent(matchModeSelect);
		
		//Creation of Horizontal layout to hold the string match types
		var stringMatchTypeHLayout = new sap.ui.layout.HorizontalLayout();
		
		//Creation of String Match Type
		var stringMatchTypeLabel = new sap.m.Label({text:com.sap.xmii.common.util.MessageBundle.getText("XLBL_STRING_MATCH_TYPE"),width : "120px"}).addStyleClass("colorContext");
		//Creation of String Match type Select
		var stringMatchTypeSelect = new sap.m.Select("stringMatchTypeSelect").addStyleClass("colorContextForSelect");
		//Setting the selected key
		stringMatchTypeSelect.setSelectedKey(stringMatchTypeValue);
		
		//Attaching the change event
		stringMatchTypeSelect.attachChange(function() {
			if(this.getSelectedKey() == "in between") {
				sap.ui.getCore().byId("toValue").setEnabled(true);
				sap.ui.getCore().byId("fromValue").setEnabled(true);
				sap.ui.getCore().byId("exactValue").setEnabled(false);
			} else {
				sap.ui.getCore().byId("toValue").setEnabled(false);
				sap.ui.getCore().byId("fromValue").setEnabled(false);
				sap.ui.getCore().byId("exactValue").setEnabled(true);
			}
		});
		//Adding the content
		stringMatchTypeHLayout.addContent(stringMatchTypeLabel);
		stringMatchTypeHLayout.addContent(stringMatchTypeSelect);
		
		//Creation of Horizontal layout to hold the value
		var valueHLayout = new sap.ui.layout.HorizontalLayout();
		//Creation of Value
		var valueLabel = new sap.m.Label({text:com.sap.xmii.common.util.MessageBundle.getText("XLBL_VALUE"),width : "120px"}).addStyleClass("colorContext");
		var valueField = new sap.m.Input("exactValue").addStyleClass("colorPicker");
		//Adding the change event
		valueField.attachChange(function() {
			//Validating the fields based on the match mode selected
			if(matchModeValue == "Double") {
				if(validateDoubleField(this.getValue())) {
					this.setValueState(sap.ui.core.ValueState.None);
				} else {
					this.setValueState(sap.ui.core.ValueState.Error);
				}
			} else if (matchModeValue == "Integer" || matchModeValue == "Long") {
				if(validateIntegerField(this.getValue())) {
					this.setValueState(sap.ui.core.ValueState.None);
				} else {
					this.setValueState(sap.ui.core.ValueState.Error);
				}
			}
		});
		
		//Adding the content
		valueHLayout.addContent(valueLabel);
		valueHLayout.addContent(valueField);
		
		//Creation of horizontal layout to hold to and from values
		var toFromValueHLayout = new sap.ui.layout.HorizontalLayout();
		
		//Creation of toValue and from Value Label
		var fromValueLabel = new sap.m.Label({text:com.sap.xmii.common.util.MessageBundle.getText("XLBL_FROM_VALUE"),width : "120px"}).addStyleClass("colorContext");
		var toValueLabel = new sap.m.Label({text:com.sap.xmii.common.util.MessageBundle.getText("XLBL_TO_VALUE"),width : "120px"}).addStyleClass("colorContext").addStyleClass("colorPicker");
		
		//Creation of toValue and fromValue fields
		var fromValueField = new sap.m.Input("fromValue").addStyleClass("colorPicker");
		var toValueField = new sap.m.Input("toValue").addStyleClass("colorPicker");
		//Adding the change event for from field
		fromValueField.attachChange(function(){
			//Validating the fields based on the match mode selected
			if(matchModeValue == "Double") {
				if(validateDoubleField(this.getValue())) {
					this.setValueState(sap.ui.core.ValueState.None);
				} else {
					this.setValueState(sap.ui.core.ValueState.Error);
				}
			} else if (matchModeValue == "Integer" || matchModeValue == "Long") {
				if(validateIntegerField(this.getValue())) {
					this.setValueState(sap.ui.core.ValueState.None);
				} else {
					this.setValueState(sap.ui.core.ValueState.Error);
				}
			}
		});
		//Adding the change event for to field
		toValueField.attachChange(function(){
			//Validating the fields based on the match mode selected
			if(matchModeValue == "Double") {
				if(validateDoubleField(this.getValue())) {
					this.setValueState(sap.ui.core.ValueState.None);
				} else {
					this.setValueState(sap.ui.core.ValueState.Error);
				}
			} else if (matchModeValue == "Integer" || matchModeValue == "Long") {
				if(validateIntegerField(this.getValue())) {
					this.setValueState(sap.ui.core.ValueState.None);
				} else {
					this.setValueState(sap.ui.core.ValueState.Error);
				}
			}
		});
		//Adding the content
		toFromValueHLayout.addContent(fromValueLabel);
		toFromValueHLayout.addContent(fromValueField);
		toFromValueHLayout.addContent(toValueLabel);
		toFromValueHLayout.addContent(toValueField);
		
		//Firing the change to assign the values properly
		stringMatchTypeSelect.fireChange({"selectedItem" : stringMatchTypeSelect.getItemAt(0)});
		//Setting the values of context value properly
		//- is included in case of string match type is "in Between"
		var indexOfSeperator = contextValue.indexOf("-");
		if(indexOfSeperator != -1) {
			//getting the values
			var value = contextValue.split("-");
			//Setting the values
			sap.ui.getCore().byId("fromValue").setValue(value[0]);
			sap.ui.getCore().byId("toValue").setValue(value[1]);
		} else {
			//Setting the values
			sap.ui.getCore().byId("exactValue").setValue(contextValue);
		}
		//Adding the each horizontal layout to main layout
		editColorContextVLayout.addContent(matchModeHLayout);
		editColorContextVLayout.addContent(stringMatchTypeHLayout);
		editColorContextVLayout.addContent(valueHLayout);
		editColorContextVLayout.addContent(toFromValueHLayout);
		
		editColorContextDialog.addContent(editColorContextVLayout);
		//Adding the ok and cancel button
		//ok button
		editColorContextDialog.addButton(new sap.m.Button({text :com.sap.xmii.common.util.MessageBundle.getText("XBUT_OK"),press : function(){
			//String to hold the actual context value
			var stringOfContextValue = null;
			//for Regex match mode the stringMatchType is not shown
			if(matchModeValue == "Regex") {
				stringOfContextValue = matchModeValue;
			} else {
				stringOfContextValue = matchModeValue +":"+ stringMatchTypeSelect.getSelectedKey().toUpperCase().replace(" ","_");
			}
			//if in between is selected, get the value from toValue and fromValue
			//otherwise from exactValue
			if(stringMatchTypeSelect.getSelectedKey() == "in between") {
				//Getting the from and to Value
				var fromValue = sap.ui.getCore().byId("fromValue").getValue();
				var toValue = sap.ui.getCore().byId("toValue").getValue();
				//Validating for all the match types
				if(matchModeValue == "Double"){
					if(validateDoubleField(fromValue) && validateDoubleField(toValue)){
						stringOfContextValue += ":"+fromValue+"-"+toValue;
					}else{
						return;
					}
				}else if (matchModeValue == "Integer" || k == "Long"){

					if(validateDoubleField(parseInt(fromValue)) && validateDoubleField(parseInt(toValue))){
						stringOfContextValue += ":"+parseInt(fromValue)+"-"+parseInt(toValue);
					}else{
						return;
					}
				}
			} else {
				var value = sap.ui.getCore().byId("exactValue").getValue();
				//Validating for all the match types
				if(matchModeValue == "Double"){
					if(validateDoubleField(value)){
						stringOfContextValue += ":"+ value;
					}else{
						return;
					}
				}else if (matchModeValue == "Integer" || matchModeValue == "Long"){
					if(validateDoubleField(parseInt(value))){
						stringOfContextValue += ":"+ parseInt(value);
					}else{
						return;
					}
				}else{
					stringOfContextValue += ":"+ value;
				}
			}
			control.setText(stringOfContextValue);
			editColorContextDialog.close();	
		}}));
		
		//cancel button	
		editColorContextDialog.addButton(new sap.m.Button({text :com.sap.xmii.common.util.MessageBundle.getText("XBUT_CANCEL"),press : function(){
			editColorContextDialog.close();
		}}));
		//Firing the select
		matchModeSelect.fireChange({"selectedItem":matchModeSelect.getItemAt(0)});
		//Opening the dialog
		editColorContextDialog.open();
	}
	
	/**
	 * Fucntion to create the dialog when user clicks on Add Column or Insert Column or Delete Column
	 * @return
	 */
	function openInsertDeleteColumnDialog(defaultValueJSON , mode) {
		//Get the selected key to provide selected columns which needs to be added
		var columnSelected = sap.ui.getCore().byId("gridColumnSelect").getSelectedKey();
		//Creation of the dialog
		var insertDeleteColumnDialog = new sap.m.Dialog({title : com.sap.xmii.common.util.MessageBundle.getText("XLBL_ADD_COLUMNS")});
		//attach after close function
		insertDeleteColumnDialog.attachAfterClose(function(){
			this.destroyContent();
			this.destroyButtons();
		}, insertDeleteColumnDialog);
		//Creation of horizontal layout to keep label and select together
		var addColumnHorizontalLayout = new sap.ui.layout.HorizontalLayout();

		//If insert columns is selected, one more label and select needs to be added with match mode . The label should be "insert before"
		//and if add column is selected, the label should be only "Match mode"
		var labelText = "";
		if(mode == "insert") {
			//Creation of "Match Mode" label
			//var matchModeLabel = new sap.m.Label({text:oBundle.getText("XLBL_MATCH_MODE")}).addStyleClass("colorContext").addStyleClass("colorPicker");
			//Setting the title
			insertDeleteColumnDialog.setTitle(com.sap.xmii.common.util.MessageBundle.getText("XLBL_INSERT_COLUMN"));
			//Creation of Label for the "inserBefore"
			var columnLabel = new sap.m.Label({text:com.sap.xmii.common.util.MessageBundle.getText("XLBL_INSERT_BEFORE")}).addStyleClass("colorContext");
		} else if(mode == "delete") {//if delete column is selected
			//For delete, only confirmation should be added
			//Setting the title
			insertDeleteColumnDialog.setTitle(com.sap.xmii.common.util.MessageBundle.getText("XTIT_ADD_CONFIRM"));
			//Creation of Label for the delete confirmation
			var deleteLabel = new sap.m.Label({text:com.sap.xmii.common.util.MessageBundle.getText("XLBL_CONFIRMATION_DELETE_COLUMN")}).addStyleClass("colorContext");
		}

		//if insert columns is selected the drop down should be all added columns and match mode select
		//and if add column is only match mode select

		//if the insert or add columns is selected
		if(mode == "insert" ) {
			//Variable to hold the all the added columns
			var columns = [];
			//Getting the columns JSON 
			var columnJSON =  defaultValueJSON.Columns;
			//Looping through the columnJSON 
			for(var i = 0 ; i < columnJSON.length ; i++){
				if(columnJSON[i].ColumnName != com.sap.xmii.common.util.MessageBundle.getText("XLBL_ICON") && columnJSON[i].ColumnName != com.sap.xmii.common.util.MessageBundle.getText("XLBL_COLOR"))
					columns.push(columnJSON[i].ColumnName);
			}
			//Creation of Select
			var columnSelect = new sap.m.Select("columnSelect");
			//Looping through the column to add item
			for(var i = 0; i < columns.length ;i++) {
				var oItem = new sap.ui.core.ListItem();
				oItem.setText(columns[i]);
				oItem.setKey(i);
				columnSelect.addItem(oItem);	
			}
		}
		//if the insert columns is selected
		if(mode == "insert") {
			addColumnHorizontalLayout.addContent(columnLabel);
			addColumnHorizontalLayout.addContent(columnSelect);
		} else if(mode == "delete") {
			//if delete column is selected
			addColumnHorizontalLayout.addContent(deleteLabel);
		}
		//for inser and add column
		if(mode == "insert") {
			//Adding the ok and cancel button
			//OkButton
			insertDeleteColumnDialog.addButton(new sap.m.Button({text:com.sap.xmii.common.util.MessageBundle.getText("XBUT_OK"),press : function(){
				//the selected Index where the column need to be added is different in inser and add case.
				if(mode == "insert") {
					var selectedIndex ;
					//Getting the selected key
					var selectedColumnkey = sap.ui.getCore().byId("columnSelect").getSelectedKey();
					//getting the index
					// 2 because first and second column is for icon and color
					var selectedIndex = parseInt(selectedColumnkey) + 2;
				}
				//Getting the table
				var configureStructuralParametersTable = sap.ui.getCore().byId("configureStructuralParametersTable");
				//Getting the model
				var modelData = configureStructuralParametersTable.getModel().getData().modelData;
				//if model Data is [] then add a row
				if(modelData.length > 0) {
					//Adding the column to the defaultValueJSON
					defaultValueJSON.Columns.splice(selectedIndex,0,{"DataType":"LiteButton" , "ColumnName" :""+columnSelected+""});
					//Inserting the new column at 2nd position
					configureStructuralParametersTable.insertColumn(new sap.m.Column({header: new sap.m.Label({text :""+columnSelected+"", textAlign: "Center"})}),selectedIndex);
					//Getting the modelData to set the match mode
					var modelData = configureStructuralParametersTable.getModel().getData().modelData;
					if(modelData != null && modelData != undefined){
						for(var i = 0; i < modelData.length ;i++){
							var selectedMode = "String:EXACT MATCH:0";
							modelData[i][columnSelected] = selectedMode;
						}
					}
				} else {
					var selectedMode = "String:EXACT MATCH:0";
					//Adding the rows to the defaultValueJSON
					defaultValueJSON.Rows.push({"MatchColors" :"#000000" , "MatchIcons" :"<null>"});
					defaultValueJSON.Rows[0][columnSelected] = selectedMode;
					//Deleting all the columns and then adding it
					configureStructuralParametersTable.removeAllColumns();
					//Deleting the columns data
					defaultValueJSON.Columns.splice(0,defaultValueJSON.Columns.length);
					
					//Adding the column to the defaultValueJSON
					defaultValueJSON.Columns = [{"DataType" :"Color" ,"ColumnName" :"Color" , "Name" :"MatchColors"},{"DataType" :"Icon" ,"ColumnName" :"Icon", "Name" :"MatchIcons"}];
					defaultValueJSON.Columns.push({"DataType":"LiteButton" , "ColumnName" :""+columnSelected+""});
					
					//Adding the columns 
					for(var i = 0 ; i < defaultValueJSON.Columns.length ; i++){
						configureStructuralParametersTable.addColumn(new sap.m.Column({header: new sap.m.Label({text :""+defaultValueJSON.Columns[i].ColumnName +"", textAlign: "Center"})}));
					}
				}
				//Creation of ColumnListItems
				createColumnListTemplate(defaultValueJSON , configureStructuralParametersTable);
				configureStructuralParametersTable.getModel().refresh;
				//Firing the change event of query column so that the enabling and disabling of button is done properly
				gridColumnSelect = sap.ui.getCore().byId("gridColumnSelect");
				gridColumnSelect.fireChange({"selectedItem":gridColumnSelect.getItemAt(0)});
				insertDeleteColumnDialog.close();
			}}));

			//Cancel Button
			insertDeleteColumnDialog.addButton(new sap.m.Button({text:com.sap.xmii.common.util.MessageBundle.getText("XBUT_CANCEL"),press : function(){
				insertDeleteColumnDialog.close();
			}}));
		} else {
			//Creation of yes button
			insertDeleteColumnDialog.addButton(new sap.m.Button({text :com.sap.xmii.common.util.MessageBundle.getText("XBUT_YES"),press : function(){
				//Getting the table
				var configureStructuralParametersTable = sap.ui.getCore().byId("configureStructuralParametersTable");
				//Getting the model Data
				var modelData = configureStructuralParametersTable.getModel().getData().modelData;
				//Looping through the modelData to find the column which needs to be deleted
				for(var i = 0 ; i < modelData.length ; i++){
					if(modelData[i][columnSelected] != undefined){
						delete modelData[i][columnSelected];
					}
				}
				//Getting the columns
				var columns = configureStructuralParametersTable.getColumns();
				// Variable to store selected column
				var selectedColumnsIndex = null;
				//Looping through the column to get the column which needs to be deleted
				for(var j = 0; j < columns.length ; j++){
					if(columns[j].getHeader().getText() == columnSelected){
						selectedColumnsIndex = j;
						break;
					}
				}
				//any columns needs to be deleted
				if(selectedColumnsIndex != null){
					//Removing columns from the table
					configureStructuralParametersTable.removeColumn(selectedColumnsIndex);
					//Looping through to remove columns info from the defaultValueJSON.Columns
					for(var i = 0 ; i < defaultValueJSON.Columns.length ; i++){
						if(defaultValueJSON.Columns[i].ColumnName == columnSelected){
							defaultValueJSON.Columns.splice(i,1);
							break;
						}
					}
				}
				//<= 2 meaning no query columns present so delete entire row
				if(configureStructuralParametersTable.getColumns().length <= 2){
					//Removing columns from the table
					configureStructuralParametersTable.removeAllColumns();
					//Clearing the model data
					defaultValueJSON.Columns.splice(0,defaultValueJSON.Columns.length);
					defaultValueJSON.Rows.splice(0,defaultValueJSON.Rows.length);
				}
				//firing the change event to handle enabling and disabling of the buttons
				var gridColumnSelect = sap.ui.getCore().byId("gridColumnSelect");
				gridColumnSelect.fireChange({"selectedItem":gridColumnSelect.getItemAt(0)});
				//Setting the new template
				createColumnListTemplate(defaultValueJSON , configureStructuralParametersTable );
				//Refreshing the model
				configureStructuralParametersTable.getModel().refresh;
				//closing the dialog
				insertDeleteColumnDialog.close();
			}}));
			//Creation of no button
			insertDeleteColumnDialog.addButton(new sap.m.Button({text : com.sap.xmii.common.util.MessageBundle.getText("XBUT_NO"),press : function(){
				insertDeleteColumnDialog.close();
			}}));
		}
		insertDeleteColumnDialog.addContent(addColumnHorizontalLayout);
		//Opening the dialog
		insertDeleteColumnDialog.open();
	}
	
	/**
	 * Function is responsible to create the content of the color context dialog contents except table
	 * @param defaultValueJSON
	 * @param configureStructuralParametersTable
	 * @return
	 */
	function createContentForColorContext(defaultValueJSON , configureStructuralParametersTable){
		// Creation of the Color Context  dialog content
		var colorContextVerticalLayout = new sap.ui.layout.VerticalLayout();
		//Creation of vertical Layout
		var colorContextHorizontalLayout = new sap.ui.layout.HorizontalLayout();
		//Creation of GridColumns label
		var gridColumnsLabel = new sap.m.Label({text:com.sap.xmii.common.util.MessageBundle.getText("XLBL_QUERY_COLUMNS")}).addStyleClass("colorContext");
		colorContextHorizontalLayout.addContent(gridColumnsLabel);
		
		//Creation of GridColumn Select
		var gridColumnsSelect = new sap.m.Select("gridColumnSelect").bindProperty("selectedKey","GridColumns");
		var columnArray = thisObj.getQueryObject().getQueryResult().Rowsets.Rowset[0].Columns.Column;
		//Looping thorough the columns so that the items can be created and added to the gridColumnsSelect
		for(var i = 1 ; i < columnArray.length; i++){
			oItem = new sap.ui.core.ListItem();
			oItem.setText(columnArray[i].Name);
			oItem.setKey(columnArray[i].Name);
			gridColumnsSelect.addItem(oItem);	
		}
		gridColumnsSelect.attachChange(function(oEvent){
			//Getting the selected key
			var selectedKey = this.getSelectedKey();
			// if it is empty meaning we have fired the change event,
			if(selectedKey == ""){
				selectedKey = this.getItemAt(0).getKey();
			}
			//Flag to check whether the columns is already added in the color context table
			var isColumnPresent = false;
			//Looping through the defaultValueJSON.Column to check whether the column is already been added or not
			for(var i = 0; i < defaultValueJSON.Columns.length; i++){
				if(defaultValueJSON.Columns[i].ColumnName == selectedKey){
					isColumnPresent = true;
					break;
				}
			}
			//Enabling and disabling the buttons
			if(isColumnPresent){
				deleteColumnButton.setEnabled(true);
				addColumnsButton.setEnabled(false);
				insertColumnButton.setEnabled(false);
				segmentedButtonColumns.setSelectedButton(deleteColumnButton);
			}else if(!isColumnPresent && defaultValueJSON.Rows.length == 0){
				//in case when no rows are present
				deleteColumnButton.setEnabled(false);
				addColumnsButton.setEnabled(true);
				insertColumnButton.setEnabled(false);
				segmentedButtonColumns.setSelectedButton(addColumnsButton);
			}else{
				deleteColumnButton.setEnabled(false);
				addColumnsButton.setEnabled(true);
				insertColumnButton.setEnabled(true);
				segmentedButtonColumns.setSelectedButton(addColumnsButton);
			}
		});
		colorContextHorizontalLayout.addContent(gridColumnsSelect);
		//Creation of Add Column Button
		var addColumnsButton = new sap.m.Button({text :com.sap.xmii.common.util.MessageBundle.getText("XLBL_ADD_COLUMNS") , width : "100px",press : function(){
			//Get the selected key to provide selected columns which needs to be added
			var columnSelected = sap.ui.getCore().byId("gridColumnSelect").getSelectedKey();
			
			var configureStructuralParametersTable =  sap.ui.getCore().byId("configureStructuralParametersTable");
			//Getting the last index for the column to be added
			var selectedIndex = configureStructuralParametersTable.getColumns().length;
			//Getting the model
			var modelData = configureStructuralParametersTable.getModel().getData().modelData;
			//if model Data is [] then add a row
			if(modelData.length > 0){
				//Adding the column to the defaultValueJSON
				defaultValueJSON.Columns.splice(selectedIndex,0,{"DataType":"LiteButton" , "ColumnName" :""+columnSelected+""});
				//Inserting the new column at 2nd position
				configureStructuralParametersTable.insertColumn(new sap.m.Column({header: new sap.m.Label({text :""+columnSelected+"", textAlign: "Center"})}),selectedIndex);
				//Getting the modelData to set the match mode
				var modelData = configureStructuralParametersTable.getModel().getData().modelData;
				if(modelData != null){
					for(var i = 0; i < modelData.length ;i++){
						var selectedMode = "";
						selectedMode ="String:EXACT MATCH:0";
						modelData[i][columnSelected] = selectedMode;
					}
				}
			}else{
				var selectedMode = "";
				selectedMode ="String:EXACT MATCH:0";
				//Adding the rows to the defaultValueJSON
				defaultValueJSON.Rows.push({"MatchColors" :"#000000" , "MatchIcons" :"<null>"});
				defaultValueJSON.Rows[0][columnSelected] = selectedMode;
				//Deleting all the columns and then adding it
				configureStructuralParametersTable.removeAllColumns();
				//Deleting the columns data
				defaultValueJSON.Columns.splice(0,defaultValueJSON.Columns.length);

				//Adding the column to the defaultValueJSON
				defaultValueJSON.Columns = [{"DataType" :"Color" ,"ColumnName" :"Color" , "Name" :"MatchColors"},{"DataType" :"Icon" ,"ColumnName" :"Icon", "Name" :"MatchIcons"}];
				defaultValueJSON.Columns.push({"DataType":"LiteButton" , "ColumnName" :""+columnSelected+""});

				//Adding the columns 
				for(var i = 0 ; i < defaultValueJSON.Columns.length ; i++){
					configureStructuralParametersTable.addColumn(new sap.m.Column({header: new sap.m.Label({text :""+defaultValueJSON.Columns[i].ColumnName +"", textAlign: "Center"})}));
				}
			}
			//Creation of ColumnListItems
			createColumnListTemplate(defaultValueJSON , configureStructuralParametersTable );
			configureStructuralParametersTable.getModel().refresh;
			//Firing the change event of query column so that the enabling and disabling of button is done properly
			gridColumnSelect = sap.ui.getCore().byId("gridColumnSelect");
			gridColumnSelect.fireChange({"selectedItem":gridColumnSelect.getItemAt(0)});
		}});
		
		//Creation of deleteColumn Button
		var deleteColumnButton  = new sap.m.Button({text :com.sap.xmii.common.util.MessageBundle.getText("XLBL_DELETE_COLUMNS") , width : "100px", press : function(){
			//Function responsible to opening for confirmation dialog
			openInsertDeleteColumnDialog(defaultValueJSON , "delete");
		}
		});
		//Creation of Insert Button
		var insertColumnButton = new sap.m.Button({text : com.sap.xmii.common.util.MessageBundle.getText("XLBL_INSERT_COLUMN") , width : "100px",press : function(){
			//Function responsible to open the Add column wit match mode
			openInsertDeleteColumnDialog(defaultValueJSON, "insert");
		}});
		
		//Creation of Segmented button
		var segmentedButtonColumns = new sap.m.SegmentedButton({
			buttons : [addColumnsButton, insertColumnButton, deleteColumnButton]
		}).addStyleClass("colorPicker");
		
		colorContextHorizontalLayout.addContent(segmentedButtonColumns);
		
		//Creation of one more horizontal Layout to keep the add and delete row
		var rowHorizontalLayout = new sap.ui.layout.HorizontalLayout();
		//Creation of add row button
		var addRowButton = new sap.m.Button({text : com.sap.xmii.common.util.MessageBundle.getText("XBUT_ADD") , icon : "sap-icon://add", width:"100px",type :"Transparent"  ,press : function(){
			//if the rows are empty so we need to create the columns and then add the  row to it
			//Otherwise just update the rows data
			if(defaultValueJSON.Rows.length > 0){
				//Pushing the new row details
				defaultValueJSON.Rows.push({"MatchColors" :"#000000" , "MatchIcons" :"<null>"});
				//Getting the length of the defaultValueJSON.Rows
				var length = defaultValueJSON.Rows.length;
				//Looping through the columns to add the same match values for the query columns
				for(var i = 0 ; i < defaultValueJSON.Columns.length; i++){
					if(defaultValueJSON.Columns[i].ColumnName != "Color" && defaultValueJSON.Columns[i].ColumnName != "Icon"){
						//Getting the previous row values
						var columnValue = defaultValueJSON.Rows[length-2][defaultValueJSON.Columns[i].ColumnName];
						//Getting the matchMode
						var matchMode = columnValue.split(":")[0];
						//variable to get the match values
						var matchValue = "";
						if(matchMode == "Regex"){
							matchValue = "Regex:*";
						}else if(matchMode == "Double"){
							matchValue = matchMode + ":EXACT MATCH:0.0";
						}else{
							matchValue = matchMode +":EXACT MATCH:0";
						}
						//Setting the values
						defaultValueJSON.Rows[length-1][defaultValueJSON.Columns[i].ColumnName]= matchValue ;
					}
				}
				//Refreshing the model
				configureStructuralParametersTable.getModel().refresh();
			}else{
				//Adding the new row with color and icon details
				defaultValueJSON.Rows = [{"MatchColors" :"#000000" , "MatchIcons" :"<null>"}];
				//Adding the  color and icons column to the defaultValueJSON
				defaultValueJSON.Columns = [{"DataType" :"Color" ,"ColumnName" :"Color" , "Name" :"MatchColors"},{"DataType" :"Icon" ,"ColumnName" :"Icon", "Name" :"MatchIcons"}];
				//Adding the columns to the table
				for(var i = 0 ; i < defaultValueJSON.Columns.length ; i++){
					configureStructuralParametersTable.addColumn(new sap.m.Column({header: new sap.m.Label({text :""+defaultValueJSON.Columns[i].ColumnName +"", textAlign: "Center"})}));
				}
				//Creation of ColumnListItems
				createColumnListTemplate(defaultValueJSON , configureStructuralParametersTable );
				//Refreshing the model
				configureStructuralParametersTable.getModel().refresh;
			}
			
		}});
		//Creation of deleteRow button
		var deleteRowButton = new sap.m.Button({text : com.sap.xmii.common.util.MessageBundle.getText("XBUT_DELETE"), icon : "sap-icon://sys-cancel" ,type :"Transparent" , width:"100px" ,press : function(){
			//Getting the selected contexts
			var selectedContext = configureStructuralParametersTable.getSelectedContexts();
			//Getting the model Data
			var parameterModelData = configureStructuralParametersTable.getModel().getData().modelData;
			//Checking for empty selectedContext
			if(selectedContext != null && selectedContext.length > 0){
				//Looping through the selectedContext to delete it
				for(var i = 0; i < selectedContext.length ; i++){
					//Getting the path
					var path = selectedContext[i].getPath();
					//Getting the index of the selectedContext from the path mentioned
					var indexOfSelectedRow = path.substring(path.lastIndexOf("/")+1);
					//Deleting the index
					parameterModelData.splice(indexOfSelectedRow,1);
					//Refreshing the model
					configureStructuralParametersTable.getModel().refresh();
				}
			}
			//Once deleted removing the selection from the table
			configureStructuralParametersTable.removeSelections();
			// All the row has been deleted columns also should get deleted
			if(parameterModelData.length == 0){
				//Removing all the columns
				configureStructuralParametersTable.removeAllColumns();
				//Deleting the columns and rows data
				defaultValueJSON.Columns.splice(0,defaultValueJSON.Columns.length);
				defaultValueJSON.Rows.splice(0,defaultValueJSON.Rows.length);
			}
		}});
		
		rowHorizontalLayout.addContent(addRowButton);
		rowHorizontalLayout.addContent(deleteRowButton);
		
		//Firing the change event for the gridColumnsSelect
		var gridColumnsSelect = sap.ui.getCore().byId("gridColumnSelect");
		gridColumnsSelect.fireChange({"selectedItem":gridColumnsSelect.getItemAt(0)});
		colorContextVerticalLayout.addContent(colorContextHorizontalLayout);
		colorContextVerticalLayout.addContent(rowHorizontalLayout);
		//<= 2 meaning no query columns present so delete entire row
		if(defaultValueJSON.Columns.length <= 2 && defaultValueJSON.Rows.length == 0){
			//Removing columns from the table
			configureStructuralParametersTable.removeAllColumns();
			//Clearing the model data
			defaultValueJSON.Columns.splice(0,defaultValueJSON.Columns.length);
		}
		
		return colorContextVerticalLayout;
	}
	
	

	/**
	 * Function is called when the user clicks on the apply of color context dialog
	 * @param defaultValueJSON
	 * @param parameterModelData
	 * @return
	 */
	function createJSONOnApplyOfColorContextDialog(defaultValueJSON , parameterModelData){
		
		jQuery.extend(true, thisObj.colorContexts, defaultValueJSON.Rows);
		//Variable to hold the all the columns except icon and color column
		var matchColumns = null;
		//Checking if the columns is undefined or not
		if(defaultValueJSON.Columns != null && defaultValueJSON.Columns.length > 0){
			//Getting the columns JSON 
			var columnJSON =  defaultValueJSON.Columns;
			//Looping through the columnJSON 
			for(var i = 0 ; i < columnJSON.length ; i++){
				if(columnJSON[i].ColumnName != com.sap.xmii.common.util.MessageBundle.getText("XLBL_ICON") && columnJSON[i].ColumnName != com.sap.xmii.common.util.MessageBundle.getText("XLBL_COLOR") )
					if(matchColumns == null){
						matchColumns =  columnJSON[i].ColumnName;
					}else{
						matchColumns += "," +  columnJSON[i].ColumnName;
					}
			}
		}
		if(matchColumns == null){
			pushToChangedParameters( "MatchColumns", "null");
		}else{
			pushToChangedParameters( "MatchColumns", matchColumns);
		}

		//variable to store color,icon and match values
		var matchColors = null;
		var matchIcons = null;
		var matchValues = null;
		//Looping though the parameterModelData to get values for matchValues, matchIcons & match Colors
		for(var index = 0 ; index < parameterModelData.length ; index++){
			//if the variables is null 
			if(matchColors == null || matchIcons == null || matchValues == null){
				//Checking if the match color is undefined or not
				if(parameterModelData[index].MatchColors != null){
					//Setting the matchColors & matchIcons
					matchColors = parameterModelData[index].MatchColors;
				}
				//Checking if the match icons is undefined or not
				if(parameterModelData[index].MatchIcons != null && parameterModelData[index].MatchIcons != undefined){
					//"" means the value need to be sent is <null>
					if(parameterModelData[index].MatchIcons == ""){
						matchIcons = "<null>";
					}else{
						matchIcons = window.location.protocol + "//" + window.location.host + "/XMII/"+parameterModelData[index].MatchIcons;
					}
				}
				//Checking if the match Columns is undefined or not
				if(matchColumns != null){
					//variable to store all the columns values like ( AssetUtil1 , AssetUtil2 etc for 1st rows then sames values for 2nd rows)
					var eachMatchValues = "";
					//Getting the columns 
					var matchColumnsArray = matchColumns.split(",");
					//Looping through the matchColumnsArray to set the matchValues
					for(var i = 0 ; i < matchColumnsArray.length ; i++){
						if(eachMatchValues == ""){
							eachMatchValues = parameterModelData[index][matchColumnsArray[i]];
						}else{
							eachMatchValues += ","+ parameterModelData[index][matchColumnsArray[i]];
						}
					}
					matchValues = eachMatchValues + ";";
				}
			}else{
				//Checking if the match color is undefined or not
				if(parameterModelData[index].MatchColors != null && parameterModelData[index].MatchColors != undefined) {
					//Setting the matchColors & matchIcons
					matchColors += ","+ parameterModelData[index].MatchColors;
				}
				//Checking if the match icons is undefined or not
				if(parameterModelData[index].MatchIcons != null && parameterModelData[index].MatchIcons != undefined) {
					//"" means the value need to be sent is <null>
					if(parameterModelData[index].MatchIcons == "") {
						matchIcons += "," + "<null>";
					} else {
						matchIcons += ","+ window.location.protocol + "//" + window.location.host + "/XMII/"+parameterModelData[index].MatchIcons;;
					}
				}
				//Checking if the match Columns is undefined or not
				if(matchColumns != null && matchColumns != undefined){
					//variable to store all the columns values like ( AssetUtil1 , AssetUtil2 etc for 1st rows then sames values for 2nd rows)
					var eachMatchValues = "";
					//Getting the columns 
					var matchColumnsArray = matchColumns.split(",");
					//Looping thorugh the matchColumnsArray to set the matchValues
					for(var i = 0 ; i < matchColumnsArray.length ; i++){
						if(eachMatchValues == ""){
							eachMatchValues = parameterModelData[index][matchColumnsArray[i]];
						}else{
							eachMatchValues += ","+ parameterModelData[index][matchColumnsArray[i]];
						}
					}
					matchValues += eachMatchValues+";";
				}
			}
		}
		if(matchColors == null){
			pushToChangedParameters( "MatchColors", "null");
		}else{
			pushToChangedParameters( "MatchColors", matchColors);
		}
		if(matchIcons == null){
			pushToChangedParameters( "MatchIcons", "null");
		}else{
			pushToChangedParameters( "MatchIcons", matchIcons);
		}
		if(matchValues == null){
			pushToChangedParameters( "MatchValues", "null");
		}else{
			pushToChangedParameters( "MatchValues", matchValues);
		}
		
	}
	
	function enableSelectAllDeselectAll(oTable2 , oContext){

    	var uncheckedCounter = 0;
    	var checkedCounter = 0;
    	var updatedData = oTable2.getModel().getData().modelData;
    	if(updatedData.length != 0){
    		for(var i =0 ; i < updatedData.length;i++){
        		if(!updatedData[i].checked)
        			uncheckedCounter++;	
        		if(updatedData[i].checked)
        			checkedCounter++;	
        	}
    	}else{
    		sap.ui.getCore().byId("DeselectAll").setEnabled(false);
    		sap.ui.getCore().byId("SelectAll").setEnabled(false);
    		sap.ui.getCore().byId("okButton").setEnabled(true);	
    		return;
    	}
    	
    	if(uncheckedCounter == updatedData.length){
    		sap.ui.getCore().byId("SelectAll").setEnabled(true);
    		sap.ui.getCore().byId("DeselectAll").setEnabled(false);
    		if(oContext.getProperty("name") != "AnalysisAggregationModes" && oContext.getProperty("name") != "SelectedGroupCategories")
    			sap.ui.getCore().byId("okButton").setEnabled(false);
    	}else if(checkedCounter == updatedData.length){
    		sap.ui.getCore().byId("DeselectAll").setEnabled(true);
    		sap.ui.getCore().byId("SelectAll").setEnabled(false);
    		if(oContext.getProperty("name") != "AnalysisAggregationModes" && oContext.getProperty("name") != "SelectedGroupCategories")
    			sap.ui.getCore().byId("okButton").setEnabled(true);
    	}else{
    		sap.ui.getCore().byId("DeselectAll").setEnabled(true);
    		sap.ui.getCore().byId("SelectAll").setEnabled(true);
    		if(oContext.getProperty("name") != "AnalysisAggregationModes" && oContext.getProperty("name") != "SelectedGroupCategories")
    			sap.ui.getCore().byId("okButton").setEnabled(true);	
    	}
	}
	
	//Function to create the Multiple Selected Value Dialog
	function openMultipleSelectValueHelp(aData,oValueHelpField, oContext) {
		
		//Checking for catalog query
		var isCatalogQuery = false;
		if (oContext.getProperty().name == "SelectedTags") {
			isCatalogQuery = thisObj.getQueryObject().getQueryType() == "CatalogQuery";
		}
		
		//Getting data for DisplayColumns
		if(oContext.getProperty("contextType") == 12 && oContext.getProperty("groupId") == 34) {
			aData = getDisplayColumnsData(oContext);
		} else if(oContext.getProperty().name == "SelectedTags" && isCatalogQuery) {
			aData = getSelectedTagsForCatalogQuery(oContext);
		}
		//Creation of Dialog
		var oFirstDialog = new sap.m.Dialog({modal: true,title: com.sap.xmii.common.util.MessageBundle.getText("XLBL_SELECT_COLUMN")});
		oFirstDialog.addStyleClass("sapUiSizeCompact");
		//Create an Table
		var oTable2 = new sap.m.Table({
			visibleRowCount: 5,
			firstVisibleRow: 1,
			selectionMode: sap.ui.table.SelectionMode.None,
		});
		//Attach after close function
		oFirstDialog.attachAfterClose(function(){
			this.destroyContent();
			this.destroyButtons();
		}, oFirstDialog);
		//Creation of Select and Deselect button
		var toolbarSelectDeselect = new sap.m.Toolbar({
			content: [
		        new sap.m.Button("SelectAll", {
		        	text: com.sap.xmii.common.util.MessageBundle.getText("XBUT_SELECT_ALL"),
		        	enabled : false,
		        	tooltip: com.sap.xmii.common.util.MessageBundle.getText("XLBL_SELECT_ALL_COLUMNS"),
		        	press: function() {
			        	selectAllColumns(oTable2);
				        //Create a model and bind the table rows to this model
			        	var oModel2 = new sap.ui.model.json.JSONModel();
			        	oModel2.setData({modelData: aData});
			        	oTable2.setModel(oModel2);
			        	//Setting the column list items to the table's items and giving the path to get the value to render the rows
			        	oTable2.bindAggregation("items", {
			        		path: "/modelData",
			        		template : columnTemplate
			        	});
			        	sap.ui.getCore().byId("okButton").setEnabled(true);
		        }
		        }),
		        new sap.m.Button("DeselectAll", {
		        	text: com.sap.xmii.common.util.MessageBundle.getText("XBUT_DESELECT_ALL"),
		        	tooltip: com.sap.xmii.common.util.MessageBundle.getText("XLBL_DESELECT_ALL_COLUMNS"),
		        	press: function() { 
			        	deselectAllColumns(oTable2);
						//Create a model and bind the table rows to this model
						var oModel2 = new sap.ui.model.json.JSONModel();
						oModel2.setData({modelData: aData});
						oTable2.setModel(oModel2);
						//Setting the column list items to the table's items and giving the path to get the value to render the rows
						oTable2.bindAggregation("items", {
							path: "/modelData",
							template : columnTemplate
						});
						sap.ui.getCore().byId("okButton").setEnabled(false);
		        	}
		        })
	        ]
		});
		
		//Define the columns and the control templates to be used
		oTable2.addColumn(new sap.m.Column({
			header: new sap.m.Label({text: com.sap.xmii.common.util.MessageBundle.getText("XLBL_CHECKED")})
		}));
		//If the "Display Columns" is not selected only display "name" column otherwise display "Display column" properties
		if (oContext.getProperty("contextType") == 12 && oContext.getProperty("groupId") == 34) {

			oFirstDialog.setTitle(com.sap.xmii.common.util.MessageBundle.getText("XLBL_CONFIG_DISP_COL"));
			//Adding rest of the columns for display columns
			oTable2.addColumn(new sap.m.Column({
				header: new sap.m.Label({text: com.sap.xmii.common.util.MessageBundle.getText("XLBL_COLUMN_NAME"), enabled: false})
			}));
			oTable2.addColumn(new sap.m.Column({
				header: new sap.m.Label({text: com.sap.xmii.common.util.MessageBundle.getText("XLBL_COLUMN_HEADINGS"), enabled: false})
			}));
			oTable2.addColumn(new sap.m.Column({
				header: new sap.m.Label({text: com.sap.xmii.common.util.MessageBundle.getText("XLBL_COLUMN_WIDTHS"), enabled: false})
			}));
			oTable2.addColumn(new sap.m.Column({
				header: new sap.m.Label({text: com.sap.xmii.common.util.MessageBundle.getText("XLBL_COLUMN_FORMATS"), enabled: false})
			}));
			oTable2.addColumn(new sap.m.Column({
				header: new sap.m.Label({text: com.sap.xmii.common.util.MessageBundle.getText("XLBL_COLUMN_ALIGNMENT"), enabled: false})
			}));
			oTable2.addColumn(new sap.m.Column({
				header: new sap.m.Label({text: com.sap.xmii.common.util.MessageBundle.getText("XLBL_COLUMN_SHOW_AS_BOOLEAN"), enabled: false})
			}));
		
		} else if (oContext.getProperty().name == "SelectedTags" && isCatalogQuery) {

			// Selected tags parameter for catalog query should show one more column "Alias" with name column
			oTable2.addColumn(new sap.m.Column({
				header: new sap.m.Label({text: oBundle.getText("XLBL_COLUMN_NAME"), enabled: false})
			}));
			oTable2.addColumn(new sap.m.Column({
				header: new sap.m.Label({text: oBundle.getText("XLBL_COLNAME_ALIAS"), enabled: false})
			}));
		
		}else {
			oTable2.addColumn(new sap.m.Column({
				header: new sap.m.Label({text: com.sap.xmii.common.util.MessageBundle.getText("XLBL_COLUMN_NAME"), enabled: false})
			}));
		}
		if(!(oContext.getProperty("name") == "AnalysisAggregationModes" || oContext.getProperty("name") == "SelectedGroupCategories") ){
			//oValueHelpField is not null
			//oValueHelpField is not null
			//it will be null in case of Display Columns
			if(oValueHelpField != null) {
				//if the value is null in the value field, set the check to "true"
				if(oValueHelpField.getValue() == ""){
					for(var i =0 ; i < aData.length;i++)
						aData[i].checked = true;
				}
			}
		}
		//Creation of column template for "Display columns" and others
		if(oContext.getProperty("contextType") == 12 && oContext.getProperty("groupId") == 34) {

			//Creation of Alignment dropdownbox
			var columnsAlignmentDropdownBox = new sap.m.Select().bindProperty("selectedKey", "ColumnAlignments");
			//Creation of empty items
			columnsAlignmentDropdownBox.addItem(new sap.ui.core.ListItem({"text":"","key" :""}));
			//Looping through the ALIGNMENT to create items
			var alignmentArray = com.sap.xmii.common.util.ALIGNMENT;
			for(var i = 0 ;i < alignmentArray.length; i++){
				oItem = new sap.ui.core.ListItem();
				oItem.setText(alignmentArray[i]);
				oItem.setKey(alignmentArray[i].substring(0,1));
				//Adding the item to dropdownbox
				columnsAlignmentDropdownBox.addItem(oItem);
			}
			//Create the column template
			var columnTemplate = new sap.m.ColumnListItem({
				cells: [
				        new sap.m.CheckBox({
				        	select: function(oEvent) {
				        	enableSelectAllDeselectAll(oTable2 , oContext);
				        }
				        }).bindProperty("selected", "checked"),
			        new sap.m.Label().bindProperty("text", "DisplayColumns"),
			        new sap.m.Input().bindProperty("value", "ColumnHeadings"),
			        new sap.m.Input({change:function(){
			        	//Validation for width field
			        	if(validateIntegerField(this.getValue()) == true){
			        		this.setValueState(sap.ui.core.ValueState.None);
			        	}else{
			        		this.setValueState(sap.ui.core.ValueState.Error);
			        	}
			        }}).bindProperty("value", "ColumnWidths"),
			        new sap.m.Input().bindProperty("value", "ColumnFormats"),,
			        columnsAlignmentDropdownBox,
			        new sap.m.CheckBox().bindProperty("selected", "ShowColumnsAsBoolean"),
		        ]
			});
		} else if (oContext.getProperty().name == "SelectedTags" && isCatalogQuery){

			var columnTemplate = new sap.m.ColumnListItem({
				cells: [
				        new sap.m.CheckBox({
				        	select: function(oEvent) {
				        		enableSelectAllDeselectAll(oTable2,oContext);
				        	}
				        }).bindProperty("selected", "checked"),

				        new sap.m.Label().bindProperty("text", "name"),
				        new sap.m.Input().bindProperty("value", "Alias")
				        ]
			});
		
		} else {

			//Other than display columns
			var columnTemplate = new sap.m.ColumnListItem({
				cells: [
				        new sap.m.CheckBox({
				        	select: function(oEvent) {
				        		enableSelectAllDeselectAll(oTable2 , oContext);
				        	}
				        }).bindProperty("selected", "checked"),

				        new sap.m.Label().bindProperty("text", "name"),
				        ]
			});
		}
		//Create a model and bind the table rows to this model
		var oModel2 = new sap.ui.model.json.JSONModel();
		oModel2.setData({modelData: aData});
		oTable2.setModel(oModel2);
		//Setting the column list items to the table's items and giving the path to get the value to render the rows
		oTable2.bindAggregation("items", {
			path: "/modelData",
			template : columnTemplate
		});

		oTable2.setHeaderToolbar(toolbarSelectDeselect);
		oFirstDialog.addContent(oTable2);
		//Adding the ok button
		oFirstDialog.addButton(new sap.m.Button({text: com.sap.xmii.common.util.MessageBundle.getText("XBUT_OK"),id:"okButton", press:function(){

			//For "DisplayColumns"
			if(oContext.getProperty("contextType") == 12 && oContext.getProperty("groupId") == 34){
				var updatedData = oTable2.getModel().getData().modelData;
				//Looping through the modelData
				for(var i =0 ; i < updatedData.length;i++){
					//Validating the width field
					if(validateIntegerField(updatedData[i].ColumnWidths) == false) return;
				}
				var names = null;
				//Variable to store selected values of Column Headings, width, format, alignment , show ass boolean
				var selectedColumnHeadings = null;
				var selectedColumnWidths = null;
				var selectedColumnFormats = null;
				var selectedColumnAlignments = null;
				var selectedShowColumnsAsBoolean = null;
				//Looping through the modelData
				for(var i =0 ; i < updatedData.length;i++){
					var obj = updatedData[i];
					//If the row is checked
					if(obj.checked) {
						// Create name string
						if(names == null)    
							names = obj.DisplayColumns;
						else
							names = names + ","+obj.DisplayColumns;
						
						//Create the selected Column Headings , width, format, alignment and show as boolean string
						if(selectedColumnHeadings == null || selectedColumnWidths == null || selectedColumnFormats == null || selectedColumnAlignments == null ||
								selectedShowColumnsAsBoolean == null){
							selectedColumnHeadings = obj.ColumnHeadings;
							selectedColumnWidths = obj.ColumnWidths;
							selectedColumnFormats = obj.ColumnFormats;
							selectedColumnAlignments = obj.ColumnAlignments;
							selectedShowColumnsAsBoolean = obj.ShowColumnsAsBoolean;
						} else {
							selectedColumnHeadings += "," + obj.ColumnHeadings;
							selectedColumnWidths += "," + obj.ColumnWidths;
							selectedColumnFormats += "," + obj.ColumnFormats;
							selectedColumnAlignments += "," + obj.ColumnAlignments;
							selectedShowColumnsAsBoolean += "," + obj.ShowColumnsAsBoolean;
						}
					}
				} 
				jQuery.extend(true, thisObj.displayColumns,aData);
				//Push the selected values
				pushToChangedParameters("ColumnHeadings",selectedColumnHeadings);
				pushToChangedParameters("ColumnWidths",selectedColumnWidths);
				pushToChangedParameters("ColumnFormats",selectedColumnFormats);
				pushToChangedParameters("ColumnAlignments",selectedColumnAlignments);
				pushToChangedParameters("ShowColumnsAsBoolean",selectedShowColumnsAsBoolean);
				
			} else if (oContext.getProperty().name == "SelectedTags" && isCatalogQuery){

				var updatedData = oTable2.getModel().getData().modelData;
				var names = null;
				var alias = null ;
				var queryColumns = null; 
				var selectedAlias = null;
				var valueColumns = null;
				//Looping through the modelData
				for (var i =0 ; i < updatedData.length;i++) {
					var obj = updatedData[i];
					//If the row is checked
					if (obj.checked) {
						// Create name ,selectedalias and valuecolumns string
						if(names == null)    
							names = obj.name;
						else
							names = names + ","+obj.name;
						selectedAlias == null ?	selectedAlias = obj.Alias : selectedAlias += "," + obj.Alias;
						if (obj.Alias != "") {
							valueColumns == null ? valueColumns = obj.Alias : valueColumns += "," + obj.Alias;
						} else {
							valueColumns == null ? valueColumns = obj.name : valueColumns += "," + obj.name;
						}
					}
					alias == null ? alias = obj.Alias : alias += "," + obj.Alias;
					queryColumns == null ? queryColumns = obj.name :queryColumns += "," + obj.name; 
					
				} 
				jQuery.extend(true, thisObj.selectedTags,aData);
				//Push the selected values
				pushToChangedParameters("SelectedAliases", selectedAlias);
				pushToChangedParameters("SelectedTags", names );
				pushToChangedParameters("ValueColumns", valueColumns , false , true);
				
			}else{
				var updatedData = oTable2.getModel().getData().modelData;
				var names = "";
				for(var i =0 ; i < updatedData.length;i++){
					var obj = updatedData[i];
					if(obj.checked){
						if(names == "")    names = obj.name;
						else
							names = names + ","+obj.name;
					}

				} 
			}
			oContext.getObject().propValue = names;
			pushToChangedParameters(oContext.getObject().name,oContext.getObject().propValue);
			//if oValueHelpField is not null
			//it will be null in case of Display Columns
			if(oValueHelpField != null){
				oValueHelpField.setValue(names);
			}
			oFirstDialog.close();
		}}));
		//Adding the cancel button
		oFirstDialog.addButton(new sap.m.Button({text:com.sap.xmii.common.util.MessageBundle.getText("ADD_CANCEL"),press:function(){
			var updatedData = oTable2.getModel().getData().modelData;
			for(var i = 0; i < updatedData.length;i++)
				updatedData[i].checked = oldData[i].checked;
			if(oContext.getProperty("contextType") == 12 && oContext.getProperty("groupId") == 34){
				resetDataForCancel("DisplayColumns");
			}else if(oContext.getProperty().name == "SelectedTags" && isCatalogQuery){
				resetDataForCancel("SelectedTags");
			}
			oFirstDialog.close();
		}}));
		enableSelectAllDeselectAll(oTable2 , oContext);
		//Getting the data to know the old values for all the fields
		var oldData = jQuery.extend(true, {}, oTable2.getModel().getData().modelData);
		//Opening the dialog
		oFirstDialog.open();
	}
	function selectAllColumns(oTable2){
		var updatedData = oTable2.getModel().getData().modelData;
		for(var i = 0; i < updatedData.length;i++)
			updatedData[i].checked = true;
		sap.ui.getCore().byId("DeselectAll").setEnabled(true);
		sap.ui.getCore().byId("SelectAll").setEnabled(false);
	}
	function deselectAllColumns(oTable2){
		var updatedData = oTable2.getModel().getData().modelData;
		for(var i = 0; i < updatedData.length;i++)
			updatedData[i].checked = false;
		sap.ui.getCore().byId("DeselectAll").setEnabled(false);
		sap.ui.getCore().byId("SelectAll").setEnabled(true);
	}
	function filterGroupParameter(groupData, determinedFileType) {
		//Removing the Data Mapping group for KPI
		if (determinedFileType == "KPI") {
			for (var k = 0; k < groupData.length; k++) {
				if (groupData[k].id == 17) {
					groupData.splice(k, 1);
				}
			}
		}else{
	    	for (var k = 0; k < groupData.length; k++) {
	    		if (groupData[k].id == 10 ) {
	    			for (var l = groupData[k].children.length - 1; l >= 0; l--) {
	    				//if the children is "Data Series" or "Pen Type", save it because in UI only this should not shown
	    				if (groupData[k].children[l].name == "SelectedAliases" || groupData[k].children[l].name == "SelectedObjects") {
	    					groupData[k].children.splice(l, 1);
	    				}
	    			}
	    		}
	    	}
		}
		//Removing all the other properties for Data Series Details except DataSeries
		if(thisObj.getChartTemplateObject().chartConfig.Type == "i5Chart" ){
			var dataSeriesData =[];
			//Looping through the groupRowData 
			for(var k = 0; k < groupData.length; k++){
				//Group id 52 is for Data Series details
				if(groupData[k].id == 52){
					//Looping through the children
					for(var l = 0 ; l<groupData[k].children.length ; l++){
						//if the children is "Data Series" or "Pen Type", save it because in UI only this should not shown
						if(groupData[k].children[l].contextType == 35 ||  groupData[k].children[l].contextType == 36){
							//Storing all the children except the "Data Series" and "Pen Type" to dataSeriesData 
							 jQuery.merge(dataSeriesData, groupData[k].children.slice(l, l+1));
						}
					}
					//Setting the new children having only "Data Series" and "Pen Type"
					groupData[k].children = dataSeriesData;
					break;
				}
			}
			//Removing Transaction Parameters if it is a virtual tag mapped on 3d image/if there are multiple virtual tags 
			//placed on the cell
			if(thisObj.getQueryObject().getParameter("VirtualTagID") == undefined){
				for(var k = 0; k < groupData.length; k++){
					//Group id is 62 for Transaction Parameters
					if(groupData[k].id == 62){
						groupData.splice(k,1);
						break;
					}
				}
			}
		}
		//Removing display Columns group data
		if(thisObj.getChartTemplateObject().chartConfig.Type == "i5Grid"){
			for(var k = 0; k < groupData.length; k++){
				if(groupData[k].id ==  53){
					groupData.splice(k,1);
				}
			}
		}

	}
	function createRow(oContext, paramListItem, dateFormatter){
		var context = oContext.getProperty("contextType");
		var dataType = oContext.getProperty("dataType");
		var content;
		var re = new RegExp("[0-9]");
		var decimalCheck = new RegExp("[0-9]+\.[0-9]+");
		var parameterName = new sap.m.Label({text:oContext.getProperty("name")});
		var parameterDesc = new sap.m.Label({text:oContext.getProperty("localizedDescription")});
		var groupName = new sap.m.Label({text:oContext.getProperty("groupName")});
		
		var propName = oContext.getProperty("name");
		var flag = false;
		
		//polyfill for includes js
		if (!String.prototype.includes) {
		     String.prototype.includes = function() {
		         'use strict';
		         return String.prototype.indexOf.apply(this, arguments) !== -1;
		     };
		}
		
		if(propName.indexOf(".2")!=-1){
			var flag = true;
			var propName = propName.replace(".2","");
		}
		//var getterMethodName = "get"+oContext.getProperty("name");
		var getterMethodName = "get"+propName;
		var overriddenValue = "";
		if(isQueryParams == true){
			if(oContext.getProperty("contextType") != com.sap.xmii.common.util.PARAM_CONTEXT.TAG_SELECTION)
				overriddenValue = thisObj.getQueryObject().overrides[oContext.getProperty("name")];
		}else{
			if(thisObj.getChartTemplateObject().chartConfig.Type  == "i5Grid"){
				if(oContext.getProperty("contextType") != com.sap.xmii.common.util.PARAM_CONTEXT.COLOR_CONTEXT ){
					overriddenValue = thisObj.getGridObject()[getterMethodName]();
				}
			}else{
				if(oContext.getProperty("contextType") != com.sap.xmii.common.util.PARAM_CONTEXT.DATA_SERIES && 
						oContext.getProperty("contextType") != com.sap.xmii.common.util.PARAM_CONTEXT.PEN_TYPE)
					if(flag)
						overriddenValue = thisObj.getChartObject()[getterMethodName](2);
					else
						overriddenValue = thisObj.getChartObject()[getterMethodName]();
			}
		}
		if(overriddenValue  !== undefined && overriddenValue  !== "")
			oContext.getObject().propValue = overriddenValue;
		
		if(dataType == com.sap.xmii.common.util.PARAM_DATA_TYPE.NUMERIC){  // If DataType is Numeric
			if(context == com.sap.xmii.common.util.PARAM_CONTEXT.STRING_NONE){
				content = new sap.m.Input({
					value : oContext.getProperty("propValue"),
					ariaDescribedBy : parameterDesc,
					ariaLabelledBy : parameterName,
					liveChange : function(oEvent){
						var _liveChange = oEvent.getParameter("newValue");
						if(!isNaN(_liveChange) && _liveChange.indexOf(".") == -1) {
							content.setValueState(sap.ui.core.ValueState.None);
							sap.ui.getCore().byId("queryApplyButton").setEnabled(true);
						} else {
							content.setValueState(sap.ui.core.ValueState.Error);
							sap.ui.getCore().byId("queryApplyButton").setEnabled(false);
						}
						oContext.getObject().propValue = content.getValue();
					},
					change : function(){
						oContext.getObject().propValue = content.getValue();
						pushToChangedParameters(oContext.getObject().name , oContext.getObject().propValue);
					}
				});
				oContext.getObject().propValue = content.getValue();
			}
		} else if(dataType == com.sap.xmii.common.util.PARAM_DATA_TYPE.DECIMAL) { //dataType -> Decimal
			content = new sap.m.Input({
				value : oContext.getProperty("propValue"),
				ariaDescribedBy : parameterDesc,
				ariaLabelledBy : parameterName,
				liveChange : function(oEvent) {
					var _liveChange = oEvent.getParameter("newValue");
					if((!isNaN(_liveChange) && _liveChange.match(decimalCheck)) || (!isNaN(_liveChange) && _liveChange.indexOf(".") == -1)) {
						content.setValueState(sap.ui.core.ValueState.None);
						sap.ui.getCore().byId("queryApplyButton").setEnabled(true);				
					} else {
						content.setValueState(sap.ui.core.ValueState.Error);
						sap.ui.getCore().byId("queryApplyButton").setEnabled(false);				
					}
					oContext.getObject().propValue = content.getValue();
				},
				change: function() {
					oContext.getObject().propValue = content.getValue();
					pushToChangedParameters(oContext.getObject().name , oContext.getObject().propValue);
				}
			});
			oContext.getObject().propValue = content.getValue();
		} else if ( dataType == com.sap.xmii.common.util.PARAM_DATA_TYPE.BOOLEAN) { //dataType -> Boolean
			content = new sap.m.Select({tooltip:com.sap.xmii.common.util.MessageBundle.getText("XLBL_PARAM_VALUE"),
				width : "100%",
				ariaDescribedBy : parameterDesc,
				ariaLabelledBy : parameterName,
				selectedKey: oContext.getObject().propValue,
				change : function(){
				oContext.getObject().propValue = content.getSelectedKey().trim();
				pushToChangedParameters(oContext.getObject().name , oContext.getObject().propValue , true);
			}
			});
			if(oContext.getObject().propValue == "") {
				var oItem = new sap.ui.core.ListItem();
				oItem.setText("");
				oItem.setKey("");
				content.addItem(oItem);			
			}
			if(context == com.sap.xmii.common.util.PARAM_CONTEXT.STRING_NONE ){ // Default context
				var oItem = new sap.ui.core.ListItem();
				oItem.setText(com.sap.xmii.common.util.MessageBundle.getText("XLBL_TRUE"));
				oItem.setKey("true");
				content.addItem(oItem);

				oItem = new sap.ui.core.ListItem();
				oItem.setText(com.sap.xmii.common.util.MessageBundle.getText("XLBL_FALSE"));
				oItem.setKey("false");
				content.addItem(oItem);
			}
		} else if(dataType == com.sap.xmii.common.util.PARAM_DATA_TYPE.TIMESTAMP){ // DataType --> TimeStamp

			content = new sap.ui.commons.layout.MatrixLayout();
			var datePicker = new sap.m.DatePicker({valueFormat : "yyyyMMdd", ariaDescribedBy : parameterDesc, ariaLabelledBy : parameterName}).addStyleClass("parameterValue");
			var timeField = new sap.m.Input({ariaDescribedBy : parameterDesc, ariaLabelledBy : parameterName,value:"00:00:00"}).addStyleClass("parameterValue");
			datePicker.attachChange(
				function(oEvent){
					if(oEvent.getParameter("invalidValue")){
						oEvent.oSource.setValueState(sap.ui.core.ValueState.Error);
					}else{
						oEvent.oSource.setValueState(sap.ui.core.ValueState.None);
					}
					oContext.getObject().propValue = applyDateTime(datePicker,timeField);
					pushToChangedParameters(oContext.getObject().name , oContext.getObject().propValue);
				}
			);
			timeField.attachLiveChange(
					function(oEvent){
						var live = oEvent.getParameter("newValue");
						var reg = new RegExp("^(0?[0-9]|1[0-2]):[0-5][0-9]:[0-5][0-9]$");
						if(live.match(reg) || live == ""){
							oEvent.oSource.setValueState(sap.ui.core.ValueState.None);
							sap.ui.getCore().byId("queryApplyButton").setEnabled(true);
							timeField.setValue(live);
						}else{
							oEvent.oSource.setValueState(sap.ui.core.ValueState.Error);
							sap.ui.getCore().byId("queryApplyButton").setEnabled(false);
						}
						oContext.getObject().propValue = applyDateTime(datePicker,timeField);
						pushToChangedParameters(oContext.getObject().name , oContext.getObject().propValue);
					}
			);
			if(oContext.getProperty("propValue") != ""){
//				var sd = com.sap.xmii.common.util.MIIi5Util.formatDateTime( com.sap.xmii.common.util.MIIi5Util.getDateFormatter(com.sap.xmii.common.util.dateFormats.XML_FORMAT_TIMEZONE_OFFSET), oContext.getObject().propValue);
				var formattedDate = com.sap.xmii.common.util.MIIi5Util.formatDate(oContext.getProperty("propValue"),dateFormatter, com.sap.xmii.common.util.dateFormats.XML_FORMAT_TIMEZONE_OFFSET);
				datePicker.setValue(getYyyymmdd(formattedDate));

				//set the start time text box on change of chart data
				timeField.setValue(getHHmmss(formattedDate));
			}

			content.createRow(new sap.ui.commons.layout.MatrixLayoutCell().addContent(datePicker).addStyleClass("datePicker")
					,new sap.ui.commons.layout.MatrixLayoutCell().addContent(timeField).addStyleClass("inputField"));
		} else if (dataType == com.sap.xmii.common.util.PARAM_DATA_TYPE.STRING) {  // If DataType is String
			if(context == com.sap.xmii.common.util.PARAM_CONTEXT.STRING_NONE) {  
				content = new sap.m.Input({value:oContext.getProperty("propValue"),
					ariaDescribedBy : parameterDesc,
					ariaLabelledBy : parameterName,
					liveChange:function(oEvent){
						var _liveChange = oEvent.getParameter("newValue");
						oContext.getObject().propValue = content.getValue();
						if( _liveChange.match(/"/g) != null) {
							content.setValueState(sap.ui.core.ValueState.Error);
							sap.ui.getCore().byId("queryApplyButton").setEnabled(false);				
						} else {
							content.setValueState(sap.ui.core.ValueState.None);
							sap.ui.getCore().byId("queryApplyButton").setEnabled(true);				
						}
					},
					change: function(){
						oContext.getObject().propValue = content.getValue();
						pushToChangedParameters(oContext.getObject().name , oContext.getObject().propValue);
					}
				});
				oContext.getObject().propValue = content.getValue();
			} else  if(context == com.sap.xmii.common.util.PARAM_CONTEXT.QUERY_COLUMNS){
				//custom control
				var needValuesFromService = true;
				if(thisObj.getQueryTemplate() == "Predefined/DefaultCatalogHistoryQuery"){
					needValuesFromService = false;
				}
				var Param = {};
				var defaultValue = oContext.getProperty("defaultPropValue");
				if(defaultValue != "NA") {
					var defaultValuesArray = defaultValue.split(',');
				} else {
					var defaultValuesArray =[];
				}
				var currentValue = oContext.getObject().propValue;
				var currentValuesArray = [];

				if(currentValue !== null && currentValue !== undefined && currentValue != "")
					currentValuesArray = currentValue.split(',');
				else
					currentValuesArray =  oContext.getObject().defaultPropValue.split(',');
				//For display columns the button should be created
				//otherwise value help
				if(oContext.getProperty("name") == "DisplayColumns") {
					content = new sap.m.Button({
						text: com.sap.xmii.common.util.MessageBundle.getText("XLBL_CONFIG_DISP_COL"),
						ariaDescribedBy : parameterDesc,
						ariaLabelledBy : parameterName,
						press: function(){
							//get the data to populate the table
							openMultipleSelectValueHelp(aData,null, oContext);	
						}
					}).addStyleClass("sapUiSizeCompact");
				} else {
					content = new sap.m.Input({
						showValueHelp : true,
						value: oContext.getObject().propValue,
						ariaDescribedBy : parameterDesc,
						ariaLabelledBy : parameterName,
						valueHelpRequest: function(){
							//get the data to populate the table
							openMultipleSelectValueHelp(aData,content, oContext);	
						},
						change : function(){
							oContext.getObject().propValue = content.getValue();
							pushToChangedParameters(oContext.getObject().name , oContext.getObject().propValue);
						}
					});
				}
				var aData = []; 
				if(needValuesFromService){
					if(oContext.getProperty().name == "SelectedTags" || oContext.getProperty().name == "SelectedColumns") {
						//Checking for catalog query
						var isCatalogQuery = thisObj.getQueryObject().getQueryType() == "CatalogQuery";
						if(!(oContext.getProperty().name == "SelectedTags" && isCatalogQuery)){
							var param = {"Mode":"QueryColumns","objectname":thisObj.getQueryTemplate(),"content-type":"text/json"};
							var parameters = com.sap.xmii.common.util.MIIi5Util.getServiceResponseInJson(com.sap.xmii.common.util.GenericConstants.CECATALOG_URL, param);
							var tempParam = [];
							tempParam = parameters.Rowsets.Rowset[0].Row;
							var oItem;
							if(tempParam != undefined) {
								for(var j = 0 ; j< tempParam.length; j++){
									if(oContext.getProperty("propValue") == tempParam[j].Key)
										content.setValue(tempParam[j].Value);
									var checked = false;
									for(var i = 0; i< currentValuesArray.length; i++){
										if(tempParam[j].Key == currentValuesArray[i])
											checked = true;	
									}
									aData.push({name:tempParam[j].Key, checked:checked});
								}
							}
						}
					} else if(oContext.getProperty().name == "SelectedDimensions"){
						//Getting the selected dimension of the Query
						var param = {};
						var selectedDimension = thisObj.getQueryObject().getParameter("Attributes").replace(/[\[\]]+/g,"");

						//Removing the [ and ]
						oContext.getObject().propValue = oContext.getProperty("propValue").replace(/[\[\]]+/g,"");
						content.setValue(oContext.getObject().propValue);
						//Looping throught the value array to set the checked property
						var valueArray = oContext.getObject().propValue.split(",");
						for(var j = 0 ; j< selectedDimension.length; j++){
							var checked = false;
							if(oContext.getProperty("propValue") != ""){
								for(index in valueArray){
									if(selectedDimension[j].Name == valueArray[index])
										checked = true;
								}
							}else{
								value = value + row.Name+",";
							}
							//pushing data to aData array
							aData.push({name:row.Name, checked:checked});
						}
						//If Context value is not given, set the selected dimension to context's defualt value
						if(com.sap.xmii.common.util.MIIi5Util.isObjectNotNull(value)){
							oContext.getObject().defaultPropValue = value.substring(0,value.length - 1);
						}
					}else {
						//Following code is make sure if selectedTags is changed then all the selectedTags values should display as a Value columns
						if (oContext.getProperty().name == "ValueColumns" && thisObj.selectedTags != undefined &&
								thisObj.selectedTags != null && thisObj.getQueryObject().getParameter("SelectedTags")!= undefined ) {
							currentValuesArray = thisObj.getChartTemplateObject().getProperty("ValueColumns").split(",");
							defaultValuesArray = thisObj.getQueryObject().getParameter("SelectedTags").split(",");
							var selectedAliases = thisObj.getQueryObject().getParameter("SelectedAliases");
							if(selectedAliases != undefined) {
								selectedAliases = thisObj.getQueryObject().getParameter("SelectedAliases").split(",");
								// in case alias is given, set the valueArray for this
								for(index in selectedAliases){
									if(selectedAliases[index] != ""){
										defaultValuesArray[index] = selectedAliases[index];
									}
								}
							}
						}
						//creating the data by comparing currentValueArray and valueArray to set checked property
						if(defaultValuesArray.toString() != ""){
							for(var index in defaultValuesArray){
								var checked = false;
								for(index1 in currentValuesArray){
									if(defaultValuesArray[index] == currentValuesArray[index1])
										checked = true;
								}
								aData.push({name:defaultValuesArray[index], checked:checked});
							}
						}
					}
				}else{
					var valueArray = thisObj.getChartTemplateObject().getProperty("ValueColumns").split(",");
					if(oContext.getObject().name == "SelectedTags"){
						//For the catalog query, 
						var isCatalogQuery = thisObj.getQueryObject().getQueryType() == "CatalogQuery";
						if(!isCatalogQuery){
							if(currentValuesArray != null && currentValuesArray.length > 0){
								for(var index in valueArray){
									var checked = false;
									for(var index1 in currentValuesArray){
										if(valueArray[index] == currentValuesArray[index1])
											checked = true;							
									}
									aData.push({name:valueArray[index], checked:checked});		
								}
							}
							content.setValue(currentValuesArray.toString());
						}
					}else if(oContext.getObject().name == "LabelColumns"){
						aData.splice(0, aData.length);
						content.setValue("DateTime");
						aData.push({name:"DateTime", checked : true});
					}else{
						//Following code is make sure if selectedTags is changed then all the selectedTags values should display as a Value columns
						if (oContext.getProperty().name == "ValueColumns" && thisObj.selectedTags != undefined && thisObj.selectedTags != null  ) {
							currentValuesArray = thisObj.getChartTemplateObject().getProperty("ValueColumns").split(",");
							valueArray = thisObj.getQueryObject().getParameter("SelectedTags").split(",");
							var selectedAliases = thisObj.getQueryObject().getParameter("SelectedAliases");
							if(selectedAliases != undefined) {
								selectedAliases = thisObj.getQueryObject().getParameter("SelectedAliases").split(",");
								// in case alias is given, set the valueArray for this
								for(index in selectedAliases){
									if(selectedAliases[index] != ""){
										valueArray[index] = selectedAliases[index];
									}
								}
							}
							//creating the data by comparing currentValueArray and valueArray to set checked property
							if(currentValuesArray != null && currentValuesArray.length > 0){
								for(var index in valueArray){
									var checked = false;
									for(var index1 in currentValuesArray){
										if(valueArray[index] == currentValuesArray[index1])
											checked = true;							
									}
									aData.push({name:valueArray[index], checked:checked});		
								}
							}
						
						} else {
							for(var i = 0 ; i <valueArray.length ;i++){
								aData.push({name:valueArray[i], checked:true});
							}
						}
						content.setValue(valueArray.toString());
					}
				}
			} else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.COLOR_INDICATOR){//For Color indicator
				var colorIndicatorJSON = {"Type" : "ColorIndicator"};
				//Creation of button
				content = new sap.m.Button({
					ariaDescribedBy : parameterDesc,
					ariaLabelledBy : parameterName,
					text : com.sap.xmii.common.util.MessageBundle.getText("XLBL_CONFIGURE_COLOR_INDICATOR"),
					press : function(){openConfigureStructuralParameters(colorIndicatorJSON , oContext);}
				});
			} else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.DATA_SERIES){//For Data Series
				var dataSeriesJSON = {"Type" : "DataSeries"};
				//Creation of button
				content = new sap.m.Button({
					ariaDescribedBy : parameterDesc,
					ariaLabelledBy : parameterName,
					text : com.sap.xmii.common.util.MessageBundle.getText("XLBL_CONFIGURE_DATA_SERIES"),
					press : function(){openConfigureStructuralParameters(dataSeriesJSON , oContext);}
				});
			} else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.PEN_TYPE){//For Pen Type
				var dataSeriesJSON = {"Type" : "PenType"};
				//Creation of button
				content = new sap.m.Button({
					ariaDescribedBy : parameterDesc,
					ariaLabelledBy : parameterName,
					text : com.sap.xmii.common.util.MessageBundle.getText("XLBL_CONFIGURE_PEN_TYPE"),
					press : function(){openConfigureStructuralParameters(dataSeriesJSON , oContext);}
				});
			} else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.COLOR_CONTEXT){//For Pen Type
				var dataSeriesJSON = {"Type" : "ColorContext"};
				//Creation of button
				content = new sap.m.Button({
					ariaDescribedBy : parameterDesc,
					ariaLabelledBy : parameterName,
					text : com.sap.xmii.common.util.MessageBundle.getText("XLBL_CONFIGURE_COLOR_CONTEXT"),
					press : function(){openConfigureStructuralParameters(dataSeriesJSON , oContext);}
				});
			} //For Tag Selection
			else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.TAG_SELECTION){
				var tagSelectionJSON = {"Type" : "TagSelection"};
				//Creation of button
				content = new sap.ui.commons.Button({
					width: "100%",
					ariaDescribedBy : parameterDesc,
					ariaLabelledBy : parameterName,
					text : com.sap.xmii.common.util.MessageBundle.getText("XLBL_CONFIGURE_TAG_SELECTION"),
					tooltip : com.sap.xmii.common.util.MessageBundle.getText("XLBL_CONFIGURE_ANALYSIS_SCOPE"),
					press : function(){openConfigurePICAnalysisParameters(tagSelectionJSON , oContext );}
				});
				//To set the user Parameter field disabled
				userParameterEnabled = false;
			}//For Production Event Analysis Scope
			else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.SCOPE_PE_EXP){
				var analysisScopeJSON = {"Type" : "ScopePeColExpression"};
				//Creation of button
				content = new sap.ui.commons.Button({
					width: "100%",
					ariaDescribedBy : parameterDesc,
					ariaLabelledBy : parameterName,
					text : oBundle.getText("XLBL_CONFIGURE_PE_COL_SCOPE"),
					tooltip :  oBundle.getText("XLBL_CONFIGURE_PE_COL_SCOPE"),
					press : function(){openConfigurePICAnalysisParameters(analysisScopeJSON , oContext);}
				});
				//To set the user Parameter field disabled
				userParameterEnabled = true;
			}
			//For KPI dimension
			else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.SCOPE_KPI_DIM_EXP){
				var kpiDimensionJSON = {"Type" : "ScopeDimColExpression"};
				//Creation of button
				content = new sap.ui.commons.Button({
					width : "100%",
					ariaDescribedBy : parameterDesc,
					ariaLabelledBy : parameterName,
					text : oBundle.getText("XLBL_CONFIGURE_KPI_DIM_SCOPE"),
					tooltip :  oBundle.getText("XLBL_CONFIGURE_KPI_DIM_SCOPE"),
					press : function(){openConfigurePICAnalysisParameters(kpiDimensionJSON , oContext);}
				});
				//To set the user Parameter field disabled
				userParameterEnabled = true;
			}
			//For Selected group categories
			else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.SELECTED_GROUP_CATE){

				var aData = [];
				content = new sap.m.Input({
					showValueHelp : true,
					value: oContext.getObject().Value,
					ariaDescribedBy : parameterDesc,
					ariaLabelledBy : parameterName,
					valueHelpRequest: function(){
					openMultipleSelectValueHelp(aData,content, oContext);	

				},
				change : function(){
					oContext.getObject().propValue = this.getValue();
					oContext.getObject().isChanged = true;
				}
				});
				
				getPICAnaysisCommonData();
				
				var nodeArray = thisObj.picAnalysisParam["Categories"];
				var valueArray = oContext.getObject().propValue.split(",");

				for(var index in nodeArray){
					var checked = false;
					for(index1 in valueArray){
						if(nodeArray[index].Name == valueArray[index1])
							checked = true;
					}
					aData.push({name:nodeArray[index].Name, checked:checked});
				}
				content.setValue(oContext.getProperty("propValue"));
			
			}
			//For Node Selection Expression
			else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.NODE_SEL_EXP){
				var nodeSelectionJSON = {"Type" : "NodeSelectionExpression"};

				//Creation of button
				content = new sap.ui.commons.Button({
					width: "100%",
					ariaDescribedBy : parameterDesc,
					ariaLabelledBy : parameterName,
					text : com.sap.xmii.common.util.MessageBundle.getText("XLBL_CONFIGURE_NODE_SELECTION"),
					tooltip :  com.sap.xmii.common.util.MessageBundle.getText("XLBL_CONFIGURE_NODE_SELECTION"),
					press : function(){openConfigurePICAnalysisParameters(nodeSelectionJSON , oContext);}
				});
				//To set the user Parameter field disabled
				userParameterEnabled = true;
			}
			//For Selected Nodes
			else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.SELECTED_NODES){
				var nodeSelectionJSON = {"Type" : "SelectedNodes"};
				//Creation of button
				content = new sap.ui.commons.Button({
					width: "100%",
					ariaDescribedBy : parameterDesc,
					ariaLabelledBy : parameterName,
					text : com.sap.xmii.common.util.MessageBundle.getText("XLBL_CONFIGURE_SEL_NODE"),
					tooltip :  com.sap.xmii.common.util.MessageBundle.getText("XLBL_CONFIGURE_SEL_NODE"),
					press : function(){openConfigurePICAnalysisParameters(nodeSelectionJSON , oContext);}
				});
				//To set the user Parameter field disabled
				userParameterEnabled = true;
			}
			else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.SCOPE_PROP_EXP){
				var analysisScopeJSON = {"Type" : "ScopePropertyExpression"};
				//Creation of button
				content = new sap.ui.commons.Button({
					width: "100%",
					ariaDescribedBy : parameterDesc,
					ariaLabelledBy : parameterName,
					text : com.sap.xmii.common.util.MessageBundle.getText("XLBL_CONFIGURE_ANALYSIS_SCOPE"),
					tooltip :  com.sap.xmii.common.util.MessageBundle.getText("XLBL_CONFIGURE_ANALYSIS_SCOPE"),
					press : function(){openConfigurePICAnalysisParameters(analysisScopeJSON , oContext);}
				});
				//To set the user Parameter field disabled
				userParameterEnabled = true;
			}
			//For Secondary dimension
			else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.SEL_GROUP_BY_PROP){
				var secondaryDimensionJSON = {"Type" : "SelectedGroupByProperties"};
				//Creation of button
				content = new sap.ui.commons.Button({
					width: "100%",
					ariaDescribedBy : parameterDesc,
					ariaLabelledBy : parameterName,
					text : com.sap.xmii.common.util.MessageBundle.getText("XLBL_CONFIGURE_SECONDARY_DIMENSION"),
					tooltip :  com.sap.xmii.common.util.MessageBundle.getText("XLBL_CONFIGURE_SECONDARY_DIMENSION"),
					press : function(){openConfigurePICAnalysisParameters(secondaryDimensionJSON , oContext);}
				});
				//To set the user Parameter field disabled
				userParameterEnabled = true;
			}else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.AGGREGATION_MODE){
				var aData = [];
				content = new sap.m.Input({
					showValueHelp : true,
					value: oContext.getObject().Value,
					ariaDescribedBy : parameterDesc,
					ariaLabelledBy : parameterName,
					valueHelpRequest: function(){
					openMultipleSelectValueHelp(aData,content, oContext);	

				},
				change : function(){
					oContext.getObject().propValue = this.getValue();
					oContext.getObject().isChanged = true;
				}
				});

				//Creation of data
				var aggregationArray = com.sap.xmii.common.util.AGGREGATION_LOGIC;
				var valueArray = oContext.getObject().propValue.toString().split(",");

				for(var index in aggregationArray){
					var checked = false;
					for(index1 in valueArray){
						if(aggregationArray[index] == valueArray[index1])
							checked = true;
					}
					aData.push({name:aggregationArray[index], checked:checked});
				}
			}else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.OPACITY){
				var val = oContext.getObject().Value;
				if(!com.sap.xmii.common.util.MIIi5Util.isObjectNotNull(val)){
					val = "1.0";
				}
				var content = new sap.ui.commons.Slider({
					ariaDescribedBy : parameterDesc,
					ariaLabelledBy : parameterName,
					//tooltip: oBundle.getText("XCKL_OPACITY"),
					min: 0,
					max: 100,
					value: (parseFloat(val)*100),
					totalUnits: 10,
					smallStepWidth: 10,
					change : function(){
					oContext.getObject().Value = (this.getValue()/100);
					oContext.getObject().isChanged = true;
				}}
				);
			}
			else {
				content = new sap.m.Select({tooltip:com.sap.xmii.common.util.MessageBundle.getText("XLBL_PARAM_VALUE"),
					width : "100%",
					ariaDescribedBy : parameterDesc,
					ariaLabelledBy : parameterName,
					selectedKey : oContext.getObject().propValue,
					change : function(){
						oContext.getObject().propValue = content.getSelectedKey().trim();
						pushToChangedParameters(oContext.getObject().name , oContext.getObject().propValue);
					}
				});
					var oItem = new sap.ui.core.ListItem();
					oItem.setText("");
					oItem.setKey("");
					content.addItem(oItem);
					
				if(context == com.sap.xmii.common.util.PARAM_CONTEXT.FONT_STYLE) {  // Context --> Font Style
					var fontStyles = com.sap.xmii.common.util.FONT_STYLE.split(",");
					for(var j = 0 ; j < fontStyles.length; j++) {
						oItem = new sap.ui.core.ListItem();
						oItem.setText(fontStyles[j]);
						if(fontStyles[j] == "Plain")
							oItem.setKey("0");
						else if(fontStyles[j] == "Bold")
							oItem.setKey("1");
						else if(fontStyles[j] == "Italic")
							oItem.setKey("2");
						else if(fontStyles[j] == "Bold Italic")
							oItem.setKey("3");
						content.addItem(oItem);
						content.setValue(fontStyles[oContext.getProperty("propValue")]);
					}
				} else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.FONT_FACE) {  // Context --> Font Face
					if(thisObj.getChartTemplateObject().chartConfig.Type == "i5Chart" || thisObj.getChartTemplateObject().chartConfig.Type == "i5SPCChart")
						var fontFace = com.sap.xmii.common.util.UI5_FONT_FACE.split(",");
					else
						var fontFace = com.sap.xmii.common.util.FONT_FACE.split(",");
					for(var j = 0 ; j < fontFace.length; j++) {
						oItem = new sap.ui.core.ListItem();
						oItem.setText(fontFace[j]);
						oItem.setKey(fontFace[j]);
						content.addItem(oItem);
					}
					content.setValue(oContext.getProperty("propValue"));
				} else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.MARKER_STYLE) {  // Context --> Marker Style
					var markerStyle = com.sap.xmii.common.util.MARKER_STYLE;
					for(j = 0 ; j < markerStyle.length; j++) {
						oItem = new sap.ui.core.ListItem();
						oItem.setText(markerStyle[j]);
						if(markerStyle[j].indexOf("(") != -1){
							key = markerStyle[j].substring(0, markerStyle[j].indexOf("("));
							key = key.trim();
							oItem.setKey(key);
						}
						content.addItem(oItem);
						content.setValue(markerStyle[oContext.getProperty("propValue")-1]);
					}
				} else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.ITEM_SELECTION) {  // Context --> Item Selection
					var itemSelection = com.sap.xmii.common.util.ITEM_SELECTION.split(",");
					for(j = 0 ; j < itemSelection.length; j++) {
						oItem = new sap.ui.core.ListItem();
						oItem.setText(itemSelection[j]);
						if(itemSelection[j].indexOf("(") != -1){
							key = itemSelection[j].substring(0, itemSelection[j].indexOf("("));
							key = key.trim();
							oItem.setKey(key);
						}
						content.addItem(oItem);
						content.setValue(itemSelection[oContext.getProperty("propValue")]);
					}				
				} else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.DATE_FORMAT){   // Context --> Date Format
					var dateFormats = com.sap.xmii.common.util.DATE_FORMATS.split(",");
					for(var j = 0 ; j< dateFormats.length; j++){
						oItem = new sap.ui.core.ListItem();
						oItem.setText(dateFormats[j]);
						oItem.setKey(dateFormats[j]);
						content.addItem(oItem);
					}
					content.setValue(oContext.getProperty("propValue"));
				} else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.TIME_FORMAT){   // Context --> Time Format
					var timeFormats = com.sap.xmii.common.util.TIME_FORMATS.split(",");
					for(var j = 0 ; j< timeFormats.length; j++){
						oItem = new sap.ui.core.ListItem();
						oItem.setText(timeFormats[j]);
						oItem.setKey(timeFormats[j]);
						content.addItem(oItem);
					}
					content.setValue(oContext.getProperty("propValue"));
				} else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.NUMBER_FORMAT){   // Context --> Number Format
					var numberFormats = com.sap.xmii.common.util.NUMBER_FORMATS.split(",");

					for(var j = 0 ; j< numberFormats.length; j++){
						oItem = new sap.ui.core.ListItem();
						oItem.setText(numberFormats[j]);
						oItem.setKey(numberFormats[j]);
						content.addItem(oItem);
					}
					if(oContext.getProperty("propValue") != null)
						content.setValue(oContext.getProperty("propValue"));
				} else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.ALIGNMENT) {  // Context --> Alignment/Text Position
					var alignment = com.sap.xmii.common.util.ALIGNMENT;
					for(var j = 0 ; j< alignment.length; j++){
						oItem = new sap.ui.core.ListItem();
						oItem.setText(alignment[j]);
						oItem.setKey(alignment[j]);
						content.addItem(oItem);
					}				
					content.setValue(oContext.getProperty("propValue"));
				} else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.DATE_TIME_FORMAT) {  // Context --> DateTimeFormats
					var dateFormats = com.sap.xmii.common.util.VALID_DATE_TIME_FORMATS.split(",");
					for(var j = 0 ; j< dateFormats.length; j++){
						oItem = new sap.ui.core.ListItem();
						oItem.setText(dateFormats[j]);
						oItem.setKey(dateFormats[j]);
						content.addItem(oItem);
					}
					content.setValue(oContext.getProperty("propValue"));
				} else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.COLOR) {  // Context --> Color Picker
					content = new com.sap.mii.ui.composite.TagColorPicker({buttonId :"queryApplyButton"}).addStyleClass("colorPicker");
					content.setHexcode(oContext.getObject().propValue);
					content.addEventDelegate({
						onAfterRendering: function(oEvent){
						pushToChangedParameters(oContext.getProperty("name"),this.getHexcode());
						oContext.getObject().propValue =  content.getHexcode();
					}
					}, content);
				} else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.TEXT_ORIENTATION) {  // Context --> Text Orientation
					var textOrientation = com.sap.xmii.common.util.TEXT_ORIENTATION.split(",");
					for(var j = 0 ; j < textOrientation.length ; j++){
						oItem = new sap.ui.core.ListItem();
						oItem.setText(textOrientation[j]);
						oItem.setKey(textOrientation[j]);
						content.addItem(oItem);
					}
					content.setValue(oContext.getProperty("propValue"));
				} else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.LEGEND_ORIENTATION) {  // Context --> Legend Orientation
					var legendOrientation = com.sap.xmii.common.util.LEGEND_ORIENTATION.split(",");
					for(var j = 0 ; j < legendOrientation.length ; j++){
						oItem = new sap.ui.core.ListItem();
						oItem.setText(legendOrientation[j]);
						oItem.setKey(legendOrientation[j]);
						content.addItem(oItem);
					}				
					content.setValue(oContext.getProperty("propValue"));
				} else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.ROTATION_ANGLE) {  // Context --> RotationAngle
					var rotationAngle = com.sap.xmii.common.util.ROTATION_ANGLE.split(",");
					for(var j = 0 ; j < rotationAngle.length ; j++){
						oItem = new sap.ui.core.ListItem();
						oItem.setText(rotationAngle[j]);
						oItem.setKey(rotationAngle[j]);
						content.addItem(oItem);
					}								
					content.setValue(oContext.getProperty("propValue"));
				} else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.I5CHART_ROTATION_ANGLE) {  // Context --> RotationAngle
					var rotationAngle = com.sap.xmii.common.util.I5CHART_ROTATION_ANGLE.split(",");
					for(var j = 0 ; j < rotationAngle.length ; j++){
						oItem = new sap.ui.core.ListItem();
						oItem.setText(rotationAngle[j]);
						oItem.setKey(rotationAngle[j]);
						content.addItem(oItem);
					}								
					content.setValue(oContext.getProperty("propValue"));
				} else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.LINE_STYLE){   // Context --> LineStyles
					var lineStyles = com.sap.xmii.common.util.LINE_STYLES;
					for(var j = 0 ; j < lineStyles.length ; j++){
						oItem = new sap.ui.core.ListItem();
						oItem.setText(lineStyles[j]);
						oItem.setKey(lineStyles[j]);
						content.addItem(oItem);					
					}
					content.setValue(oContext.getProperty("propValue"));
				} else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.VERTICAL_MARKER_LINE_STYLE){   // Context --> VerticalMarkerLineType
					var verticalMarkerLineType = com.sap.xmii.common.util.VERTICAL_MARKER_LINE_TYPE.split(",");
					for(var j = 0 ; j < verticalMarkerLineType.length ; j++){
						oItem = new sap.ui.core.ListItem();
						oItem.setText(verticalMarkerLineType[j]);
						oItem.setKey(verticalMarkerLineType[j]);
						content.addItem(oItem);					
					}				
					content.setValue(oContext.getProperty("propValue"));
				} else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.PEN_TYPE_1){   // Context --> PenTypes
					var penType = com.sap.xmii.common.util.PEN_TYPE;
					for(var j = 0 ; j < penType.length ; j++){
						oItem = new sap.ui.core.ListItem();
						oItem.setText(penType[j]);
						oItem.setKey(penType[j]);
						content.addItem(oItem);					
					}				
					content.setValue(oContext.getProperty("propValue"));
				} else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.TIME_POSITION){  // Context --> TimePosition
					var timePosition = com.sap.xmii.common.util.TIME_POSITION.split(",");
					for(var j = 0 ; j < timePosition.length ; j++){
						oItem = new sap.ui.core.ListItem();
						oItem.setText(timePosition[j]);
						oItem.setKey(timePosition[j]);
						content.addItem(oItem);					
					}								
					content.setValue(oContext.getProperty("propValue"));
				} else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.AVAILABLE_SERVER) {  // Context --> AvailableServers
					var	valueListParameters = {};
					var Type =  determineConnectorType(thisObj.getChartTemplateObject().chartConfig.Type);
					valueListParameters = {"service":"SystemInfo","Mode":"ServerList","Method":Type,"content-type":"text/json"};
					var rawData =  com.sap.xmii.common.util.MIIi5Util.getServiceResponseInJson(com.sap.xmii.common.util.GenericConstants.XMII_ILLUMINATOR_URL, valueListParameters);
					var rows = [];
					rows = rawData.Rowsets.Rowset[0].Row;
					var oItem;
					if(rawData.Rowsets.Rowset[0].Row != undefined){
						for(var j = 0 ; j< rows.length; j++){
							oItem = new sap.ui.core.ListItem();
							var value = rows[j].Name;
							oItem.setText(value);
							oItem.setKey(rows[j].Name);
							content.addItem(oItem);
						}
					}
					content.setValue(oContext.getProperty("propValue"));
				} else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.MODE) { // Context --> Mode
					var param = {};
					if(isQueryParams == true){
						param = {"QueryTemplate":thisObj.getQueryTemplate(),"content-type":"text/json", "Mode":"ModeList"};

						var rawData = com.sap.xmii.common.util.MIIi5Util.getServiceResponseInJson(com.sap.xmii.common.util.GenericConstants.XMII_ILLUMINATOR_URL, param);

						var rows = [];
						if(rawData.Rowsets.Rowset !== undefined){
							rows = rawData.Rowsets.Rowset[0].Row;
							var oItem;
							for(var j = 0 ; j< rows.length; j++){
								oItem = new sap.ui.core.ListItem();
								var value = rows[j].ModeName;
								oItem.setText(value);
								oItem.setKey(value);
								content.addItem(oItem);
							}
						}
						content.setValue(oContext.getProperty("propValue"));
					}
				} else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.CACHE_DURATION){  // Context --> CacheDuration
					var cacheDuration = com.sap.xmii.common.util.CACHE_DURATION_UNITS.split(",");
					var oItem = new sap.ui.core.ListItem();
					if(oContext.getObject().propValue != "") {
						var selectedDuration = getSelectedValueforDurationUnit(oContext.getObject().propValue);
						oItem.setText(selectedDuration);
						oItem.setKey(oContext.getObject().propValue);
						content.addItem(oItem);
					}
					for(var j = 0 ; j < cacheDuration.length ; j++){
						var oItem = new sap.ui.core.ListItem();
						if(cacheDuration[j].indexOf("(") != -1){
							key = cacheDuration[j].substring(0, cacheDuration[j].indexOf("("));
							key = key.trim();
							oItem.setKey(key);
							if(oContext.getObject().propValue != key) {
								oItem.setText(cacheDuration[j]);
								oItem.setKey(key);
								content.addItem(oItem);
							}					
						}
					}
				} else if(context ==  com.sap.xmii.common.util.PARAM_CONTEXT.GRANULARITY) {  // Context --> Granularity
					if(oContext.getProperty("groupId") == 55){
						var granularityArray = com.sap.xmii.common.util.PIC_ANALYSIS_GRANULARITY;
						for(var j = 0 ; j < granularityArray.length; j++){
							oItem = new sap.ui.core.ListItem();
							var value = granularityArray[j];
							oItem.setText(value);
							oItem.setKey(value);
							content.addItem(oItem);
						}
						content.setValue(oContext.getProperty("propValue"));
					}else{
						//need to populate from server as it can be different for different KPIs
						var param = {};
						param = {"QueryTemplate" : thisObj.getQueryTemplate(), "content-type" : "text/json", "Mode" : "GranularityList"};
						var rawData = com.sap.xmii.common.util.MIIi5Util.getServiceResponseInJson(com.sap.xmii.common.util.GenericConstants.XMII_ILLUMINATOR_URL, param);
						var rows = [];
						if (rawData.Rowsets.Rowset !== undefined) {
							rows = rawData.Rowsets.Rowset[0].Row;
							var oItem;
							for(var j = 0 ; j < rows.length; j++){
								oItem = new sap.ui.core.ListItem();
								var value = rows[j].Granularity;
								oItem.setText(value);
								oItem.setKey(value);
								content.addItem(oItem);
							}
						}
						content.setValue(oContext.getProperty("propValue"));
					}
				}else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.PCO_VIEW){  // Context --> PCo View Parameter
					var view = com.sap.xmii.common.util.PCO_VIEW.split(",");
					for(var j = 0 ; j < view.length ; j++){
						oItem = new sap.ui.core.ListItem();
						oItem.setText(view[j]);
						oItem.setKey(view[j]);
						content.addItem(oItem);					
					}								
					content.setValue(oContext.getProperty("propValue"));
				} else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.VERTICAL_TEXT_ALIGNMENT) {  // Context --> VerticalTextAlignment
					var verticalTextAlignment = com.sap.xmii.common.util.VERTICAL_TEXT_ALIGNMENT.split(",");
					for(var j = 0 ; j < verticalTextAlignment.length ; j++){
						oItem = new sap.ui.core.ListItem();
						oItem.setText(verticalTextAlignment[j]);
						oItem.setKey(verticalTextAlignment[j]);
						content.addItem(oItem);					
					}								
					content.setValue(oContext.getProperty("propValue"));
				} else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.HORIZONTAL_TEXT_ALIGNMENT) { // Context --> HorizontalTextAlignment
					var horizontalTextAlignment = com.sap.xmii.common.util.HORIZONTAL_TEXT_ALIGNMENT.split(",");
					for(var j = 0 ; j < horizontalTextAlignment.length ; j++){
						oItem = new sap.ui.core.ListItem();
						oItem.setText(horizontalTextAlignment[j]);
						if(horizontalTextAlignment[j] == "Left")
							oItem.setKey("L");
						else if(horizontalTextAlignment[j] == "Center")
							oItem.setKey("C");
						else if(horizontalTextAlignment[j] == "Right")
							oItem.setKey("R");
						content.addItem(oItem); 
						content.setValue(horizontalTextAlignment[oContext.getProperty("propValue")]);
					} 
					content.setValue(oContext.getProperty("propValue"));
				} else if(context == com.sap.xmii.common.util.PARAM_CONTEXT.LIMIT_COLUMN) {  // Context --> Limit Column== to get the QueryColumns
					if(thisObj.queryColumns === null || thisObj.queryColumns === undefined) {
						var param = {"Mode":"QueryColumns","objectname":thisObj.getQueryTemplate(),"content-type":"text/json"};
						var parameters = com.sap.xmii.common.util.MIIi5Util.getServiceResponseInJson(com.sap.xmii.common.util.GenericConstants.CECATALOG_URL, param);
						thisObj.queryColumns = parameters.Rowsets.Rowset[0].Row;
					}
					var oItem;
					if(thisObj.queryColumns != undefined) {
						for(var j = 0 ; j< thisObj.queryColumns.length; j++){
							oItem = new sap.ui.core.ListItem();
							if(oContext.getProperty("propValue") == thisObj.queryColumns[j].Key)
								content.setValue(thisObj.queryColumns[j].Value);	
							var value = thisObj.queryColumns[j].Value;
							oItem.setText(value);
							oItem.setKey(thisObj.queryColumns[j].Key);
							content.addItem(oItem);
						}	
					}
				} else {		// Context --> Dynamic Parameters (Methods, Schedule, TimePeriod, QueryParams, QueryColumns)
					var	valueListParameters = {};

					if(isQueryParams == true) {
						valueListParameters = {"Mode":"ValueHelpList","objectname":thisObj.getQueryTemplate(),"content-type":"text/json","Name":oContext.getProperty("name")};
					} else {
						valueListParameters = {"Mode":"ValueHelpList","objectname":"","templateTypeName":thisObj.getChartTemplateObject().chartConfig.Type,"content-type":"text/json","Name":oContext.getProperty("name")};
					}

					var rows =  com.sap.xmii.common.util.MIIi5Util.getServiceResponseInJson(com.sap.xmii.common.util.GenericConstants.UI5CATALOG_URL, valueListParameters);

					var oItem;
					if(rows != undefined) {
						for(var j = 0 ; j< rows.length; j++){
							oItem = new sap.ui.core.ListItem();
							if(oContext.getProperty("propValue") == rows[j].key)
								content.setValue(rows[j].value);	
							var value = rows[j].value;
							oItem.setText(value);
							oItem.setKey(rows[j].key);
							content.addItem(oItem);
						}	
					}
				}
			}
		}
		var deleteButtonLabelText = com.sap.xmii.common.util.MessageBundle.getText("XBUT_DELETE")+parameterName;
		var deleteButtonLabel = new sap.m.Label({text: deleteButtonLabelText,visible : true}).addStyleClass('hiddenLabel');
		var deleteButton = new sap.m.Button({icon:"sap-icon://sys-cancel",
			tooltip : com.sap.xmii.common.util.MessageBundle.getText("XBUT_DELETE"),
			ariaLabelledBy : [deleteButtonLabel],
			ariaDescribedBy : [deleteButtonLabel],
			lite : true,
			press : function(){
				var deletedRow = this.getBindingContext().getPath();
				deleteParameter(deletedRow);
			}
		});

		var wbDefaultValue = oContext.getProperty("defaultPropValue");
		if(dataType == com.sap.xmii.common.util.PARAM_DATA_TYPE.BOOLEAN && context == com.sap.xmii.common.util.PARAM_CONTEXT.STRING_NONE){ // Default context
			if(wbDefaultValue == "true" || wbDefaultValue == "TRUE" || wbDefaultValue == "True"){
				wbDefaultValue = com.sap.xmii.common.util.MessageBundle.getText("XLBL_TRUE");
			}else if (wbDefaultValue == "false" || wbDefaultValue == "FALSE" || wbDefaultValue == "False"){
				wbDefaultValue = com.sap.xmii.common.util.MessageBundle.getText("XLBL_FALSE");
			}
		}
		//No Overridden value for the Color Indicator
		if(dataType == com.sap.xmii.common.util.PARAM_DATA_TYPE.STRING && (context == com.sap.xmii.common.util.PARAM_CONTEXT.COLOR_INDICATOR
				|| context == com.sap.xmii.common.util.PARAM_CONTEXT.DATA_SERIES || context == com.sap.xmii.common.util.PARAM_CONTEXT.PEN_TYPE
				|| context == com.sap.xmii.common.util.PARAM_CONTEXT.COLOR_CONTEXT)){
			wbDefaultValue ="";
		}
		var defaultValueField = new sap.m.Label({text:wbDefaultValue});
		paramListItem.addCell(groupName);
		paramListItem.addCell(parameterName);
		paramListItem.addCell(parameterDesc);
		paramListItem.addCell(defaultValueField);
		paramListItem.addCell(content);
		paramListItem.addCell(deleteButton);
		return paramListItem;
	}
	
	var isDataAlreadyloaded = true;
	if(isQueryParams == true) {
		thisObj.confPopupType = "Query";
		if(thisObj.selectedQueryParams == undefined)
			isDataAlreadyloaded = false;
	} else {
		thisObj.confPopupType = "Display";
		if(thisObj.selectedDisplayParams == undefined)
			isDataAlreadyloaded = false;
	}
	
	if(isDataAlreadyloaded == false) {
		var serviceURL = com.sap.xmii.common.util.GenericConstants.UI5CATALOG_URL;
		var urlParams = {}; 
		urlParams.Mode = "DefaultParamList"; 
		if(isQueryParams == true && thisObj.selectedQueryParams == undefined) {
			//make service call, and update thisObj with default query parameters
			urlParams.ObjectName = thisObj.getQueryTemplate();
			thisObj.selectedQueryParams = com.sap.xmii.common.util.MIIi5Util.getServiceResponseInJson(serviceURL, urlParams);
		} else if(isQueryParams == false && thisObj.selectedDisplayParams == undefined) {
			//make service call, and update thisObj with default display parameters
			urlParams.ObjectName = thisObj.getDisplayTemplate();
			thisObj.selectedDisplayParams = com.sap.xmii.common.util.MIIi5Util.getServiceResponseInJson(serviceURL, urlParams);
			
			//In case the display template is not saved, then the default chart template is used
			//In this case the selected value columns are not fetched.
			//this piece of code sets the selected value columns for an unsaved (but executed) chart
			if((urlParams.ObjectName === "Defaults/i5Chart" || urlParams.ObjectName === "Defaults/i5SPCChart" ||
				urlParams.ObjectName === "Defaults/i5Grid")){
				
				for(var i=0;i<thisObj.selectedDisplayParams.length;i++){
					if(thisObj.selectedDisplayParams[i].name === "ValueColumns" && 
							com.sap.xmii.common.util.MIIi5Util.isNullOrEmpty(thisObj.selectedDisplayParams[i].defaultPropValue)){
						thisObj.selectedDisplayParams[i].defaultPropValue = thisObj.chartTemplate.ValueColumns;
					}
					if(thisObj.selectedDisplayParams[i].name === "LabelColumns" && 
							com.sap.xmii.common.util.MIIi5Util.isNullOrEmpty(thisObj.selectedDisplayParams[i].defaultPropValue)){
						thisObj.selectedDisplayParams[i].defaultPropValue = thisObj.chartTemplate.LabelColumns;
					}
				}
			}
		}
	}
	if(thisObj.queryParams == undefined){
		thisObj.queryParams = jQuery.extend(true,[],thisObj.selectedQueryParams);
	}
	if(thisObj.displayParams == undefined){
		thisObj.displayParams = jQuery.extend(true,[],thisObj.selectedDisplayParams);
	}
	 
	if(thisObj.changedParams == null || thisObj.changedParams == undefined)
		thisObj.changedParams = [];
	else
		thisObj.changedParams.length = 0;
	
	openConfigurationPopup(thisObj, isQueryParams);
	
	//Check the Production event from ScopePeColExpression and SelectedGroupByProperties
	function checkSelectedPEInfoName(fieldName, dropdownContent, contentList){
		var value = "";
		var peInfoName = global_peInfoName[fieldName];
		if(peInfoName == undefined){
			value = thisObj.getQueryObject()[fieldName];
			if(value != undefined){
				peInfoName = getPeInfoName(fieldName, value);
			}	
		}
		if(peInfoName != ""){
			dropdownContent.setSelectedKey(peInfoName);
			var jsonModel = new sap.ui.model.json.JSONModel();
			jsonModel.setData({modelData : SSCEStructuralParamaters.globalPEColsMap[peInfoName]});
			contentList.setModel(jsonModel);
			dropdownContent.setEnabled(false);
		}
	};

	function getPeInfoName(fieldName, value){
		var peInfoName = "";
		if(fieldName == "ScopePeColExpression"){
			global_peInfoName[fieldName] = "";
			var str = value.split("\"");
			if(str.length > 0){
				for(var i in str){
					if(str[i].trim().indexOf("[PE]") === 0){
						var peCol = str[i].substr(4).split(".");
						if(peCol.length > 1){
							peInfoName = peCol[0];
							global_peInfoName[fieldName] = peInfoName;
							break;
						}
					}
				}
			}	
		}else if(fieldName == "SelectedGroupByProperties"){
			global_peInfoName[fieldName] = "";
			var cols = value.split(",");
			for(var i in cols){
				if(cols[i].indexOf("[PE]") == 0){
					var col = cols[i].substr(4).split(".");
					peInfoName = col[0];
					global_peInfoName[fieldName] = peInfoName;
					break;
				}
			}
		}

		return peInfoName;
	};
	/**
 * Function responsible to get data for Tag Selection 
 * @param valueJSON
 * @param toolBar
 * @return
 */
function createRowDataforTagSelection(valueJSON){
	// "Name" allows to bind property , "ColumnName" is to display to the user 
	valueJSON.Columns = [{"DataType" :"DisableString" , "ColumnName" :oBundle.getText("XLBL_TAG_CATEGORY") , "Name" :"SelectedTagCategories"} ,
	                     { "DataType" :"String" , "ColumnName" :oBundle.getText("XLBL_COLNAME_ALIAS"), "Name" : "SelectedTagCategoryAliases"} , 
	                     {"DataType" :"ValueHelpField" , "ColumnName" :oBundle.getText("XLBL_UNIT_OF_MEASUREMENT") , "Name" : "SelectedTagCategoryUOMs"},
	                     {"DataType" :"MultiSelect", "ColumnName": oBundle.getText("XLBL_AGGR_MODE"), "Name" : "AnalysisAggregationModes"},
	                     {"DataType" :"CheckBoxBoolean" , "ColumnName" :oBundle.getText("XLBL_COLNAME_INTERMEDIATE") , "Name" : "SelectedTagCategoryIntermediates"},
	                     {"DataType" :"CheckBoxBoolean" , "ColumnName" :oBundle.getText("XLBL_COST_COLNAME") , "Name" : "SelectedTagCategoryCostCalculates"}];
	valueJSON.Rows =[];
	
	valueJSON.Rows = creationRowDataforTagSelection();

	return valueJSON;
};

//Check the user select any group by properties or not
function checkSelectGroupByProperties(thisObj){
	var groupByProps;
	var propExpr;
	var pePropExpr;
	for(var c in thisObj.changedParams){
		if(thisObj.changedParams[c].Name === "SelectedGroupByProperties"){
			groupByProps = thisObj.changedParams[c].Value;
		}else if(thisObj.changedParams[c].Name === "ScopePropertyExpression"){
			propExpr = thisObj.changedParams[c].Value;
		}else if(thisObj.changedParams[c].Name === "ScopePeColExpression"){
			pePropExpr = thisObj.changedParams[c].Value;
		}
	}
	if(groupByProps == undefined){	
		groupByProps = thisObj.getQueryObject().getParameter("SelectedGroupByProperties");	
	}
	if(groupByProps != undefined && groupByProps != ""){
		var props = groupByProps.split(",");
		for(var i in props){
			if(props[i].trim().indexOf("[AWS]") === -1 
					&& props[i].trim().indexOf("[DIM]") === -1 ){
				return true;
			}
		}
	}
	if(propExpr == undefined){	
		propExpr = thisObj.getQueryObject().getParameter("ScopePropertyExpression");	
	}
	if(pePropExpr == undefined){	
		pePropExpr = thisObj.getQueryObject().getParameter("ScopePeColExpression");	
	}
	if((propExpr != undefined && propExpr != "")
			||(pePropExpr != undefined && pePropExpr != "")){
		return true;
	}
	return false;
};

function disableTagIntermediateCheckBox(){	
	var intermediate = thisObj.getQueryObject().getParameter("SelectedTagCategoryIntermediates");
	var updatedValue = 
		com.sap.xmii.common.util.MIIi5Util.stringReplaceAll(intermediate,true,false);
	pushToChangedParameters("SelectedTagCategoryIntermediates", updatedValue);
}

function checkFormulaExpr(formula, tableData){
	if(checkCategoryLib(formula, tableData)){
		return 1;
	}	
	var match = "[\\*|/|%|(|)|\\-|\\+]";
	var cats = com.sap.xmii.common.util.MIIi5Util.stringReplaceAll(formula,match,";").split(";");
	var valid;
	var catCount = 0;
	var cat = "";
	for(var index in cats){
		valid = false;
		var v = cats[index].trim();
		if(v == ""){
			continue;
		}	
		if(!Number(v)){
			if(cat === "" || cat != v){
				catCount ++;
			}
			cat = v;
			for(var y in tableData){
				if(tableData[y].SelectedTagCategories === cat){
					valid = true;
					break;
				}	
			}

			if(!valid){
				return -1;
			}
		}
	}

	if(catCount == 0){
		return 0;
	}
	return catCount;
};

function checkCategoryLib(formula, tableData){
	for(var x in tableData){
		if(tableData[x] === formula){
			return true;
		}	
	}	
	return false;
};

function checkFormulaExist(formula, tableData){
	for(var y in tableData){
		if(tableData[y].SelectedTagCategories === formula){
			return true;
		}	
	}
	return false;
};

function checkDeleteCategory(category, tableData){
	var match = "[\\*|/|%|(|)|\\-|\\+]";
	for(var y in tableData){
		var c = tableData[y].SelectedTagCategories;
		if(category != c){
			var cats = com.sap.xmii.common.util.MIIi5Util.stringReplaceAll(c,match,";").split(";");
			for(var index in cats){
				if(cats[index].trim() === category.trim()){
					return false;
				}
			}
		}
	}	
	return true;
};

function createSelectTagCatTemplate(oContext, paramListItem, groupByPropertiesExisted){

	var context = oContext.getProperty("Context");
	var intmdValue = oContext.getProperty("SelectedTagCategoryIntermediates");
	var priceCheckValue = oContext.getProperty("SelectedTagCategoryCostCalculates");

	// create multi combo box to show multiple aggregation modes.
	var aggregationModesField = new sap.m.MultiComboBox({liveChange : function(oEvent){
			//Getting the row index and setting that row index checked data as true
			var _liveChange = oEvent.getParameter("value");
			if (aggregationModesField.getValue()) {
				oContext.getObject().AnalysisAggregationModes = aggregationModesField.getValue();
			} else {
				oContext.getObject().AnalysisAggregationModes = com.sap.xmii.common.util.AGGREGATION_LOGIC.toString();
			}
		},
		items : {
			path : "/aggregationModes",
			template : new sap.ui.core.ListItem({
				key: "{Mode}",
				text : "{Mode}"
			})
		}
	});
	
	//populate base agg modes checkbox list based on discrete flag
	var currentTagCat = oContext.getProperty("SelectedTagCategories");
	var tagcatDiscreteMap = SSCEStructuralParamaters.globalPICAnalysisParam.tagCategoryDiscrete;
	var defaultAggModes = [];
	var isDiscrete = false;
	var isformula = false;
	

	for (var j = 0; j < tagcatDiscreteMap.length; j++) {
		var catDiscreteArr = tagcatDiscreteMap[j].Name.split(":");
		if (catDiscreteArr[0] == currentTagCat) {
			if (catDiscreteArr[1] == "T") {
				defaultAggModes = DISCRETE_AGG_MODES;
				isDiscrete = true;
			} else {
				defaultAggModes = NO_DISCRETE_AGG_MODES;
			}
		}
	}

	if (defaultAggModes.length == 0) {
		isformula = true;
	}

	//if is formula, then base agg modes should be the overlapped cat's aggs; default agg modes should be SUM or MIN
	var configurePICAnalysisParamTable = sap.ui.getCore().byId("configurePICAnalysisParamTable");
	var tableData = configurePICAnalysisParamTable.getModel().getData().modelData;

	if (isformula) {
		var match = "[\\*|/|%|(|)|\\-|\\+]";
		var cats = com.sap.xmii.common.util.MIIi5Util.stringReplaceAll(currentTagCat,match,";").split(";");
		for (var index in cats) {
			var cat = cats[index].trim();
			if ((cat == "") || (Number(cat))) {
				continue;
			}
			for (var y in tableData) {
				if (tableData[y].SelectedTagCategories === cat) {
					var catAggs = tableData[y].AnalysisAggregationModes;
					if (defaultAggModes.length == 0) {
						defaultAggModes = catAggs.split(/\|/);
					} else {
						var tempAggs = [];
						for (var x in defaultAggModes) {
							var agg = defaultAggModes[x].trim();
							if (catAggs.indexOf(agg) != -1) {
								tempAggs.push(agg);
							}
						}
						defaultAggModes = tempAggs;						
					}
					break;
				}
			}

		}

		
	}

	
	var modesData = {aggregationModes : []};
	for(var i=0; i< defaultAggModes.length; i++){
		var data={};
		data.Mode = defaultAggModes[i];
		modesData.aggregationModes.push(data);
	}

	//set default selected agg mode
	var currentAMs = [];
	var recordedAMs = oContext.getProperty("AnalysisAggregationModes");
	if(recordedAMs) {
		var recordedAMsArr = recordedAMs.split(/\|/);
		if (recordedAMsArr.length > 1) {
			currentAMs = recordedAMs.split(/\|/);
		} else if ((recordedAMsArr.length == 1) && ($.inArray(recordedAMs, defaultAggModes) != -1)) {
			currentAMs = recordedAMs.split(/\|/);
		} else if (isDiscrete) {
			currentAMs.push(DEFAULT_SELECTED_DISCRETE_AGG_MODE.toString());
		} else {
			currentAMs.push(com.sap.xmii.common.util.AGGREGATION_LOGIC.toString());
		}
		
	} else {
		if (isDiscrete) {
			currentAMs.push(DEFAULT_SELECTED_DISCRETE_AGG_MODE.toString());
		} else {
			if (isformula) {
				currentAMs.push(defaultAggModes[0]);
			} else {
				currentAMs.push(com.sap.xmii.common.util.AGGREGATION_LOGIC.toString());
			}
		}		
	}
	aggregationModesField.setSelectedKeys(currentAMs);

	for (var j = 0; j < tableData.length; j++) {
		if (tableData[j].SelectedTagCategories == currentTagCat) {
			if (com.sap.xmii.common.util.MIIi5Util.isNullOrEmpty(tableData[j].AnalysisAggregationModes)) {
				tableData[j].AnalysisAggregationModes = currentAMs.join("|");
			} else if ($.inArray(tableData[j].AnalysisAggregationModes, defaultAggModes) == -1) {
				tableData[j].AnalysisAggregationModes = currentAMs.join("|");
			}
		}
	}
	configurePICAnalysisParamTable.getModel().setData({modelData: tableData});
	configurePICAnalysisParamTable.getModel().refresh();


	var model = new sap.ui.model.json.JSONModel(modesData);
	var oView = sap.ui.getCore().byId("ConfigureQueryTable");
	aggregationModesField.setModel(model);
	aggregationModesField.setTooltip(oBundle.getText("XLTP_AGGR_MODE"));

	aggregationModesField.attachSelectionChange(function(oEvent){
		var originalAggs = oContext.getObject().AnalysisAggregationModes;

		//var selectedItems = oEvent.getParameter("selectedItems");
		var selectedItems = this.getSelectedKeys();
		var values = [];
		for(var i=0; i< selectedItems.length; i++){
			values.push(selectedItems[i]);
		}
		var potentialNewAggs = values.toString().replace(/,/g,"\|");

		//check if is cat, then check if this cat's related formula have overlaps
		var currentCat = oContext.getObject().SelectedTagCategories;
		//var noOverlaps = false;

		if (isSingleCat(currentCat)) {
			for (var z in tableData) {
				var potentialRelatedFormula = tableData[z].SelectedTagCategories;
				if ((potentialRelatedFormula != currentCat) && (potentialRelatedFormula.indexOf(currentCat) != -1)) {
					var relatedFormulaAllAggs = getAllCatsAggModesWithUpdatedAggs (potentialRelatedFormula, currentCat, potentialNewAggs);
					var relatedFormulaIntersectedAggs = getIntersectedFormulaAggregationModes (relatedFormulaAllAggs);
					if (relatedFormulaIntersectedAggs.length == 0) {
						//noOverlaps = true;
						//oContext.getObject().AnalysisAggregationModes = originalAggs;
						//oContext.oModel.refresh();
						var originalAggArr = originalAggs.split(/\|/);
						/*
						var modesData = {aggregationModes : []};
						for(var i=0; i< originalAggArr.length; i++){
							var data={};
							data.Mode = originalAggArr[i];
							modesData.aggregationModes.push(data);
		
						}
						var model = new sap.ui.model.json.JSONModel(modesData);*/
						oContext.getObject().AnalysisAggregationModes = originalAggs;
						oEvent.getSource().setSelectedKeys(originalAggArr);

						showMessageBox(oBundle.getText("NO_OVERLAP_AGG_UPDATE"),sap.m.MessageBox.Icon.ERROR, oBundle.getText("XMSG_VALIDATION_FAILED"));
						return;
					} 
				}
			}

			//if all related formula have overlaps, then update each one
			//if (!noOverlaps) {
				var aggFields = oEvent.oSource.oParent.oParent.mAggregations.items;
				for (var x in tableData) {
					var potentialRelatedFormula = tableData[x].SelectedTagCategories;
					if ((potentialRelatedFormula != currentCat) && (potentialRelatedFormula.indexOf(currentCat) != -1)) {
						var relatedFormulaAllAggs = getAllCatsAggModesWithUpdatedAggs (potentialRelatedFormula, currentCat, potentialNewAggs);
						var relatedFormulaIntersectedAggs = getIntersectedFormulaAggregationModes (relatedFormulaAllAggs);
						var relatedFormulaIntersectedAggsStr = relatedFormulaIntersectedAggs.join("|");
						tableData[x].AnalysisAggregationModes = relatedFormulaIntersectedAggsStr;
						//update agg field
						var relatedFormulaAggField = aggFields[x].mAggregations.cells[3];
						var modesData = {aggregationModes : []};
						for(var i=0; i< relatedFormulaIntersectedAggs.length; i++){
							var data={};
							data.Mode = relatedFormulaIntersectedAggs[i];
							modesData.aggregationModes.push(data);
		
						}
						var model = new sap.ui.model.json.JSONModel(modesData);
						relatedFormulaAggField.setModel(model);
						//set selected item
						var originalSelectedKeys = relatedFormulaAggField.getSelectedKeys();
						var newSelectedKeys = [];
						if (originalSelectedKeys.length == 0) {
							newSelectedKeys.push(relatedFormulaIntersectedAggs[0]);
						} else {
							for (var y in originalSelectedKeys) {
								var originalKey = originalSelectedKeys[y];
								if (relatedFormulaIntersectedAggsStr.indexOf(originalKey) != -1) {
									newSelectedKeys.push(originalKey);
								}
							}
							if (newSelectedKeys.length == 0) {
								newSelectedKeys.push(relatedFormulaIntersectedAggs[0]);
							}
						}

						relatedFormulaAggField.setSelectedKeys(newSelectedKeys);
					}
				}

				configurePICAnalysisParamTable.getModel().setData({modelData: tableData});
				configurePICAnalysisParamTable.getModel().refresh();



				oContext.getObject().AnalysisAggregationModes = potentialNewAggs;
			//}
			

		} else {
			oContext.getObject().AnalysisAggregationModes = potentialNewAggs;
		}
		
		// oView.getModel().getData().aggregationModes = values;
		// oView.updateChangedPropArray("aggregationModes");
	});

	// Creation of Input setting enabled as false
	var tagCatNameInput = new sap.m.Input({value : oContext.getProperty("SelectedTagCategories") , editable : false, change:function(){
			// Getting the row index and setting that row index checked data as
			// true
			var path = this.getBindingContext().getPath();
			var position = parseInt(path.substring(path.lastIndexOf("/")+1));
			configureStructuralParametersTable.getModel().getData().modelData[position].Checked = "true";

		}});
	
	var aliasField = new sap.m.Input({value: oContext.getProperty("SelectedTagCategoryAliases"),liveChange:function(oEvent){
		var _liveChange = oEvent.getParameter("value");
		oContext.getObject().SelectedTagCategoryAliases = aliasField.getValue();
		}});
	var uomField = new sap.m.Input({value: oContext.getProperty("SelectedTagCategoryUOMs"), showValueHelp : true , liveChange : function(oEvent){
		//Getting the row index and setting that row index checked data as true
		var _liveChange = oEvent.getParameter("value");
		oContext.getObject().SelectedTagCategoryUOMs = uomField.getValue();
	}});

	tagCatNameInput.attachBrowserEvent("click", function(){
		var index = oContext.sPath.substr(oContext.sPath.lastIndexOf("/")+1,oContext.sPath.length) ;
		var configurePICAnalysisParamTable = sap.ui.getCore().byId("configurePICAnalysisParamTable");
		configurePICAnalysisParamTable.setSelectedItem(configurePICAnalysisParamTable.mAggregations.items[index]);
		configurePICAnalysisParamTable.fireSelectionChange();
	});
	
	uomField.attachValueHelpRequest(function(oEvent){
		uomField.bindProperty("value" , "SelectedTagCategoryUOMs");

		createDynamicValueHelpDialog(oEvent.getSource(),"UOM" , thisObj.picAnalysisParam["UOM"]);
	});
	
	aliasField.attachBrowserEvent("focusout", function(){
		if(aliasField.getValue().trim() === ""){
	    	aliasField.setValue(tagCatNameInput.getValue());
	    	oContext.getObject().SelectedTagCategoryAliases = aliasField.getValue();
	    }else if(aliasField.getValue().indexOf(",") > -1){
	    	sap.m.MessageBox.show(
	    			oBundle.getText("INPUT_CANNOT_CONTAIN_COMMA"), {
	    		          icon: sap.m.MessageBox.Icon.ERROR,
	    		          title: oBundle.getText("XMSG_VALIDATION_FAILED"),
	    		          actions: [sap.m.MessageBox.Action.OK],
	    		          onClose: function(oAction) {
	    				      aliasField.focus();
	    				  }
	    			});
	    }	
	});

	uomField.attachBrowserEvent("focusout", function(){
		if(uomField.getValue().trim() === ""){
	    	uomField.setValue(oBundle.getText("XLBL_DEFAULT_UOM_VALUE"));
	    	oContext.getObject().SelectedTagCategoryUOMs = uomField.getValue();
	    }else if(uomField.getValue().indexOf(",") > -1){
	    	sap.m.MessageBox.show(
	    			oBundle.getText("INPUT_CANNOT_CONTAIN_COMMA"), {
	    		          icon: sap.m.MessageBox.Icon.ERROR,
	    		          title: oBundle.getText("XMSG_VALIDATION_FAILED"),
	    		          actions: [sap.m.MessageBox.Action.OK],
	    		          onClose: function(oAction) {
	    				uomField.focus();
	    				  }
	    			});
	    }
	});
	
	var deleteButtonLabelText = oBundle.getText("XBUT_DELETE");
	var deleteButtonLabel = new sap.ui.commons.Label({text: deleteButtonLabelText,visible : true
	}).addStyleClass('hiddenLabel');
	var deleteCatButton = new sap.ui.commons.Button({icon:"Images/decline_grey_16.png",
		tooltip : oBundle.getText("XBUT_DELETE"),
		ariaLabelledBy : [deleteButtonLabel],
		ariaDescribedBy : [deleteButtonLabel],
		lite : true,
		press : function(oEvent){
			var deletedRow = this.getBindingContext().getPath();
			var index = deletedRow.substr(deletedRow.lastIndexOf("/")+1,deletedRow.length) ;
			var configurePICAnalysisParamTable = sap.ui.getCore().byId("configurePICAnalysisParamTable");
			var tableDataArray = configurePICAnalysisParamTable.getModel().getData().modelData;
			if(checkDeleteCategory(tableDataArray[index].SelectedTagCategories, tableDataArray)){
				tableDataArray.splice(index,1);
				if(tableDataArray.length == 0)
					sap.ui.getCore().byId("ConfigureQueryTableDeleteAllButton").setEnabled(false);
				configurePICAnalysisParamTable.getModel().setData({modelData: tableDataArray});
				configurePICAnalysisParamTable.getModel().refresh();
			}else{
				showMessageBox(oBundle.getText("DELETED_ROW_REMAINS"),sap.m.MessageBox.Icon.ERROR, oBundle.getText("XMSG_VALIDATION_FAILED"));
			}	
		}
	});
		 
	var intermediateCheckBox;

	if(!isDiscrete && (intmdValue != undefined)
		&& (((intmdValue != "" && intmdValue != "undefined") && typeof(intmdValue) == "string") 
				|| typeof(intmdValue) == "boolean")){
		var value;
		if(typeof(intmdValue) == "string"){
			if(intmdValue == "true"){
				value = true;
			}else{
				value = false;
			}
		}else if(typeof(intmdValue) == "boolean"){
			value = intmdValue;
		}

		intermediateCheckBox = new sap.m.CheckBox({selected: value,select:function(oEvent){
				//Getting the row index and setting that row index checked data as true
				var path = this.getBindingContext().getPath();
				var position = parseInt(path.substring(path.lastIndexOf("/")+1));
				var _liveChange = oEvent.getParameter("selected");
				var configurePICAnalysisParamTable = sap.ui.getCore().byId("configurePICAnalysisParamTable");
				configurePICAnalysisParamTable.getModel().getData().modelData[position].SelectedTagCategoryIntermediates = _liveChange;
				configurePICAnalysisParamTable.getModel().refresh();
				configurePICAnalysisParamTable.getModel().getData().modelData[position].Checked = "true";
			}});
		
		//If the user selected any group by properties, then make the "" checkbox disabled.
		if(groupByPropertiesExisted){
			oContext.getObject().SelectedTagCategoryIntermediates = false;
			intermediateCheckBox.setEnabled(false);
			intermediateCheckBox.setSelected(false);
		}
	}else{
		intermediateCheckBox = new sap.m.Label();
	}

	//render price check box
	var priceCheckBox;

	if (isformula || isDiscrete) {
		priceCheckBox = new sap.m.Label();
	} else {

		if (priceCheckValue != undefined || priceCheckValue == ""
		|| (((priceCheckValue != "" && priceCheckValue != "undefined") && typeof(priceCheckValue) == "string") 
				|| typeof(priceCheckValue) == "boolean")){
		var value;
		if(priceCheckValue == undefined || priceCheckValue == ""){
			value = false;
		}else if(typeof(priceCheckValue) == "string"){
			if(priceCheckValue == "true"){
				value = true;
			}else{
				value = false;
			}
		}else if(typeof(priceCheckValue) == "boolean"){
			value = priceCheckValue;
		}

		priceCheckBox = new sap.m.CheckBox({selected: value,select:function(oEvent){
				//Getting the row index and setting that row index checked data as true
				var path = this.getBindingContext().getPath();
				var position = parseInt(path.substring(path.lastIndexOf("/")+1));
				var _liveChange = oEvent.getParameter("selected");
				var configurePICAnalysisParamTable = sap.ui.getCore().byId("configurePICAnalysisParamTable");
				configurePICAnalysisParamTable.getModel().getData().modelData[position].SelectedTagCategoryCostCalculates = _liveChange;
				configurePICAnalysisParamTable.getModel().refresh();
				configurePICAnalysisParamTable.getModel().getData().modelData[position].Checked = "true";
			}});
		
		} else {
			priceCheckBox = new sap.m.Label();
		}

	}

	paramListItem.addCell(tagCatNameInput);
	paramListItem.addCell(aliasField);
	paramListItem.addCell(uomField);
	paramListItem.addCell(aggregationModesField);
	paramListItem.addCell(intermediateCheckBox);
	paramListItem.addCell(priceCheckBox);
	paramListItem.addCell(deleteCatButton);
	return paramListItem;

	
};

function arrayIntersection (arr1,arr2) {
	var hash={}, result=[];
	for(var i=0;arr1[i]!=null;i++)hash[arr1[i]]=true;
	for(var i=0;arr2[i]!=null;i++){
		if(hash[arr2[i]]){
			result.push(arr2[i])
		}
	}
return result
};


function getIntersectedFormulaAggregationModes ( aggregates ) {
	var intersectedAggModes = [];
	for (var i = 0; i < aggregates.length - 1; i++){
		var subAggModesA = aggregates[i].toString().split(/\|/);
		var subAggModesB = aggregates[i+1].toString().split(/\|/);
		if (i == 0) {				
			intersectedAggModes = arrayIntersection(subAggModesA, subAggModesB);
		} else {
			intersectedAggModes = arrayIntersection(intersectedAggModes, subAggModesB);
		}
	}
	return intersectedAggModes;
};

function getAllCatsAggModes (formula) {
		var match = "[\\*|/|%|(|)|\\-|\\+]";
		var cats = com.sap.xmii.common.util.MIIi5Util.stringReplaceAll(formula,match,";").split(";");
		var allCatsAggModes = [];
		var configurePICAnalysisParamTable = sap.ui.getCore().byId("configurePICAnalysisParamTable");
		var tableData = configurePICAnalysisParamTable.getModel().getData().modelData;

		for (var index in cats) {
			var cat = cats[index].trim();
			if ((cat == "") || (Number(cat))) {
				continue;
			}
			for (var y in tableData) {
				if (tableData[y].SelectedTagCategories === cat) {
					var catAggs = tableData[y].AnalysisAggregationModes;
					allCatsAggModes.push(catAggs);
					break;
				}
			}

		}

		return allCatsAggModes;
};

function getAllCatsAggModesWithUpdatedAggs (formula, updatedCat, updatedAggs) {
	var match = "[\\*|/|%|(|)|\\-|\\+]";
		var cats = com.sap.xmii.common.util.MIIi5Util.stringReplaceAll(formula,match,";").split(";");
		var allCatsAggModes = [];
		var configurePICAnalysisParamTable = sap.ui.getCore().byId("configurePICAnalysisParamTable");
		var tableData = configurePICAnalysisParamTable.getModel().getData().modelData;

		for (var index in cats) {
			var cat = cats[index].trim();
			if ((cat == "") || (Number(cat))) {
				continue;
			}
			for (var y in tableData) {
				if (tableData[y].SelectedTagCategories === cat) {
					var catAggs = "";
					if (tableData[y].SelectedTagCategories == updatedCat) {
						catAggs = updatedAggs;
					} else {
						catAggs = tableData[y].AnalysisAggregationModes;
					}					
					allCatsAggModes.push(catAggs);
					break;
				}
			}

		}

		return allCatsAggModes;
}

function createPICAnalysisFormulaBar(valueJSON ){
	
	var hLayoutAvailableTagCategory = new sap.ui.layout.HorizontalLayout();
	
	var tagCategoryField = new sap.m.TextArea("tagCategoryField", {cols:60, rows:6});
		tagCategoryField.attachLiveChange(function(){
			if(this.getValue() != ""){
				addFormulaButton.setEnabled(true);
			}else{
				addFormulaButton.setEnabled(false);
			}
			});
		//Add Tag Category button
		var addFormulaButton = new sap.m.Button("addFormulaButton", {enabled : false , text : oBundle.getText("XLBL_ADD_FORMULA")}).addStyleClass("colorPicker");
		addFormulaButton.attachPress(function(){
			var formula = com.sap.xmii.common.util.MIIi5Util.stringReplaceAll(tagCategoryField.getValue()," ","");
			var configurePICAnalysisParamTable = sap.ui.getCore().byId("configurePICAnalysisParamTable");
			
			if(isFormulaValid(tagCategoryField.getValue().trim(), valueJSON)){
				var isValid = checkFormulaExpr(tagCategoryField.getValue().trim(), configurePICAnalysisParamTable.getModel().getData().modelData);

				//check if formula's cats agg modes have overlaps
				var allCatsAggModes = getAllCatsAggModes(tagCategoryField.getValue().trim());
				var overlapedAggs = getIntersectedFormulaAggregationModes(allCatsAggModes);
				if ((overlapedAggs.length == 0)  && (isValid != 1)) {
					showMessageBox(oBundle.getText("NO_OVERLAP_AGGMODE"),sap.m.MessageBox.Icon.ERROR, oBundle.getText("XMSG_VALIDATION_FAILED"));
				} else {
					//Push the selected data to the valueJSON and set the updated data to the model
					if(isValid > 0){
					var inter = false;
					var enableCost = "";

					if(isValid > 1){
						inter = "";
					}

					//single formula, check discrete
						if (isValid == 1) {
							var match = "[\\*|/|%|(|)|\\-|\\+]";
							var cats = com.sap.xmii.common.util.MIIi5Util.stringReplaceAll(formula,match,";").split(";");
							var singleCat = "";
							for (var index in cats) {
								singleCat = cats[index].trim();
								if ((singleCat == "") || (Number(singleCat))) {
									continue;
								} else {
									break;
								}

							}
							
							if (checkIfIsDiscrete(singleCat)) {
								inter = "";
							} else {
								//if single formula and non discrete, mark as special
								 enableCost = "singleCat:" + singleCat;
							}
						}

					if(!checkFormulaExist(formula, configurePICAnalysisParamTable.getModel().getData().modelData)){
						valueJSON.Rows.push({"SelectedTagCategories" : formula, "SelectedTagCategoryAliases" : formula , 
							"SelectedTagCategoryUOMs" :oBundle.getText("XLBL_DEFAULT_UOM_VALUE"), "AnalysisAggregationModes" : null,
							 "SelectedTagCategoryIntermediates" : inter, "SelectedTagCategoryCostCalculates" : enableCost});
						configurePICAnalysisParamTable.getModel().setData({modelData : valueJSON.Rows});
						configurePICAnalysisParamTable.getModel().refresh();
					}

					tagCategoryField.setValue("");
					addFormulaButton.setEnabled(false);
				}else if(isValid == 0){
					showMessageBox(oBundle.getText("LEAST_ONE_VARIABLE_FORMULA", formula),sap.m.MessageBox.Icon.ERROR, oBundle.getText("XMSG_VALIDATION_FAILED"));
				}else{	
					showMessageBox(oBundle.getText("FORMULA_CONTAIN_UNSELECTED_CATEGORY", formula),sap.m.MessageBox.Icon.ERROR, oBundle.getText("XMSG_VALIDATION_FAILED"));
				}

				}
				
			}
		});
		

	hLayoutAvailableTagCategory.addContent(tagCategoryField);
	hLayoutAvailableTagCategory.addContent(addFormulaButton);
	
	return hLayoutAvailableTagCategory;
};

function isSingleCat(currentTagCat) {
	var tagcatDiscreteMap = SSCEStructuralParamaters.globalPICAnalysisParam.tagCategoryDiscrete;
	for (var j = 0; j < tagcatDiscreteMap.length; j++) {
		var catDiscreteArr = tagcatDiscreteMap[j].Name.split(":");
		if (catDiscreteArr[0] == currentTagCat) {
			return true;
		}
	} 
	return false;
}

function isFormulaValid(inputFormulaStr, valueJSON) {
	var tempTag = '';
	for (var i = 0;i < valueJSON.Rows.length; i++) {
		if(i > 0){
			tempTag = tempTag + ",";
		}
		tempTag = tempTag + valueJSON.Rows[i]["SelectedTagCategories"];
	};

	var params = {"mode": "validateTagCategoryExpression", "content-type":"text/json" };
	params.Expression = inputFormulaStr;
	params.TagCategories = tempTag;
	var exprUrl = "/XMII/Illuminator?service=MIIUtilities";
	var evalutionResult = getDataFromServer(exprUrl, params);
	var result;

	var message = "";
	if((evalutionResult.Rowsets.FatalError != undefined) || (evalutionResult.Rowsets.FatalError != null)) {
		message = evalutionResult.Rowsets.FatalError;
		result = false;
	} else {
		result = JSON.parse(evalutionResult.Rowsets.Rowset[0].Row[0].Result);
		if(!result) {
			message =  oBundle.getText("INVALID_FORMULA", inputFormulaStr);
		}
	}

	if(!result) {
		showMessageBox(message, sap.m.MessageBox.Icon.ERROR, oBundle.getText("XMSG_VALIDATION_FAILED"));
	}

	return result;		
}

	function getValueColumnsForChart() {
	    var aggrModes = thisObj.getQueryObject().getParameter("AnalysisAggregationModes").toString().split(",");
	    var categories = thisObj.getQueryObject().getParameter("SelectedTagCategoryAliases").toString().split(",");
	    var valueCols = "";
	    for (var i = 0; i < categories.length; i++) {
	        var splitedAggrModes = aggrModes[i].split(/\|/);
	        for (var j = 0; j < splitedAggrModes.length; j++){
	            valueCols = valueCols + splitedAggrModes[j] + "_" + categories[i];
	            valueCols = valueCols + ",";
	        }
	    }
	    if (valueCols.charAt(valueCols.length - 1) == ",")
	        valueCols = valueCols.substring(0, valueCols.length - 1);
	    return valueCols;
	
	};
	
	function getLabelColumnsForSelectedConfiguration() {
        var labelColumns = [];
        var sGranularity = thisObj.getQueryObject().overrides["Granularity"];
        if(sGranularity == undefined || sGranularity == "" || sGranularity == thisObj.getQueryObject().paramsMap["Granularity"]){
        	return;
        }
        
        switch (sGranularity) {
		case "5 Minutes":
			labelColumns.push("Min_5");
			sGranularity = "Hour";
			break;
		case "10 Minutes":
			labelColumns.push("Min_10");
			sGranularity = "Hour";
			break;
		case "15 Minutes":
			labelColumns.push("Min_15");
			sGranularity = "Hour";
			break;
		case "20 Minutes":
			labelColumns.push("Min_20");
			sGranularity = "Hour";
			break;
		case "30 Minutes":
			labelColumns.push("Min_30");
			sGranularity = "Hour";
			break;
        }
        
        switch (sGranularity) {
		case "Hour":
			labelColumns.push("Hour");
		case "Day":
			labelColumns.push("Day");
		case "Week":
			labelColumns.push("Week");
		case "Month":
			labelColumns.push("Month");
		case "Year":
			labelColumns.push("Year");
			break;
		case "Quarter":
			labelColumns.push("Quarter");
			labelColumns.push("Year");
		}
        
        var returnString = "";
        labelColumns.reverse().forEach(function(labelColumn) {
        	if(returnString == ""){
        		returnString = labelColumn;
        	}else{
        		returnString = returnString + "," + labelColumn;
        	}
        });

        
        if (thisObj.getQueryObject().getParameter("Granularity") == "None") {
        	if(returnString == ""){
        		returnString = "TimeStamp";
        	}else{
        		returnString = returnString = returnString + ",TimeStamp";
        	}
        }
        
        return returnString;
    };

	function createKpiDimDialog(parameterField, thisObject){
		var result = SSCEStructuralParamaters.globalPICAnalysisParam.KPIList;
		//array containing kpi dimensions
		var kpiDimensions=[];
		var kpiPaths="";
		if(isObjectNotNull(result)){
			if(isObjectNotNull(result.Rowsets.Rowset)&&isArrayNotEmpty(result.Rowsets.Rowset.Row)){
				var rowset = result.Rowsets.Rowset;
				for(var i = 0;i < rowset.Row.length;i++){
					if(rowset.Row[i].hasOwnProperty("Dimension")){
						kpiDimensions.push({"kpiDim":"[DIM]"+rowset.Row[i].Dimension});
					}
					else if(rowset.Row[i].hasOwnProperty("Path")){
						kpiPaths += (kpiPaths == ""? rowset.Row[i].Path : ", "+rowset.Row[i].Path)
					}
				}
			}
		}
		var valueHelpDialog = new sap.m.Dialog();
		//attach after close function
		valueHelpDialog.attachAfterClose(function(){
			valueHelpDialog.destroyContent();
			valueHelpDialog.destroyButtons();
		}, valueHelpDialog);
		valueHelpDialog.setTitle(oBundle.getText("XLBL_KPI_DIM"));

		var oLabelType = new sap.m.Label({
			text : oBundle.getText("XLBL_USED_KPI") + " :",
			design: "Bold"
		});
		if(kpiPaths.split(",").length > 3){
			var displayText = new sap.m.Text({
				text:  kpiPaths.split(",").slice(0,3).toString() + ",...",
				tooltip:kpiPaths
			});
		}
		else{
			var displayText = new sap.m.Text({
				text:  kpiPaths
			});
		}
		valueHelpDialog.addContent(oLabelType);
		valueHelpDialog.addContent(displayText);
		var contentList = new sap.m.List({
			width:"100%",
			columns:[
				// new sap.m.Column({header:new sap.m.Label({text:"KPI Obeject"}),
				// 	width:"40%"
				// }),
				new sap.m.Column({header:new sap.m.Label({text : oBundle.getText("XLBL_ALL")}),
					width:"80%"
				})
			]
		});
		var listTemplate = new sap.m.ColumnListItem({
			cells:[
				// new sap.m.Label({text : "{kpiObject}"}),
				new sap.m.Label({text : "{kpiDim}"})
			]
		});

		contentList.setMode(sap.m.ListMode.MultiSelect);
		contentList.bindAggregation("items",{
			path:"/modelData",
			template: listTemplate
		});
		var jsonModel = new sap.ui.model.json.JSONModel();
		jsonModel.setData({
			modelData: kpiDimensions
		});
		contentList.setModel(jsonModel);

		/* make selected dimensions checked */
		if(isArrayNotEmpty(parameterField.getItems())){
			var valueArray = parameterField.getModel().getData().modelData;
			var modelData = contentList.getModel().getData().modelData;
			for(var i = 0; i < modelData.length;i++){
				for(var j = 0;j < valueArray.length;j++){
					if(valueArray[j].Name == modelData[i].kpiDim){
						contentList.setSelectedItem(contentList.getItems()[i]);
					}
				}
			}

		}

		valueHelpDialog.addContent(contentList);
		valueHelpDialog.open();
		valueHelpDialog.addButton(
			new sap.m.Button({
					text: oBundle.getText("XBUT_OK"),
					press: function(){
						//apply new selected items to parent dialog
						if(isArrayNotEmpty(contentList.getSelectedItems())){
							var valueArray = parameterField.getModel().getData().modelData;
							for(var i = 0;i < contentList.getSelectedItems().length;i++){
								var modelData = contentList.getSelectedItems()[i].getCells()[0].getText();
								var arr = $.grep(valueArray, function(obj){
									if(obj.Name === modelData){
										return obj;
									}
								});
								if(isArrayEmpty(arr)){
									valueArray.push({"Name": modelData});
								}
							}

						}
						parameterField.getModel().refresh();
						valueHelpDialog.close();
					}
				}
			));
		valueHelpDialog.addButton(
			new sap.m.Button({
					text: oBundle.getText("XBUT_CANCEL"),
					press  : function(){
						valueHelpDialog.close();
					}
				}
			));
	};

	function createKPIDimScopeDialog(parameterField,result) {
		//array containing kpi dimensions
		var kpiDimensions=[];
		var kpiPaths="";
		if(isObjectNotNull(result)){
			if(isObjectNotNull(result.Rowsets.Rowset)&&isArrayNotEmpty(result.Rowsets.Rowset.Row)){
			var rowset = result.Rowsets.Rowset;
			for(var i = 0;i < rowset.Row.length;i++){
				if(rowset.Row[i].hasOwnProperty("Dimension")){
					kpiDimensions.push({"kpiDim":"[DIM]"+rowset.Row[i].Dimension});
				}
				else if(rowset.Row[i].hasOwnProperty("Path")){
					kpiPaths += (kpiPaths == ""? rowset.Row[i].Path : ", "+rowset.Row[i].Path)
				}
			}
		}
		}
		//Creation of dialog
		var valueHelpDialog = new sap.m.Dialog();
		//Attach after close function
		valueHelpDialog.attachAfterClose(function(){
			valueHelpDialog.destroyContent();
			valueHelpDialog.destroyButtons();
		}, valueHelpDialog);
		valueHelpDialog.setTitle(oBundle.getText("XLBL_KPI_DIM"));
		var oLabelType = new sap.m.Label({
			text : oBundle.getText("XLBL_USED_KPI") + " :",
			design: "Bold"
		});
		if(kpiPaths.split(",").length > 3){
			var displayText = new sap.m.Text({
				text:  kpiPaths.split(",").slice(0,3).toString() + ",...",
				tooltip:kpiPaths
			});
		}
		else{
			var displayText = new sap.m.Text({
				text:  kpiPaths
			});		
		}
		valueHelpDialog.addContent(oLabelType);
		valueHelpDialog.addContent(displayText);
		var contentList = new sap.m.List({
			width:"100%",
			columns:[
				new sap.m.Column({header:new sap.m.Label({text : oBundle.getText("XLBL_DIMENSION")}),
					width:"80%"
				})
			]
		});
		var listTemplate = new sap.m.ColumnListItem({
			cells:[
				new sap.m.Label({text : "{kpiDim}"})
			]
		});

		contentList.setMode(sap.m.ListMode.MultiSelect);
		contentList.bindAggregation("items",{
			path:"/modelData",
			template: listTemplate
		});
		var jsonModel = new sap.ui.model.json.JSONModel();
		jsonModel.setData({
			modelData: kpiDimensions
		});
		contentList.setModel(jsonModel);
		valueHelpDialog.addContent(contentList);
		valueHelpDialog.open();
		valueHelpDialog.addButton(
			new sap.m.Button({
				text: oBundle.getText("XBUT_OK"),
				press: function(){
					// //apply new selected items to parent dialog 
					if(isArrayNotEmpty(contentList.getSelectedItems())){
						var valueForParamField = "";
						for(var i = 0;i < contentList.getSelectedItems().length;i++){
							var modelData = contentList.getSelectedItems()[i].getCells()[0].getText();
							var valueName ="\""+modelData+"\"";
							valueForParamField = valueForParamField + (valueForParamField == "" ? valueName : " "+ valueName);
						}
				
					}
					parameterField.setValue(parameterField.getValue() + valueForParamField);
					parameterField.fireChange();
					valueHelpDialog.close();
				}
			}
		));
		valueHelpDialog.addButton(
			new sap.m.Button({
				text: oBundle.getText("XBUT_CANCEL"),
				press  : function(){
					valueHelpDialog.close();
				}
			}
		));
	};
    function getKPIDimFromServer(thisObj) {
		var selectedNodeCategory = "",
			propertyExpression = "",
			selectedNode = "",
			scopePropertyExpression = "";
			selectedTagCategory = "";
		//get changed parameters from changedParam
		var changedParams = thisObj.changedParams;
	    var queryParams = thisObj.getQueryObject();
	    if(isArrayNotEmpty(changedParams)) {
	    	for(var i=0; i<changedParams.length; i++) {
				thisObj.getQueryObject().setParameter(changedParams[i].Name,changedParams[i].Value);
			}
	    }
	    if(isObjectNotNull(queryParams)) {
	    	propertyExpression = queryParams.getParameter("NodeSelectionExpression");
			scopePropertyExpression = queryParams.getParameter("ScopePropertyExpression");
			selectedNodeCategory = queryParams.getParameter("SelectedGroupCategories");
			selectedNode = queryParams.getParameter("SelectedNodes");
			selectedTagCategory = queryParams.getParameter("SelectedTagCategories");
	    }
		var params = {
						"Mode":"GetAllGroupByKPIDimensions",
						"content-type":"text/XML",
						"selectedTagCategory":selectedTagCategory,
						"selectedNodeCategory":selectedNodeCategory,
						"selectedNode":selectedNode,
						"scopePropertyExpression":scopePropertyExpression,
						"propertyExpression":propertyExpression,
					  };
		 SSCEStructuralParamaters.globalPICAnalysisParam["KPIList"] = getDataFromServerXML(XMII_CATALOG_URL,params);

	};
	function getDefaultParameterFromServer(paramName){
		var defaultValue;
		//Getting default selected tag categories from server
		var parameter ={"Mode" : "GetStructuralParameters","Operation" :"getTagSelectionParameters", "objectname":global_objectData.Path+ "/" + global_objectData.Name,"content-type":"text/json"};
		//Getting the data
		var  rs= getDataFromServer(XMII_CECATALOG_URL, parameter);
		if(isObjectNotNull(rs) && isObjectNotNull(rs.Rowsets) && isArrayNotEmpty(rs.Rowsets.Rowset) &&
				isObjectNotNull(rs.Rowsets.Rowset[0]) && isObjectNotNull(rs.Rowsets.Rowset[0].Row)) {
				for(var l = 0 ; l < rs.Rowsets.Rowset[0].Row.length ; l++){
					if(rs.Rowsets.Rowset[0].Row[l].Name == paramName){
						 defaultValue = rs.Rowsets.Rowset[0].Row[l].DefaultValue;
					}
				}
		}
		return defaultValue;
	};
};

/**
 * Function responsible to validate the gauge color indicator values
 * @param oTable
 * @return
 */
function validateColorIndicator(oTable){
	var rows = oTable.getItems();
	var isValid = true;

	 for (var i = 0; i < oTable.getModel().getData().modelData.length; i++) {
		 var row = rows[i];
		 var fromCell = row.getCells()[0];
		 if (fromCell.getValue() == null || fromCell.getValue() == "") {
             fromCell.setValueState(sap.ui.core.ValueState.Error);
             isValid = false;
         }
		 var toCell = row.getCells()[1];
		 if (toCell.getValue() == null || toCell.getValue() == "") {
             toCell.setValueState(sap.ui.core.ValueState.Error);
             isValid = false;
         }
		 if(isNaN(Number(fromCell.getValue())) || endsWith(fromCell.getValue(),".")) {
			 fromCell.setValueState(sap.ui.core.ValueState.Error);
			 isValid = false;
		 }
		 if(isNaN(Number(toCell.getValue())) || endsWith(toCell.getValue(),".")) {
			 toCell.setValueState(sap.ui.core.ValueState.Error);
			 isValid = false;
		 }
		 
		 if(Number(fromCell.getValue()) >= Number(toCell.getValue())) {
			 toCell.setValueState(sap.ui.core.ValueState.Error);
             isValid = false;
		 } 
		 if((/[\"^:$\[\]|%@#&/\\,()\_=;+'<>\?!\*`~{}a-zA-Z]/.test(fromCell.getValue())) == true) {
				fromCell.setValueState(sap.ui.core.ValueState.Error);
				isValid = false;
			}
		 if((/[\"^:$\[\]|%@#&/\\,()\_=;+'<>\?!\*`~{}a-zA-Z]/.test(toCell.getValue())) == true) {
				toCell.setValueState(sap.ui.core.ValueState.Error);
				isValid = false;
			}			 
	 }
	 
	 return isValid;
}
/**
 * This function will return the number of Virtual Tags present
 * @param sId
 * @return virtualTagCount
 */ 
function getVirtualTagCount(sId){
	if(!((sId.indexOf("tags")!=-1)|| (sId.indexOf("chart")!=-1)|| (sId.indexOf("grid")!=-1)))
		return;
	var cellId;
	if(sId.indexOf("tags")!=-1)
		cellId = sId.replace("tags","");
	else if(sId.indexOf("chart")!=-1)
		cellId = sId.replace("chart","");
	else if(sId.indexOf("grid")!=-1)
		cellId = sId.replace("grid","");
	if(sap.ui.getCore().byId(cellId) == undefined)
		return;
	var tagArray = sap.ui.getCore().byId(cellId).data().TagArray;
	if(tagArray != undefined || tagArray != null){
		var virtualTagCount = 0;
		for(var i=0;i<tagArray.length;i++){
			if((tagArray[i].IsVirtualMeter == "true" || tagArray[i].VirtualTag) && (tagArray[i].TransactionPath != null || tagArray[i].TransactionPath != undefined || tagArray[i].TransactionPath != "")){
				virtualTagCount++;
			}
		}	
	}
	return virtualTagCount;
}
/**
 * This function will return the Id of the Virtual Tag present
 * @param sId
 * @return tagId
 */
function getVirtualTagID(sId){
	var cellId;
	if(sId.indexOf("tags")!=-1)
		cellId = sId.replace("tags","");
	else if(sId.indexOf("chart")!=-1)
		cellId = sId.replace("chart","");
	else if(sId.indexOf("grid")!=-1)
		cellId = sId.replace("grid","");
	var tagArray = sap.ui.getCore().byId(cellId).data().TagArray;
	if(tagArray != undefined || tagArray != null){
		var tagId;
		for(var i=0;i<tagArray.length;i++){
			if((tagArray[i].IsVirtualMeter == "true" || tagArray[i].VirtualTag) && (tagArray[i].TransactionPath != null || tagArray[i].TransactionPath != undefined || tagArray[i].TransactionPath != "")){
				tagId = tagArray[i].Id;
			}
		}	
	}
	return tagId;
}
/**
 * Method to update the transaction parameters by appending trxparam
 * @param changedParams,tableModel
 * @return changedParams
 */
function modifyTransactionParameters(changedParams,tableModel){
	for(var i=0; i< tableModel.length; i++){
		if(tableModel[i].groupId == 62){
			for(var j=0; j<changedParams.length; j++){
				if(tableModel[i].name == changedParams[j].Name)
					changedParams[j].Name = "trxparam." + changedParams[j].Name;
			}	
		}
	}
	return changedParams;
}