/**This control is implemented to enable the user to select the different color
 * for his conditions based on the value of the Catalog Tag
 * The selection and display of color via a button and a label is not
 * possible by conventional means and hence the custom control is being
 * implemented
 * @author I064174
 */

sap.ui.core.Control.extend("com.sap.mii.ui.composite.TagColorPicker", {
	//defines the properties of the control and its getter and setter 
	//are generated by the UI5 Framework
	
	//The buttonId is the apply/ok button id of the dialog from where the TagColorPicker is called
	//It helps in enabling/disabling the apply/ok button
	//If no apply/ok button available then no need to provide any buttonId
	metadata: {
		properties : {
			"hexcode" : {type: "string", defaultValue : "#000000"},
			"buttonId" : {type:"string"} 
		},
		events : {"change" : {}}
	},
     
     //This is the setter for the buttonId
   
      setButtonId : function(buttonId){
	 	this.buttonId = buttonId;
		// This check is made for the tag in which many color field can be added, so that enable and disable of apply is proper
	 	//this.countTagColorField = 0; 
	 	//This sets that the dialog from where the tag picker has called has apply/ok button
	 	//checkForApplyButtonIsAvail = true;
	 },
	 
	 setHexcode : function(hexdata){
		 	//alert(hexdata);
		 	this.setProperty("hexcode", hexdata);
		 },
	 
	/**
	 * this method is called when the control is initialised and thus
	 * is used to instantiate the children controls
	 */
	 
	init: function() {
		
		//taking the reference of the of the current control object
		//so that the properties can be modified by the child controls
		var that = this;
		
		try {
			var checkoBundle = oBundle.getText("XLBL_COLOR");
		} catch(err) {
			oBundle = com.sap.xmii.common.util.MessageBundle;
		}
		try {
			var checkColorAndCodes = colorAndCodes.length;
		} catch(err) {
			colorAndCodes = com.sap.xmii.common.util.MIIi5Util.getColorAndCodes();
		}
		
		jQuery.sap.require("sap.ui.model.json.JSONModel");
		var oModel = new sap.ui.model.json.JSONModel();
		oModel.setData(colorAndCodes);
		
		//initialising the AutoComplete for holding the hexcode for the color
		this.autocomplete = new sap.ui.commons.AutoComplete ({
		maxPopupItems : 5,
		width : "80px",
		displaySecondaryValues : true,
		tooltip : oBundle.getText("XLBL_COLOR"),
		items : {
			path : "/",
			template : new sap.ui.core.ListItem({text: "{color}", additionalText: "{code}"})
		},
		 change : function(oEvent){
		 	var colorMatchFlag = false; // The check is made for validation of the color field
			if (oEvent.getParameter('newValue')) {
		/* Traverse the colors in application.js to look for the hex-code of color entered in the 
		 AutoComplete field and change the color of the button to that color. */
				var color = this.getValue();
				//color.substring(0,1) == "#" is made because for HotPink color following code is executed
				if(color != undefined && color.substring(0,1) == "#" && color.length == 7 ){
					if(hexCodeValidator.test(color)){
						colorMatchFlag = true;
						that.setHexcode(color);
					} else{
						colorMatchFlag = false;

					}
				}else{
					for (var i= 0;i<colorAndCodes.length;i++) {
						
						if(colorAndCodes[i].color.toUpperCase() === color.toUpperCase()) {
							var hexCode = colorAndCodes[i].code;
							that.setHexcode(hexCode);
							colorMatchFlag = true;
	
							//The page which uses the field should check the valuestate and disable for enable the button. The following code needs to be removed
						/*	if(that.buttonId != undefined)
							//This is applicable for all the color field except for the configure display parameters of Tags
								sap.ui.getCore().byId(that.buttonId).setEnabled(true);
							else{
								//Since we can have many color field row-wise, following code takes care whether the apply button should be activated
								var picker = sap.ui.getCore().byId(that.getId().substring(0,that.getId().indexOf("-")));
								picker.countTagColorField--;
								//If no color field is in value state error then enable the apply button
								if(picker.countTagColorField == 0)
									sap.ui.getCore().byId(picker.buttonId).setEnabled(true);							
							}*/
							break;
						}
					}
				}
			}
			//For the invalid color, disable the apply button and show it as an error
			if(colorMatchFlag == false){
				this.setValueState(sap.ui.core.ValueState.Error);
				//The page which uses the field should check the valuestate and disable for enable the button. The following code needs to be removed
				/*if(that.buttonId != undefined)
					sap.ui.getCore().byId(that.buttonId).setEnabled(false);
				else{
					var picker = sap.ui.getCore().byId(that.getId().substring(0,that.getId().indexOf("-")));
					picker.countTagColorField++;
					sap.ui.getCore().byId(picker.buttonId).setEnabled(false);							
				}*/
				jQuery("#"+this.getId()+"").css("background","#fad4d4");
			}else{
				this.setValueState(sap.ui.core.ValueState.None);
				jQuery("#"+this.getId()+"").css("background","none");
			}
		}
		});
		this.autocomplete.setModel(oModel);
		//initialising the button for creating the color dialog
		this.colorButton = new sap.ui.commons.Button({text:"", width: "20px", tooltip: oBundle.getText("XTLT_CHOOSE_COLOR_TT")});
		//disabling the shadowing so that the color on the button comes properly
		this.colorButton.addStyleClass("noShadowBox");
		this.colorButton.attachPress(function() {
		openColorPickerDialog(that);
		});
		
		//adding the Auto-complete and button in a horizontal layout
		this.hLayout = new sap.ui.commons.layout.HorizontalLayout ({
			content: [this.autocomplete, this.colorButton]}
		);
		
		function openColorPickerDialog(that) {
			var color = "";
			
			//initialising the color picker object 
			var oColorPicker = new sap.ui.commons.ColorPicker({colorString: that.getHexcode()});
			
			//creating the Dialog for color picker
			var oColorDialog = new sap.ui.commons.Dialog({modal: true});
			
			//Place the ColorPicker in the Dialog
			oColorDialog.addContent(oColorPicker);
			
			oColorDialog.setTitle(oBundle.getText("XTIT_COLOR_PICKER"));
			
			//creating the apply button in the dialog to save the changes
			var applyButton = new sap.ui.commons.Button({text: oBundle.getText("XBUT_APPLY")});
			applyButton.attachPress(function() {
				//Check whether any apply button available
				/*if(checkForApplyButtonIsAvail){
					//Since we can have many color field row-wise, following code takes care whether the apply button should be activated
					if(that.buttonId != undefined)
						//This is applicable for all the color field except for the configure tag display
						sap.ui.getCore().byId(that.buttonId).setEnabled(true);
					else{
						var picker = sap.ui.getCore().byId(that.getId().substring(0,that.getId().indexOf("-")));
						//Handling only If the color field is in error state, decrement the countTagColorField
						if(that.autocomplete.getValueState() == "Error")	
							picker.countTagColorField--;
						//If no color field is in error state then enable the apply button
						if(picker.countTagColorField == 0 && that.autocomplete.getValueState() == "Error" )
							sap.ui.getCore().byId(picker.buttonId).setEnabled(true);
					}
				}*/
				//if the entered color is valid ,changing the backgound and value state
				that.autocomplete.setValueState(sap.ui.core.ValueState.None);
				jQuery("#"+that.autocomplete.getId()+"").css("background","none");
				//getting the color in RGB format 
				var rgb = this.getRGB();
				//converting the RGB color to hexcode
				that.setHexcode("#" + rgbToHex(rgb.r, rgb.g, rgb.b));
				
				//setting the text of the AutoComplete to the hexcode
				that.autocomplete.setValue(that.getHexcode());
				//setting the color of the button according to the hexcode
				jQuery("#" + that.colorButton.getId()).css("background-color", that.getHexcode());
				//destroying the dialog
				oColorDialog.destroy();

				//passing the colorPicker object to get the changed value of the color
			}, oColorPicker);
			
			//creating the cancel button to revert the changes
			var cancelButton = new sap.ui.commons.Button({text: oBundle.getText("XBUT_CANCEL")});
			cancelButton.attachPress(function () {
				//destroying the dialog
				oColorDialog.destroy();
			});
			
			//adding the buttons to the dialog and finally opening it
			oColorDialog.addButton(applyButton);
			oColorDialog.addButton(cancelButton);
			oColorDialog.open();
		}
		
		function rgbToHex(redColor, greenColor, blueColor) {
		    return toHex(redColor) + toHex(greenColor) + toHex(blueColor);
		}
		
        function toHex(n) {
            n = parseInt(n,10);
            if (isNaN(n)) return "00";
            n = Math.max(0,Math.min(n,255));
            return "0123456789ABCDEF".charAt((n-n%16)/16) + "0123456789ABCDEF".charAt(n%16);
        }
	},
	
	//setting the value of the AutoComplete just before the control is rendered
	/*onBeforeRendering: function() {
		this.autocomplete.setValue(this.getHexcode());
	},*/
	
	//defining the render as how the control would be rendered on the ui
	renderer: function (oRm, oCtrl) {
		//writing the div element to hold the custom control
		oRm.write('<div ');
		//writing the control data such as id, css class etc
		oRm.writeControlData(oCtrl);
		oRm.write('>');
		//finally rendering the horizontal layout hence the label and button are rendered
		oRm.renderControl(oCtrl.hLayout);
		oRm.write('</div>');
	},
	
	//setting the value of AutoComplete and color of the button after the control
	//has rendered
	onAfterRendering: function() {
		this.autocomplete.setValue(this.getHexcode());
		//jQuery.sap.byId(this.autocomplete.getId()).css("background","transparent");
		jQuery.sap.byId(this.colorButton.getId()).css("background-color", this.getHexcode());
	},
	
	onExit: function() {
		this.destroy();
	},
	
	onfocusout: function() {
		this.fireChange();
	},
	
	getValueState: function(){
		return this.autocomplete.getValueState();
	}
	
});