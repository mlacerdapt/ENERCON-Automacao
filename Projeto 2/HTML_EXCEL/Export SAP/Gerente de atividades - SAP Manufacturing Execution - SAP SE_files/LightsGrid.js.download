//document.write('<scr' + 'ipt type="text/javascript" src="/XMII/JavaScript/com/sap/xmii/grid/expression/Expression.js?version='	+ Math.random() + '"></scr' + 'ipt>');

com.sap.xmii.grid.ui5 = com.sap.xmii.grid.ui5 || {};

var parentGridComponent = new com.sap.xmii.grid.ui5.BaseComponent();

/**
 * LightsGrid CONSTRUCTOR
 * 
 * @param gridConfig
 * @param gridModel
 */
com.sap.xmii.grid.ui5.LightsGrid = function(gridConfig, gridModel, i5GridObj) {

	this.populateData(gridConfig, gridModel, i5GridObj);

}

com.sap.xmii.grid.ui5.LightsGrid.prototype = parentGridComponent;
com.sap.xmii.grid.ui5.LightsGrid.prototype.constructor = com.sap.xmii.grid.ui5.LightsGrid;

/**
 * LightsGrid Create Method
 * 
 * @return
 */
com.sap.xmii.grid.ui5.LightsGrid.prototype.create = function() {

	var columnTemplateArray = this.gridTypeInitialization();
	//if(this.gridPropertyConfig.getProperty(com.sap.xmii.common.util.ChartPropertyConstants.INITIAL_UPDATE)) {
	if(this.gridModel != undefined && columnTemplateArray != undefined) {
		//var rowHeadings = this.gridPropertyConfig.getProperty('RowHeadings').split(',');

		//create default style
		this.createDefaultStyle();

		var columnNameStyle, oldStyle, newStyle;

		//prepare formatters for column (date and number formatters)
		this.prepareForCellFormatting();

		if(this.rows != undefined){
			//Iterating over all the data rows
			for(var index=0; index < this.rows.length; index++){
				//Row heading for rows
				this.applyRowheadings(index);
				/*if(rowHeadings[index] != null){
					this.rows[index].RowHeading = rowHeadings[index];
				}*/

				// Iterating over all the Table columns
				for(var columnIndex =1 ; columnIndex < this.columnArray.length ; columnIndex++){
					var columnName = this.columnArray[columnIndex].Name;
					var columnNameStyle = columnName+"Style";
					// Applying formatting
					this.rows[index][columnName] = this.formatCellValue(columnName, this.columnArray[columnIndex].SQLDataType,	this.rows[index][columnName]);
					// Applying default style
					this.rows[index][columnNameStyle] = this.defaultStyle;
					this.rows[index].Style = 'light-color:#000000';
					// Creating check box columns if specified
					this.createCheckBoxColumn(columnTemplateArray,columnIndex,columnName);
				}

				// Applying Color Context
				if (this.isColorContextDefined()) {
					//if(this.isColorContextEligible())
						this.applyColorContext(index);
				}
			}
		}
	
		//Call createBaseComponent of BaseComponent
		var oTable = this.createBaseComponent(columnTemplateArray,false);

		//Create the Traffic Light column
		oTable.addColumn(new sap.ui.table.Column({template : new com.sap.xmii.grid.ui5.customcontrols.ColoredLight().bindProperty("labelStyle", "Style")
			.setRowHeight(this.getRowHeight()).setDefaultBackgroundColor(this.getBackgroundColor()),
			width : Math.max(this.getColoredLightWidth(),40)+"px"}));

		this.ui5TableElement = oTable;
	} else {
		this.ui5TableElement = this.oTable;
		//this.gridPropertyConfig.setProperty(com.sap.xmii.common.util.ChartPropertyConstants.INITIAL_UPDATE,true);
	}

};
com.sap.xmii.grid.ui5.LightsGrid.prototype.applyColorContext = function(index) {
	var colors = this.getMatchColors().split(",");
	var icons = this.getMatchIcons().split(",");
	var colorContextColumns = this.getMatchColumns().split(",");
	var colorContextRow = this.getMatchValues().split(";");
	var defaultColor = this.getTextColor();
	var displayColumns = this.getDisplayColumns().split(',');
	var conditions = [];
	var iterator = colors.length > icons.length ? colors : icons;
	//Iterating over color context rows
	for(var i = 0; i < iterator.length; i++){
		conditions[i] = {};
		conditions[i].Color = colors[i];
		conditions[i].Icon = icons[i];
		var conditionColumns = [];
		var colorContextRowExpression = colorContextRow[i].split(",");
		//Iterating over color context columns
		for(var j = 0; j < colorContextColumns.length; j++){
			conditionColumns[j] = {};
			conditionColumns[j].ColumnName = colorContextColumns[j];
			conditionColumns[j].ColumnValue = this.rows[index][colorContextColumns[j]];
			conditionColumns[j].ColumnExpression = colorContextRowExpression[j];
		}
		conditions[i].Columns =  conditionColumns;
	}
	var expressionResult = "";
	if(this.isColorContextEligible())
		//expColor = new com.sap.xmii.grid.expression.Expression(conditions, defaultColor, true).evaluate();
		expressionResult = expressionResult + new com.sap.xmii.grid.expression.Expression(conditions, '#000000', true).evaluate();
	else 
		//expColor = new com.sap.xmii.grid.expression.Expression(conditions, defaultColor, true, undefined, true).evaluate();
		expressionResult = expressionResult + new com.sap.xmii.grid.expression.Expression(conditions, '#000000', true, undefined, true).evaluate();
	
	// Fix for CSN 841566 2014
/*	var resIsColor = expressionResult.indexOf("#")===0 ? true : false;
	var lightStyle = "";
	if(resIsColor) {
		lightStyle = lightStyle + 'light-color:' + expressionResult;
	} else {
		lightStyle = lightStyle + expressionResult;
	}
	this.rows[index].Style = lightStyle;
*/
	
	var lightStyle = "";
	// with this condition icon is found, then icon takes precedence over color
	// the style element 'light-color' is not inserted into the column style
	if(icons.indexOf(expressionResult) != -1)
		lightStyle = expressionResult;
	else
		lightStyle = 'light-color:' + expressionResult;
	this.rows[index].Style = lightStyle;
	
	for(var colIndex = 1 ; colIndex < this.columnArray.length ; colIndex++){
		var columnName = this.columnArray[colIndex].Name;
		if(displayColumns.indexOf(columnName) > -1) {
			var columnNameStyle = columnName+"Style";
			this.rows[index][columnNameStyle] = this.defaultStyle;
		}
	}
};
com.sap.xmii.grid.ui5.LightsGrid.prototype.applyRowheadings = function(index) {
	var rowHeadings = this.getRowHeadings().toString().split(',');
	//Row heading for rows
	if(rowHeadings[index] != null){
		this.rows[index].RowHeading = rowHeadings[index];
	}
};