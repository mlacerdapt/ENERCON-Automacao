//placeholders for loading Runtime Libraries
LoadModules = {
    i5Chart: true,
    i5Grid: false,
    i5SPCChart: false,
    plantView: false,
    queryObject: false,
    picTree: false,
    KPI: false,
    uiElements: false,
    queryTable: false,
    swipeMobile: false,
    svg: false
};

PageHeightSettings = {
    ParentDivHeight: 99,
    HeaderHeight: 0,
    FooterHeight: 0,
    RuntimeToolBarHeight: 0,
    CurrentCellHeight: 0
};

/* 
 * This method will generate the html code for the dashboard content added by the user.
 * The layout consists of the main matrix - "matrix1"
 * Each cell contains an absolute layout with the id as pnpm - n is the row number, m is the column number ( p0p0 is the first cell)
 * each absolute layout contains the custom data "Object" with the format
 * {"Name" : "Default", "ParentFolderName" : "", "Path" : "Default", "ParentPath" : "", "FileType" : "", "MappedQueryTemplate" : "NA" }
 * Matrix is converted to a html table and in each cell td, a div will be added with the code for the object embedded (addContentHtmlCode method). 
 */
function generateHtml(isTemplate, separateJsCode) {
    var oShellView = sap.ui.getCore().byId("shellView");
    var isGenerated = oShellView.getController().isHtmlGenerated();

    var genCodeHtml;
    var genCodeJs;
    var genCode;
    if (!isTemplate && isGenerated == true) {
        genCodeHtml = oShellView.getController().getHtml();
        if (separateJsCode) {
            genCodeJs = oShellView.getController().getJs();
        }
    } else {
        resetPageHeight();
        if (isTemplate) {
            var pattern = sap.mii.ce.appdata.template.layoutSelected;
            //also need to calculate the Header, Footer and Page Heights here itself
            if (TemplatePageSettings.General.Header.URL != "") {
                if (TemplatePageSettings.General.Header.Height != "" && isNaN(TemplatePageSettings.General.Header.Height) == false)
                    PageHeightSettings.HeaderHeight = parseInt(TemplatePageSettings.General.Header.Height);
            }
            if (TemplatePageSettings.General.Footer.URL != "") {
                if (TemplatePageSettings.General.Footer.Height != "" && isNaN(TemplatePageSettings.General.Footer.Height) == false)
                    PageHeightSettings.FooterHeight = parseInt(TemplatePageSettings.General.Footer.Height);
            }
            if (TemplatePageSettings.General.ShowAlert == "Y" || (TemplatePageSettings.General.ShowTimePeriod && TemplatePageSettings.General.TimeAware)) {
                PageHeightSettings.RuntimeToolBarHeight = 2;
            }
            //finally the Page Height
            PageHeightSettings.ParentDivHeight = 99 - PageHeightSettings.HeaderHeight - PageHeightSettings.FooterHeight - PageHeightSettings.RuntimeToolBarHeight;
        } else {
            var pattern = sap.mii.ce.appdata.layout.layoutSelected;
            //also need to calculate the Header, Footer and Page Heights here itself
            if (PageSettings.General.Header.URL != "") {
                if (PageSettings.General.Header.Height != "" && isNaN(PageSettings.General.Header.Height) == false)
                    PageHeightSettings.HeaderHeight = parseInt(PageSettings.General.Header.Height);
            }
            if (PageSettings.General.Footer.URL != "") {
                if (PageSettings.General.Footer.Height != "" && isNaN(PageSettings.General.Footer.Height) == false)
                    PageHeightSettings.FooterHeight = parseInt(PageSettings.General.Footer.Height);
            }
            if (PageSettings.General.ShowAlert == "Y" || (PageSettings.General.ShowTimePeriod && PageSettings.General.TimeAware)) {
                PageHeightSettings.RuntimeToolBarHeight = 2;
            }
            //finally the Page Height
            PageHeightSettings.ParentDivHeight = 99 - PageHeightSettings.HeaderHeight - PageHeightSettings.FooterHeight - PageHeightSettings.RuntimeToolBarHeight;
        }
        switch (pattern) {
            case "Pattern8":
                genCode = this.generateLayoutCodeForPattern8(isTemplate, separateJsCode);
                break;
            case "Pattern9":
                genCode = this.generateLayoutCodeForPattern9(isTemplate, separateJsCode);
                break;
            case "Pattern10":
                genCode = this.generateLayoutCodeForPattern10(isTemplate, separateJsCode);
                break;
            case "Pattern11":
                genCode = this.generateLayoutCodeForPattern11(isTemplate, separateJsCode);
                break;
            default:
                genCode = this.generateLayoutCode(isTemplate, separateJsCode);

        }
        if (!isTemplate) {
            if (separateJsCode) {
                oShellView.getController().setHtml(genCode.html);
                oShellView.getController().setJs(genCode.js);
                oShellView.getController().setHtmlGenerated(true);
                genCodeHtml = genCode.html;
                genCodeJs = genCode.js
            } else {
                oShellView.getController().setHtml(genCode);
                oShellView.getController().setHtmlGenerated(true);
                genCodeHtml = genCode;
            }
        } else {
        	genCodeHtml = genCode;
        }
    }
    
    if (isTemplate) {
    	var startHtml = addTemplateHeaderTags();
    	var endHtml = addTemplateEndTags();
    } else {
    	var startHtml = addHtmlHeaderTags(false, separateJsCode);
    	var endHtml = addHtmlEndTags(separateJsCode);
    }
    
    if (separateJsCode) {
    	var wholeCode = {};
    	wholeCode.html = startHtml.html + genCodeHtml + endHtml.html;
    	wholeCode.js = startHtml.js + genCodeJs + endHtml.js;
    } else {
    	var wholeCode = startHtml + genCodeHtml + endHtml;
    }
    return wholeCode;
}

//get style of title
function getTitleStyle(templateData) {
    var str_style = "overflow:hidden;box-shadow:none;display:block;vertical-align:middle;";
    if (typeof templateData.TitleInfo !== "undefined" && templateData.TitleInfo !== null && templateData.TitleInfo.ShowOrNot === true && templateData.TitleInfo.UseSpecificSetting === true) {
        //direction: inherit; font-size: 155px; color: rgb(226, 181, 181); background-color: rgb(9, 30, 19);
        if (templateData.TitleInfo.FontSize.length > 0) {
            str_style = str_style + "font-size:" + templateData.TitleInfo.FontSize + "vh;"
        }
        if (templateData.TitleInfo.TextAlign.length > 0) {
            str_style = str_style + "text-align:" + templateData.TitleInfo.TextAlign + ";"
        }
        if (templateData.TitleInfo.TextColor.length > 0) {
            str_style = str_style + "color:" + templateData.TitleInfo.TextColor + ";"
        }
        if (templateData.TitleInfo.BackgroundColor.length > 0) {
            str_style = str_style + "background-color:" + templateData.TitleInfo.BackgroundColor + ";";
        }
    }
    //We need the default width and height of the title to be set
    if (typeof templateData.TitleInfo !== "undefined" && templateData.TitleInfo !== null && templateData.TitleInfo.ShowOrNot === true && templateData.TitleInfo.Height > 0) {
        str_style = str_style + "height:" + templateData.TitleInfo.Height + "vh;";
        str_style = str_style + "line-height:" + templateData.TitleInfo.Height + "vh;";
        PageHeightSettings.CurrentCellHeight = PageHeightSettings.CurrentCellHeight - templateData.TitleInfo.Height;
    }

    return str_style;

}

//add title div
function generateTitle(templateData, cell) {
    var tableCode = "";
    if (typeof templateData.TitleInfo !== "undefined" && templateData.TitleInfo !== null && templateData.TitleInfo.ShowOrNot === true) {
        var str_style = getTitleStyle(templateData);
        tableCode = tableCode + "\t\t\t\t\t<div id=\"cellTitle_" + cell.getId() + "\" class=\"cellTitle\" style=\"box-shadow: none;";
        /*if (templateData.TitleInfo.UseSpecificSetting) {
            tableCode += "height:" + templateData.TitleInfo.Height + "vh;";
            tableCode += "line-height:" + templateData.TitleInfo.Height + "vh;";
        }*/
        tableCode += "\">\n";
        tableCode = tableCode + "\t\t\t\t\t\t<span class=\"sapUiTv sapUiTvAlignLeft sapUiTvWrap cellTitle\" style=\"" + str_style + "\">\n";
        tableCode = tableCode + jQuery.sap.escapeHTML(templateData.TitleInfo.Title) + "</span>\n";
        tableCode = tableCode + "\t\t\t\t\t</div>\n";
    }
    return tableCode;
}
/*
 * For layouts with symmetric cells
 * Loop through the layout matrix to generate the html table code.
 * each cell height and width is adjusted as per the number of rows and columns.
 * 
 */
function generateLayoutCode(isTemplate, separateJsCode) {
    if (isTemplate) {
        var layout = sap.ui.getCore().byId("matrix2");
    } else {
        var layout = sap.ui.getCore().byId("matrix1");
    }
    var tableCode;
    var jsCode = "";
    if (layout != null) {
        var rows = layout.getRows();
        var height = (PageHeightSettings.ParentDivHeight - 2) / rows.length;
        if (isTemplate) {
            if (sap.mii.ce.appdata.template.layoutSelected == "Custom" && sap.mii.ce.appdata.template.rows > 0)
                height = (PageHeightSettings.ParentDivHeight - 2) / sap.mii.ce.appdata.template.rows;
        } else {
            if (sap.mii.ce.appdata.layout.layoutSelected == "Custom" && sap.mii.ce.appdata.layout.rows > 0)
                height = (PageHeightSettings.ParentDivHeight - 2) / sap.mii.ce.appdata.layout.rows;
        }

        tableCode = "\t\t<table id=\"" + layout.getId() + "\" style=\"table-layout:fixed;position:absolute;width:99%;border-collapse:collapse;\">\n";
        for (var i = 0; i < rows.length; i++) {
            var row = rows[i];
            var cells = row.getCells();
            var width = 100 / cells.length;
            if (isTemplate) {
                if (sap.mii.ce.appdata.template.layoutSelected == "Custom" && sap.mii.ce.appdata.template.columns > 0)
                    width = 100 / sap.mii.ce.appdata.template.columns;
            } else {
                if (sap.mii.ce.appdata.layout.layoutSelected == "Custom" && sap.mii.ce.appdata.layout.columns > 0)
                    width = 100 / sap.mii.ce.appdata.layout.columns;
            }
            width = width.toFixed(0);
            tableCode = tableCode + "\t\t\t<tr id=\"" + row.getId() + "\" style=\"height:" + height + "vh\">\n";

            for (var j = 0; j < cells.length; j++) {
                cell = cells[j];
                var panel = cell.getContent()[0];
                var templateData = panel.data();
                var cellwidth = width;
                var cellheight = height - 1;
                if (sap.mii.ce.appdata.layout.layoutSelected == "Custom") {
                    cellwidth = width * cell.getColSpan();
                    cellheight = (cell.getRowSpan() * height) - 1;
                }
                PageHeightSettings.CurrentCellHeight = cellheight;
                var titleCode = generateTitle(templateData, cell);

                tableCode = tableCode + "\t\t\t\t<td id=\"" + cell.getId() + "\" class=\"borderWhite\" style=\"overflow:hidden;height:" + cellheight + "vh;width:" + cellwidth + "%\"";
                if (cell.getRowSpan() > 1) {
                    tableCode = tableCode + " rowspan=" + cell.getRowSpan();
                }
                if (cell.getColSpan() > 0) {
                    tableCode = tableCode + " colspan=" + cell.getColSpan();
                }
                tableCode = tableCode + " >\n";
                //add title div
                tableCode = tableCode + titleCode;
                //code for the plugin
                if (!isTemplate) {
                    if (panel.data("IsPlugin") == "true" || panel.data("IsPlugin") == true || panel.data("IsPlugin") != null) {
                        tableCode = tableCode + CEPluginHandler.getHTMLCodeFromPlugin(panel.data("CustomPluginExtension"));
                    } else {
                        if (separateJsCode) {
                            var codes = this.addContentHtmlCode(templateData, cell.getId(), true, undefined, PageHeightSettings.CurrentCellHeight, true);
                            tableCode = tableCode + codes.html;
                            if (codes.js)
                                jsCode = jsCode + codes.js;
                        } else {
                            tableCode = tableCode + this.addContentHtmlCode(templateData, cell.getId(), true, undefined, PageHeightSettings.CurrentCellHeight);
                        }
                    }
                }

                tableCode = tableCode + "\t\t\t\t</td>\n";

            }
            tableCode = tableCode + "\t\t\t</tr>\n";

        }
        tableCode = tableCode + "\t\t</table>\n";
    }
    if (separateJsCode) {
        var genCode = {};
        genCode.html = tableCode;
        genCode.js = jsCode;
        return genCode;
    }
    return tableCode;
}

/*
 * Pattern8 - first row has one cell with colspan2
 *          - second row has 2 cells with 30:70 widths
 * 
 */
function generateLayoutCodeForPattern8(isTemplate, separateJsCode) {
    if (isTemplate) {
        var layout = sap.ui.getCore().byId("matrix2");
    } else {
        var layout = sap.ui.getCore().byId("matrix1");
    }
    var tableCode;
    var jsCode = "";
    if (layout != null) {
        var rows = layout.getRows();
        var widths = layout.getWidths();
        var height1 = parseInt(widths[0].replace("%", ""));
        var height2 = parseInt(widths[1].replace("%", ""));
        var tableHeight = PageHeightSettings.ParentDivHeight - 2;
        height1 = (tableHeight / 100) * height1;
        height2 = (tableHeight / 100) * height2;
        tableCode = "\t\t<table id=\"" + layout.getId() + "\" style=\"position:absolute;height:" + tableHeight + "vh;width:99%;border-collapse:collapse;\">\n";
        var row = rows[0];
        var cells = row.getCells();
        var width = widths[1];
        tableCode = tableCode + "\t\t\t<tr id=\"" + row.getId() + "\">\n";
        cell = cells[0];
        var panel = cell.getContent()[0];
        var templateData = panel.data();
        PageHeightSettings.CurrentCellHeight = height1;
        var titleCode = generateTitle(templateData, cell);
        tableCode = tableCode + "\t\t\t\t<td id=\"" + cell.getId() + "\" class=\"borderWhite\" style=\"overflow:hidden;height:" + height1 + "vh;width:100%\" colspan=2";
        tableCode = tableCode + " >\n\t\t\t\t\t";
        //add title div
        tableCode = tableCode + titleCode;
        //code for the plugin
        if (!isTemplate) {
            if (panel.data("IsPlugin") == "true" || panel.data("IsPlugin") == true || panel.data("IsPlugin") != null) {
            	tableCode = tableCode + CEPluginHandler.getHTMLCodeFromPlugin(panel.data("CustomPluginExtension"));
            } else {
            	if (separateJsCode) {
            		var codes = this.addContentHtmlCode(templateData, cell.getId(), true, undefined, PageHeightSettings.CurrentCellHeight, true);
            		 tableCode = tableCode + codes.html;
                     if (codes.js)
                         jsCode = jsCode + codes.js;
            	} else {
            		tableCode = tableCode + this.addContentHtmlCode(templateData, cell.getId(), true, undefined, PageHeightSettings.CurrentCellHeight);
            	}
            }
        }
        tableCode = tableCode + "\t\t\t\t</td>\n";
        var row = rows[1];
        var cells = row.getCells();
        var width = widths[1];
        tableCode = tableCode + "\t\t\t<tr id=\"" + row.getId() + "\">\n";
        for (var j = 0; j < cells.length; j++) {
            cell = cells[j];
            var panel = cell.getContent()[0];
            var templateData = panel.data();
            PageHeightSettings.CurrentCellHeight = height2;
            var titleCode = generateTitle(templateData, cell);
            var maxWidth = parseInt(widths[j].replace("%", ""));
            tableCode = tableCode + "\t\t\t\t<td id=\"" + cell.getId() + "\" class=\"borderWhite\" style=\"overflow:hidden;max-width:" + maxWidth + "vh;height:" + height2 + "vh;width:" + widths[j] + "\"";
            tableCode = tableCode + " >\n";
            //add title div
            tableCode = tableCode + titleCode;
            //code for the plugin
            if (!isTemplate) {
                if (panel.data("IsPlugin") == "true" || panel.data("IsPlugin") == true || panel.data("IsPlugin") != null) {
                	tableCode = tableCode + CEPluginHandler.getHTMLCodeFromPlugin(panel.data("CustomPluginExtension"));
                } else {
                	if (separateJsCode) {
                		var codes = this.addContentHtmlCode(templateData, cell.getId(), true, undefined, PageHeightSettings.CurrentCellHeight, true);
                		 tableCode = tableCode + codes.html;
                         if (codes.js)
                             jsCode = jsCode + codes.js;
                	} else {
                		tableCode = tableCode + this.addContentHtmlCode(templateData, cell.getId(), true, undefined, PageHeightSettings.CurrentCellHeight);
                	}
                }
            }
            tableCode = tableCode + "\t\t\t\t</td>\n";

        }
        tableCode = tableCode + "\t\t\t</tr>\n";

        tableCode = tableCode + "\t\t</table>\n";
    }
    return tableCode;
}

/*
 * Pattern9 - first row has 2 cells. First cell has 100% height and 30% width
 *          - second row has one cell of height 70% width 70% 
 * 
 */
function generateLayoutCodeForPattern9(isTemplate, separateJsCode) {
    if (isTemplate) {
        var layout = sap.ui.getCore().byId("matrix2");
    } else {
        var layout = sap.ui.getCore().byId("matrix1");
    }
    var tableCode;
    var jsCode = "";
    if (layout != null) {
        var rows = layout.getRows();
        var widths = layout.getWidths();
        var height1 = parseInt(widths[0].replace("%", ""));
        var height2 = parseInt(widths[1].replace("%", ""));
        var tableHeight = PageHeightSettings.ParentDivHeight - 2;
        tableCode = "\t\t<table id=\"" + layout.getId() + "\" style=\"table-layout:fixed;position:absolute;height:" + tableHeight + "vh;width:99%;border-collapse:collapse;\">\n";
        height1 = (tableHeight / 100) * height1;
        height2 = (tableHeight / 100) * height2;
        var row = rows[0];
        var cells = row.getCells();
        var width = widths[1];

        tableCode = tableCode + "\t\t\t<tr id=\"" + row.getId() + "\">\n";
        var cell = cells[0];
        var panel = cell.getContent()[0];
        var templateData = panel.data();
        PageHeightSettings.CurrentCellHeight = tableHeight;
        var titleCode = generateTitle(templateData, cell);
        tableCode = tableCode + "\t\t\t\t<td id=\"" + cell.getId() + "\" class=\"borderWhite\" style=\"overflow:hidden;height:" + tableHeight + "vh;width:" + widths[0] + "\" rowspan=2\"";
        tableCode = tableCode + " >\n";
        //add title div
        tableCode = tableCode + titleCode;
        //code for the plugin
        if (!isTemplate) {
            if (panel.data("IsPlugin") == "true" || panel.data("IsPlugin") == true || panel.data("IsPlugin") != null) {
            	tableCode = tableCode + CEPluginHandler.getHTMLCodeFromPlugin(panel.data("CustomPluginExtension"));
            } else {
            	if (separateJsCode) {
            		var codes = this.addContentHtmlCode(templateData, cell.getId(), true, undefined, PageHeightSettings.CurrentCellHeight, true);
            		 tableCode = tableCode + codes.html;
                     if (codes.js)
                         jsCode = jsCode + codes.js;
            	} else {
            		tableCode = tableCode + this.addContentHtmlCode(templateData, cell.getId(), true, undefined, PageHeightSettings.CurrentCellHeight);
            	}
            }
        }

        tableCode = tableCode + "\t\t\t\t</td>\n";
        cell = cells[1];
        panel = cell.getContent()[0];
        templateData = panel.data();
        PageHeightSettings.CurrentCellHeight = height1;
        var titleCode = generateTitle(templateData, cell);
        tableCode = tableCode + "\t\t\t\t<td id=\"" + cell.getId() + "\" class=\"borderWhite\" style=\"overflow:hidden;height:" + height1 + "vh;width:" + widths[1] + "\" rowspan=1\"";
        tableCode = tableCode + " >\n\t\t\t\t\t";
        //add title div
        tableCode = tableCode + titleCode;
        //code for the plugin
        if (!isTemplate) {
            if (panel.data("IsPlugin") == "true" || panel.data("IsPlugin") == true || panel.data("IsPlugin") != null) {
            	tableCode = tableCode + CEPluginHandler.getHTMLCodeFromPlugin(panel.data("CustomPluginExtension"));
            } else {
            	if (separateJsCode) {
            		var codes = this.addContentHtmlCode(templateData, cell.getId(), true, undefined, PageHeightSettings.CurrentCellHeight, true);
            		 tableCode = tableCode + codes.html;
                     if (codes.js)
                         jsCode = jsCode + codes.js;
            	} else {
            		tableCode = tableCode + this.addContentHtmlCode(templateData, cell.getId(), true, undefined, PageHeightSettings.CurrentCellHeight);
            	}
            }
        }
        tableCode = tableCode + "\t\t\t\t</td>\n";


        var row = rows[1];
        var cells = row.getCells();
        tableCode = tableCode + "\t\t\t<tr id=\"" + row.getId() + "\">\n";
        cell = cells[0];
        panel = cell.getContent()[0];
        templateData = panel.data();
        PageHeightSettings.CurrentCellHeight = height2;
        var titleCode = generateTitle(templateData, cell);
        tableCode = tableCode + "\t\t\t\t<td id=\"" + cell.getId() + "\" class=\"borderWhite\" style=\"overflow:hidden;height:" + height2 + "vh;width:" + widths[1] + "\"";
        tableCode = tableCode + " >\n";
        //add title div
        tableCode = tableCode + titleCode;
        if (!isTemplate) {
            tableCode = tableCode + this.addContentHtmlCode(templateData, cell.getId(), true, undefined, PageHeightSettings.CurrentCellHeight);
        }
        tableCode = tableCode + "\t\t\t\t</td>\n";

        tableCode = tableCode + "\t\t\t</tr>\n";

        tableCode = tableCode + "\t\t</table>\n";
    }
    return tableCode;
}

/*
 * Pattern10 - Two rows, first row has height 30%, second row with height 70%
 * 
 */
function generateLayoutCodeForPattern10(isTemplate, separateJsCode) {
    if (isTemplate) {
        var layout = sap.ui.getCore().byId("matrix2");
    } else {
        var layout = sap.ui.getCore().byId("matrix1");
    }
    var tableCode;
    var jsCode = "";
    if (layout != null) {
        var rows = layout.getRows();
        var tableHeight = PageHeightSettings.ParentDivHeight;
        var height1 = ((tableHeight / 100) * 30) + "vh";
        var height2 = ((tableHeight / 100) * 70) + "vh";
        var heights = [height1, height2];
        var heightsNumbers = [((tableHeight / 100) * 30), ((tableHeight / 100) * 70)];
        tableCode = "\t\t<table id=\"" + layout.getId() + "\" style=\"table-layout:fixed;position:absolute;height:" + tableHeight + "vh;width:99%;border-collapse:collapse;\">\n";
        for (var i = 0; i < rows.length; i++) {
            var row = rows[i];
            var cells = row.getCells();
            tableCode = tableCode + "\t\t\t<tr id=\"" + row.getId() + "\">\n";
            for (var j = 0; j < cells.length; j++) {
                cell = cells[j];
                var panel = cell.getContent()[0];
                var templateData = panel.data();
                PageHeightSettings.CurrentCellHeight = heightsNumbers[i];
                var titleCode = generateTitle(templateData, cell);
                tableCode = tableCode + "\t\t\t\t<td id=\"" + cell.getId() + "\" class=\"borderWhite\" style=\"overflow:hidden;height:" + heights[i] + ";width:100%\"";
                tableCode = tableCode + " >\n";
                //add title div
                tableCode = tableCode + titleCode;
                //code for the plugin
                if (!isTemplate) {
                    if (panel.data("IsPlugin") == "true" || panel.data("IsPlugin") == true || panel.data("IsPlugin") != null) {
                    	tableCode = tableCode + CEPluginHandler.getHTMLCodeFromPlugin(panel.data("CustomPluginExtension"));
                    } else {
                    	if (separateJsCode) {
                    		var codes = this.addContentHtmlCode(templateData, cell.getId(), true, undefined, PageHeightSettings.CurrentCellHeight, true);
                    		 tableCode = tableCode + codes.html;
                             if (codes.js)
                                 jsCode = jsCode + codes.js;
                    	} else {
                    		tableCode = tableCode + this.addContentHtmlCode(templateData, cell.getId(), true, undefined, PageHeightSettings.CurrentCellHeight);
                    	}
                    }
                }
                tableCode = tableCode + "\t\t\t\t</td>\n";

            }
            tableCode = tableCode + "\t\t\t</tr>\n";

        }
        tableCode = tableCode + "\t\t</table>\n";
    }
    return tableCode;
}

/*
 * Pattern11 - Two columns, first column has width 30%, second column with width 70%
 * 
 */
function generateLayoutCodeForPattern11(isTemplate, separateJsCode) {
    if (isTemplate) {
        var layout = sap.ui.getCore().byId("matrix2");
    } else {
        var layout = sap.ui.getCore().byId("matrix1");
    }
    var tableCode;
    var jsCode = "";
    if (layout != null) {
        var rows = layout.getRows();
        var widths = layout.getWidths();
        var tableHeight = PageHeightSettings.ParentDivHeight - 2;
        tableCode = "\t\t<table id=\"" + layout.getId() + "\" style=\"position:absolute;height:" + tableHeight + "vh;width:99%;border-collapse:collapse;\">\n";
        var row = rows[0];
        var cells = row.getCells();

        tableCode = tableCode + "\t\t\t<tr id=\"" + row.getId() + "\">\n";
        for (var j = 0; j < cells.length; j++) {
            cell = cells[j];
            var panel = cell.getContent()[0];
            var templateData = panel.data();
            PageHeightSettings.CurrentCellHeight = tableHeight;
            var titleCode = generateTitle(templateData, cell);
            tableCode = tableCode + "\t\t\t\t<td id=\"" + cell.getId() + "\" class=\"borderWhite\" style=\"height:" + tableHeight + "vh;width:" + widths[j] + "\"";
            tableCode = tableCode + " >\n";
            //add title div
            tableCode = tableCode + titleCode;
            //code for the plugin
            if (!isTemplate) {
                if (panel.data("IsPlugin") == "true" || panel.data("IsPlugin") == true || panel.data("IsPlugin") != null) {
                	tableCode = tableCode + CEPluginHandler.getHTMLCodeFromPlugin(panel.data("CustomPluginExtension"));
                } else {
                	if (separateJsCode) {
                		var codes = this.addContentHtmlCode(templateData, cell.getId(), true, undefined, PageHeightSettings.CurrentCellHeight, true);
                		 tableCode = tableCode + codes.html;
                         if (codes.js)
                             jsCode = jsCode + codes.js;
                	} else {
                		tableCode = tableCode + this.addContentHtmlCode(templateData, cell.getId(), true, undefined, PageHeightSettings.CurrentCellHeight);
                	}
                }
            }

            tableCode = tableCode + "\t\t\t\t</td>\n";

        }
        tableCode = tableCode + "\t\t\t</tr>\n";

        tableCode = tableCode + "\t\t</table>\n";
    }
    return tableCode;
}

function addHtmlHeaderTags(isMobile, separateJsCode) {
	var html = "<!DOCTYPE HTML>\n<html>\n\t<head>\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n\t\t<meta charset=\"UTF-8\">\n";
	
	html = html + "\t\t<title>" + getDashboardTitle() + "</title>\n";
    var modules = "i5Chart,i5Grid,RuntimeUtilities";
    //adding libraries as and when required

    if (LoadModules.i5SPCChart)
        modules = modules + ",i5SPCChart";

    if (LoadModules.plantView)
        modules = modules + ",PlantView";

    if (LoadModules.queryObject)
        modules = modules + ",QueryObject";

    if (LoadModules.picTree)
        modules = modules + ",PICTree";

    if (LoadModules.KPI)
        modules = modules + ",KPI";

    if (LoadModules.uiElements)
        modules = modules + ",UIElements";

    if (LoadModules.queryTable)
        modules = modules + ",QueryTable";

    if (LoadModules.svg)
        modules = modules + ",svgObject";

    if (isObjectNotNull(isMobile) && isMobile)
        modules = modules + ",swipeLibrary";

    //html = html + addUICoreScript();
    html = html + "\n\t\t<script type=\"text/javascript\" src=\"/XMII/JavaScript/bootstrap.js\" data-libs=\"" + modules + "\"></script>\n";
    html = html + addUserIncludedScripts();
    
    var pageSettingsCode = addPageSettings(isMobile, separateJsCode);
    var paramDialogCode = addParamDialog(separateJsCode);
    var extensionCode = addExtensionScript(html);
    var tagCustomControl = "\t\t<script type=\"text/javascript\" src=\"/XMII/CompositionEnvironment/js/customControls/tag-color-picker.js\"></script>\n";
    var ssceCss = "\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"/XMII/CompositionEnvironment/StyleSheets/ssce.css\"></link>\n";
    var header = "\t\</head>\n\t<body style=\"padding:none;width:99%;height:98vh\">\n\t<div id=\"SSCEheader\">\n";
    //adding header configuration
    if (PageHeightSettings.HeaderHeight == 0)
        PageHeightSettings.HeaderHeight = 5;
    
    var headerUrl = "";
    if (PageSettings.General.Header.URL != "") {
        headerUrl = '\t\t<iframe src="' + PageSettings.General.Header.URL + '" width="100%" style="height:' + PageHeightSettings.HeaderHeight + 'vh" frameborder="0"></iframe>\n';
    }
    var parentDiv = "\t</div>\n\t<div id=\"parentDiv\" style=\"height:" + PageHeightSettings.ParentDivHeight + "vh;width:100%;overflow: auto;\">\n";
    
    if (separateJsCode) {
    	var codes = {};
    	codes.html = html + extensionCode + tagCustomControl + ssceCss + header + headerUrl + parentDiv;
    	codes.js = pageSettingsCode.js + paramDialogCode.js;
    } else {
    	codes = html + pageSettingsCode + paramDialogCode + extensionCode + tagCustomControl + ssceCss + header + headerUrl + parentDiv;
    }
    return codes;
}


function addTemplateHeaderTags() {
	var html = "<!DOCTYPE HTML>\n" +
	"<html>\n" +
	"\t<head>\n" +
	"\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n" +
	"\t\t<meta charset=\"UTF-8\">\n";

	//  html = html + addUICoreScript();
	html = html + "\n\t\t<script type=\"text/javascript\" src=\"/XMII/JavaScript/bootstrap.js\" data-libs=\"RuntimeUtilities\"></script>\n";
	html = html + addTemplatePageSettings();
	html = html + addParamDialog();

	html = html + "\t\t<script type=\"text/javascript\" src=\"/XMII/CompositionEnvironment/js/customControls/tag-color-picker.js\"></script>\n";
	html = html + "\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"/XMII/CompositionEnvironment/StyleSheets/ssce.css\"></link>\n";
	html = html +
	"\t\</head>" +
	"\n" +
	"\t<body style=\"padding:none;width:99%;height:98vh\">\n" +
	"\t<div id=\"SSCEheader\">\n";
	//adding header configuration

	if (PageHeightSettings.HeaderHeight == 0)
		PageHeightSettings.HeaderHeight = 5;

	if (TemplatePageSettings.General.Header.URL != "") {
		html = html + '\t\t<iframe src="' + TemplatePageSettings.General.Header.URL + '" width="100%" style="height:' + PageHeightSettings.HeaderHeight + 'vh" frameborder="0"></iframe>\n';
	}

	html = html + "\t</div>\n" +
	"\t<div id=\"parentDiv\" style=\"height:" + PageHeightSettings.ParentDivHeight + "vh;width:100%;overflow: auto;\">\n";
	return html;
}

function addPageSettings(isMobile, separateJsCode) {
    var tempSettings = jQuery.extend(true, {}, PageSettings);
    delete tempSettings.Security;
    var startScript = '\t\t<script type="text/javascript">\n';
    var jsScript = '\t\t\twindow["Settings"]= ' + JSON.stringify(tempSettings) + ';\n\t\t\tgenerateGlobalParameters();\n';

    if (isObjectNotNull(isMobile) && isMobile) {
    	jsScript += '\t\t\t\t$(document).ready(function (){onPageReady();});\n';
    }

    var endScript = '\t\t</script>\n';
    if (separateJsCode) {
    	var codes = {};
    	codes.html = "";
    	codes.js = jsScript;
    } else {
    	var codes = startScript + jsScript + endScript;
    }
    
    return codes;
}

function addTemplatePageSettings() {
    var tempSettings = jQuery.extend(true, {}, TemplatePageSettings);
    delete tempSettings.Security;
    var html = '\t\t<script type="text/javascript">\n';
    html = html + '\t\t\t\t' +
        'window["Settings"]= ' + JSON.stringify(tempSettings) + ';\n' +
        'generateGlobalParameters();\n';

    html += '\t\t</script>\n';
    return html;
}

function addParamDialog(separateJsCode) {
    var startScript = '\t\t<script type="text/javascript">\n';
    var jsScript = '\t\t\t\t$(document).ready(function (){\n\t\t\t\t\tonDocumentReady();\n\t\t\t\t\tbindEvent(Settings.General.Events);\n\t\t\t\t});\n';
    var endScript = '\t\t</script>\n';
    if (separateJsCode) {
    	var codes = {};
    	codes.html = "";
    	codes.js = jsScript;
    } else {
    	var codes = startScript + jsScript + endScript;
    }
    return codes;
}
/*function addUICoreScript(){

    var script = "\n\t\t<script type=\"text/javascript\" src=\"/sapui5/resources/sap-ui-core.js\" id=\"sap-ui-bootstrap\" data-sap-ui-libs=\"sap.ui.commons,sap.ui.ux3,sap.ui.table,sap.viz,sap.m\" data-sap-ui-theme=\"sap_bluecrystal\" ></script>\n";
    return script;
}*/
function addExtensionScript() {
	var html = "";
    for (i = 0; i < extensionJSFiles.length; i++) {
        html = html + "\n\t\t<script type=\"text/javascript\" src=\"" + extensionJSFiles[i] + "\"></script>\n";
    }
    return html;
}

function addUserIncludedScripts() {
    var script = '\n\t\t<!--@@****************************************************************  ' + oBundle.getText("XMSG_USER_FILES") + '  ****************************************************************@@-->\n';
    script += globalUserFiles;
    script += '\n\t\t<!--@@****************************************************************  ' + oBundle.getText("XMSG_USER_FILES_END") + '  ******************************************************************@@-->\n';
    return script;
}

function addHtmlEndTags(separateJsCode) {
	if (PageHeightSettings.FooterHeight == 0)
		PageHeightSettings.FooterHeight = 5;

	var startScript = '\t</div>\n\t<script>\n';
	var jsScript = '\t\ttry {\n' +
	'\t\t\t//@@*****************************************************************  ' + oBundle.getText("XMSG_USER_CODE") + '  *****************************************************************@@\n' +
	globalUserScript +
	'\n\t\t\t//@@*****************************************************************  ' + oBundle.getText("XMSG_USER_CODE_END") + '  *******************************************************************@@\n' +
	'\t} catch(e) {\n' +
	'\t\tshowNotificationBarMsg(3, e.message);\n' +
	'\t}\n';

	if (LoadModules.plantView)
		jsScript = jsScript + '\t\t\pCoSubscriber.subscribeTags();\n';

	if (LoadModules.queryObject)
		jsScript = jsScript + '\t\t\queryDataSubscriber.subscribe();\n';

	var endScript = '\t</script>\n';
	var startFooterDiv = "\t<div id=\"SSCEfooter\" style=\"position:absolute;bottom:0;width:99%\">\n";
	//adding Footer Configuration
	var footerCode = "";
	if (PageSettings.General.Footer.URL && PageSettings.General.Footer.URL != "") {
		footerCode = '\t\t<iframe src="' + PageSettings.General.Footer.URL + '" width="100%" style="height:' + PageHeightSettings.FooterHeight + 'vh" frameborder="0"></iframe>\n';
	}
	var endFooterDiv = "\t</div>\n\t</body>\n</html>";
	
	if (separateJsCode) {
		var endTags = {};
		endTags.html = startFooterDiv + footerCode + endFooterDiv;
		endTags.js = jsScript;
	} else {
		var endTags = startScript + jsScript + endScript + startFooterDiv + footerCode + endFooterDiv; 
	}
	return endTags;
}

function addTemplateEndTags() {
	if (PageHeightSettings.FooterHeight == 0)
		PageHeightSettings.FooterHeight = 5;
	
	var endTags = '\t</div>\n';
	endTags = endTags + "\t<div id=\"SSCEfooter\" style=\"position:absolute;bottom:0;width:99%\">\n";
	if (TemplatePageSettings.General.Footer.URL && TemplatePageSettings.General.Footer.URL != "") {
		endTags = endTags + '\t\t<iframe src="' + TemplatePageSettings.General.Footer.URL + '" width="100%" style="height:' + PageHeightSettings.FooterHeight + 'vh" frameborder="0"></iframe>\n';
	}
	endTags = endTags + '\t</div>\n\t</body>\n</html>';
	return endTags;

}

//style for title 
function titleStyle(templateData, cellStyle) {
    if (typeof templateData.TitleInfo !== "undefined" && templateData.TitleInfo !== null && templateData.TitleInfo.ShowOrNot === true) {
        cellStyle = cellStyle + "top:-" + templateData.TitleInfo.Height + "vh;";
    }
    return cellStyle;
}


function getQueryMode(templateData, cellID) {
    var queryTemplateName = templateData.Path + "/" + removeExtension(templateData.Name);
    var param = {
        "Mode": "loadParameters",
        "objectname": queryTemplateName,
        "content-type": "text/json",
        "GroupId": 1
    };
    var result = getDataFromServer(XMII_CECATALOG_URL, param);
    if (isObjectNotNull(result) && isObjectNotNull(result.Rowsets) && isObjectNotNull(result.Rowsets.Rowset) && isObjectNotNull(result.Rowsets.Rowset[0]) && isObjectNotNull(result.Rowsets.Rowset[0].Row)) {
        var rows = result.Rowsets.Rowset[0].Row;
        for (i = 0; i < rows.length; i++) {
            var row = rows[i];
            if (isObjectNotNull(row.Name) && row.Name == "Mode") {
                return row.DefaultValue;
            }
        }
    }
    return null;
}

function addContentScript(templateData, cellID, fileType, style, cellHeight, separateJsCode) {
    if (templateData != null) {
        var htmlScript = "";
        var jsCode = "";
        var startScript = '\t\t\t\t\t<script>\n';
        var endScript = "\t\t\t\t\t</script>\n";
        var queryTemplate = templateData.Path + "/" + removeExtension(templateData.Name);
        //boolean property in the templateData to show or hide the 'Configure Display Template' menu 
        templateData.EnableDisplayTempPropertiesMenu = false;

        //If it is a CatalogQuery with mode set as PICAnalysis, the chart should be displayed as KPIView
        //To get the mode

        if (isObjectNotNull(templateData) && isObjectNotNull(templateData.Config) && getQueryMode(templateData, cellID) == "PICAnalysis" && templateData.Config.type != "Table") {
            templateData.EnableDisplayTempPropertiesMenu = true;
            htmlScript = addKPIContentHTML(templateData, cellID, style, cellHeight);
            return htmlScript;
        }
        if (templateData.Visualization != null) {
            //When the visualization is either i5SPCChart or chart
            if (templateData.Visualization == 'Chart' || templateData.Visualization == 'SPCChart') {
                var chartType;
                if (templateData.Visualization == 'Chart')
                    chartType = determineChartType(templateData.ChartType);
                else
                    chartType = getSPCChartTypeNumber(templateData.ChartType);

                var hQueryTemplate = templateData.Path + "/" + removeExtension(templateData.Name);
                var fileType = determineFileType(templateData.FileType);

                //set the flag to display 'Configure Display Template Properties' button in Menu Bar
                templateData.EnableDisplayTempPropertiesMenu = true;
                var cellStyle = "position:relative;top:0px;bottom:0px;left:0px;right:0px;overflow:auto;display:inline-block;height:100%;width:100%;";

                if (style !== undefined) {
                    cellStyle = style;
                } else if (cellHeight !== undefined) {
                    //replacing the cell height if the call is not from Mobile
                    cellStyle = cellStyle.replace("height:100%", "height:" + cellHeight + "vh");
                }
                //title style
                cellStyle = titleStyle(templateData, cellStyle);
                htmlScript += '\t\t\t\t\t<div id=\"chart' + cellID + '\" style=\"' + cellStyle + '\">\n';
                //                htmlScript += '\t\t\t\t\tjQuery.sap.require("sap.viz.library");\n' + 
                jsCode += '\t\t\t\t\ttry{\n';
                if (fileType == FILE_TYPE_MDO) {
                    //appending parameters to the URL
                    /*      var url = XMII_MDO_ODATA_URL + "?Mode=GetData" 
                            + "&$format=json"
                            + "&MDO=" + hQueryTemplate
                            + "&Attributes=" + templateData.XAxis.join(",");
                    */
                    var url = "/XMII/Illuminator" + "?";

                    var queryParameters = {
                        "objectname": hQueryTemplate,
                        "class": "MDOPersistentDefinition",
                        "content-type": "text/json",
                        "mode": "LOAD"
                    };
                    var data = getDataFromServer(XMII_CATALOG_URL, queryParameters);
                    var attributes = [];
                    var displayNames = [];
                    var selectedColumns = null;
                    var MIIObjectAttribute = [];

                    if (data != null && data.MDODefinition.MDOAttributes.MDOAttribute != null) {
                        MIIObjectAttribute = data.MDODefinition.MDOAttributes.MDOAttribute;
                    }

                    if (MIIObjectAttribute.length > 0) {

                        for (var attributeIndex = 0; attributeIndex < MIIObjectAttribute.length; attributeIndex++) {
                            var columnName = MIIObjectAttribute[attributeIndex].Name;
                            var columnAlias = MIIObjectAttribute[attributeIndex].Alias;
                            if (selectedColumns != null) {
                                if ($.inArray(columnAlias, selectedColumns) > -1) {
                                    attributes.push(columnName);
                                    displayNames.push(columnAlias);
                                } else if ($.inArray(columnName, selectedColumns) > -1) {
                                    attributes.push("[" + columnName + "]");
                                }
                            } else {
                                attributes.push(columnName);
                                displayNames.push(columnAlias);
                            }
                        }
                        if (fileType == "MDO") {
                            queryParameters = {
                                "Attributes": attributes.join(","),
                                "DisplayNames": displayNames.join(","),
                                "Server": "MDOConnector",
                                "MDO": hQueryTemplate,
                                "mode": "Select",
                                "content-type": "text/json"
                            };
                            url += "Attributes=";

                            for (var i = attributes.length; i > 1; i--) {
                                url += attributes.pop() + ",";
                            }

                            url += attributes.pop() + "&DisplayNames=";

                            for (var i = displayNames.length; i > 1; i--) {
                                url += displayNames.pop() + ",";
                            }

                            url += displayNames.pop() + "&Server=MDOConnector&MDO=" + hQueryTemplate + "&mode=Select&content-type=text/json";

                        }
                    }

                    /*if((templateData.XAxis != null &&  templateData.XAxis.length>0) || (templateData.YAxis != null &&  templateData.YAxis.length>0))
                        url += ",";
                    url += templateData.YAxis.join(",");*/
                    jsCode += "\t\t\t\t\t\tvar chart_" + cellID + " = " + "new com.sap.xmii.chart.hchart.i5Chart(" + chartType + ",\"\",\"" + url + "\");\n";
                }
                //When i5SPCChart
                else if (templateData.Visualization == 'SPCChart') {
                    LoadModules.i5SPCChart = true;
                    jsCode += "\t\t\t\t\t\tvar chart_" + cellID + " = " + "new com.sap.xmii.chart.hchart.i5SPCChart(" + chartType + ",\"" + hQueryTemplate + "\");\n";
                } else {
                    jsCode += "\t\t\t\t\t\tvar chart_" + cellID + " = " + "new com.sap.xmii.chart.hchart.i5Chart(" + chartType + ",\"" + hQueryTemplate + "\");\n";
                }

                //add the Title if customised 
                if (templateData.Title != null) {
                    jsCode += "\t\t\t\t\t\tchart_" + cellID + ".getChartObject().setTitle(\"" + templateData.Title + "\");\n";
                }

                //var height = jQuery("#"+cellID).height();
                //if(height != null && height != undefined)
                //htmlScript += "\t\t\t\t\t\tchart_" + cellID + ".setChartHeight(\""+height+"\");\n";
                //add the Parameters if configured
                if (templateData.Parameters != null) {
                    for (var i = 0; i < templateData.Parameters.length; i++) {
                        if (templateData.Parameters[i].UserParameter != "" && templateData.Parameters[i].UserParameter != undefined)
                            jsCode += "\t\t\t\t\t\tchart_" + cellID + ".getQueryObject().setParameter(\"" + templateData.Parameters[i].Name + "\"," + templateData.Parameters[i].UserParameter + ");\n";
                        else if (templateData.Parameters[i].isChanged)
                            jsCode += "\t\t\t\t\t\tchart_" + cellID + ".getQueryObject().setParameter(\"" + templateData.Parameters[i].Name + "\",\"" + templateData.Parameters[i].Value + "\");\n";

                    }
                }
                //add the X Axis and Y Axis Columns  if configured
                if (templateData.XAxis != null) {
                    //For i5SPCChart attribute column is label column
                    if (templateData.Visualization == 'SPCChart')
                        jsCode += "\t\t\t\t\t\tchart_" + cellID + ".getChartObject().setAttributeColumns(\"" + templateData.XAxis.join(",") + "\");\n";
                    else
                        jsCode += "\t\t\t\t\t\tchart_" + cellID + ".getChartObject().setLabelColumns(\"" + templateData.XAxis.join(",") + "\");\n";
                }
                if (templateData.YAxis != null) {
                    jsCode += "\t\t\t\t\t\tchart_" + cellID + ".getChartObject().setValueColumns(\"" + templateData.YAxis.join(",") + "\");\n";
                }
                //add the Parameters if configured
                if (templateData.DisplayParameters != null) {
                    for (var i = 0; i < templateData.DisplayParameters.length; i++) {
                        if (templateData.DisplayParameters[i].DataType == 2 && templateData.DisplayParameters[i].UserParameter != "" && templateData.DisplayParameters[i].UserParameter != undefined) {
                            if (templateData.DisplayParameters[i].Name == "ValueColumns")
                                jsCode += "\t\t\t\t\t\tchart_" + cellID + ".getChartObject().set" + templateData.DisplayParameters[i].Name + "(" + templateData.DisplayParameters[i].UserParameter + ");\n";
                            else
                                jsCode += "\t\t\t\t\t\tchart_" + cellID + ".getChartObject().set" + templateData.DisplayParameters[i].Name + "(" + templateData.DisplayParameters[i].UserParameter + ");\n";
                        } else if (templateData.DisplayParameters[i].UserParameter != "" && templateData.DisplayParameters[i].UserParameter != undefined) {
                            jsCode += "\t\t\t\t\t\tchart_" + cellID + ".getChartObject().set" + templateData.DisplayParameters[i].Name + "(" + templateData.DisplayParameters[i].UserParameter + ");\n";
                        } else if (templateData.DisplayParameters[i].DataType == 2 && (templateData.DisplayParameters[i].isChanged)) {
                            if (templateData.DisplayParameters[i].Name == "ValueColumns")
                                jsCode += "\t\t\t\t\t\tchart_" + cellID + ".getChartObject().set" + templateData.DisplayParameters[i].Name + "(\"" + templateData.DisplayParameters[i].Value + "\");\n";
                            else
                                jsCode += "\t\t\t\t\t\tchart_" + cellID + ".getChartObject().set" + templateData.DisplayParameters[i].Name + "(" + templateData.DisplayParameters[i].Value + ");\n";
                        }else if (templateData.DisplayParameters[i].isChanged && (templateData.DisplayParameters[i].Name.indexOf(".")!=-1)) { 
                        	jsCode += "\t\t\t\t\t\tchart_" + cellID + ".getChartObject().chartPropertyConfig.setProperty(\"" + templateData.DisplayParameters[i].Name + "\",\"" + templateData.DisplayParameters[i].Value + "\");\n";
                        }else if (templateData.DisplayParameters[i].isChanged) {
                            jsCode += "\t\t\t\t\t\tchart_" + cellID + ".getChartObject().set" + templateData.DisplayParameters[i].Name + "(\"" + templateData.DisplayParameters[i].Value + "\");\n";
                        }
                    }
                }

                //add the Query Parameters if configured (for MDO)
                if (templateData.QueryParameters != null) {
                    for (var i = 0; i < templateData.QueryParameters.length; i++) {
                        if (templateData.QueryParameters[i].UserParameter != "" && templateData.QueryParameters[i].UserParameter != undefined) {
                            jsCode += "\t\t\t\t\t\tchart_" + cellID + ".getQueryObject().setParameter(\"" + templateData.QueryParameters[i].Name + "\"," + templateData.QueryParameters[i].UserParameter + ");\n";
                        } else if (templateData.QueryParameters[i].isChanged) {
                            jsCode += "\t\t\t\t\t\tchart_" + cellID + ".getQueryObject().setParameter(\"" + templateData.QueryParameters[i].Name + "\",\"" + templateData.QueryParameters[i].Value + "\");\n";
                        }
                    }
                }

                jsCode += "\t\t\t\t\t\tchart_" + cellID + ".registerCreationEventHandler(ceController.addObject(\"" + cellID + "\",chart_" + cellID + "));\n";


                jsCode += "\t\t\t\t\t\tchart_" + cellID + ".draw(\"chart" + cellID + "\");\n";
                jsCode += '\t\t\t\t\t\t}catch(err){\n';
                jsCode += '\t\t\t\t\t\t\tsap.ui.core.BusyIndicator.hide();\n';
                jsCode += '\t\t\t\t\t\t\tconsole.log("An error has occured: " + err.name + "-" + err.message);\n';
                jsCode += '\t\t\t\t\t\t\tif(err instanceof com.sap.xmii.common.exception.MIIi5Exception){\n';
                jsCode += '\t\t\t\t\t\t\t\tvar oTextView = new sap.ui.commons.TextView();\n' +
                    '\t\t\t\t\t\t\t\toTextView.setText(err.message);\n' +
                    '\t\t\t\t\t\t\t\toTextView.placeAt("chart' + cellID + '","only");\n';
                jsCode += '\t\t\t\t\t\t\t}\n';
                jsCode += '\t\t\t\t\t\t}\n';
            } else if (templateData.Visualization == 'Grid') {
                LoadModules.i5Grid = true;
                var gridType = determineGridType(templateData.GridType);

                var hQueryTemplate = templateData.Path + "/" + removeExtension(templateData.Name);
                var fileType = determineFileType(templateData.FileType);

                //set the flag to display 'Configure Display Template Properties' button in Menu Bar
                templateData.EnableDisplayTempPropertiesGridMenu = true;
                var cellStyle = "position:relative;top:0px;bottom:0px;left:0px;right:0px;overflow:auto;display:inline-block;height:100%;width:100%;";

                if (style !== undefined) {
                    cellStyle = style;
                } else if (cellHeight !== undefined) {
                    //replacing the cell height if the call is not from Mobile
                    cellStyle = cellStyle.replace("height:100%", "height:" + cellHeight + "vh");
                }

                //style for title
                cellStyle = titleStyle(templateData, cellStyle);
                htmlScript += '\t\t\t\t\t<div id=\"grid' + cellID + '\" style=\"' + cellStyle + '\">\n';
                //                htmlScript += '\t\t\t\t\tjQuery.sap.require("sap.viz.library");\n' +
                jsCode += '\t\t\t\t\ttry{\n';

                //if MDO object is being converted to i5Grid
                if (fileType == FILE_TYPE_MDO)
                    hQueryTemplate = "Predefined/DefaultMDOQuery";

                //Grid rendering Constructor
                jsCode += "\t\t\t\t\t\tvar grid_" + cellID + " = " + "new com.sap.xmii.grid.init.i5Grid(" + gridType + ",\"" + hQueryTemplate + "\"," + "true);\n";

                if (templateData.Title != null) {
                    jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getChartTemplateObject().setProperty(\"Title\",\"" + templateData.Title + "\");\n";
                }
                if (fileType == 'Query' || fileType == 'MDO') {
                    jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getChartTemplateObject().setProperty(\"FileType\",\"" + fileType + "\");\n";
                    jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getChartTemplateObject().setProperty(\"GridType\",\"" + templateData.GridType + "\");\n";
                    jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getChartTemplateObject().setProperty(\"DisplayColumns\",\"" + templateData.SelectedColumns.join(",") + "\");\n";
                }
                if (fileType == "MDO") {
                    jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getQueryObject().setParameter(\"Mode\", \"Select\");\n";
                    jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getQueryObject().setParameter(\"MDO\", \"" + templateData.Path + "/" + removeExtension(templateData.Name) + "\");\n";
                    jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getQueryObject().setParameter(\"Attributes\", \"" + templateData.SelectedColumns.join(",") + "\");\n";
                }
                /*//add the Parameters if configured
                if (templateData.Parameters != null) {
                    for (var i = 0; i < templateData.Parameters.length; i++) {
                        if (templateData.Parameters[i].UserParameter != "" && templateData.Parameters[i].UserParameter != undefined) 
                            htmlScript += "\t\t\t\t\t\tgrid_" + cellID + ".getQueryObject().setParameter(\"" + templateData.Parameters[i].Name + "\"," + templateData.Parameters[i].UserParameter + ");\n";
                       else if (templateData.Parameters[i].isChanged)
                            htmlScript += "\t\t\t\t\t\tgrid_" + cellID + ".getQueryObject().setParameter(\"" + templateData.Parameters[i].Name + "\",\"" + templateData.Parameters[i].Value + "\");\n";
                    }
                }*/

                jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".registerCreationEventHandler(ceController.addObject(\"" + cellID + "\",grid_" + cellID + "));\n";
                jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".draw(\"grid" + cellID + "\");\n";
                jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getGridObject().setDisplayColumns(\"" + templateData.SelectedColumns.join(",") + "\");\n";

                //add the parameters if Configured

                //add the Display Parameters
                if (templateData.DisplayParameters != null) {
                    for (var i = 0; i < templateData.DisplayParameters.length; i++) {
                        if (templateData.DisplayParameters[i].DataType == 2 && templateData.DisplayParameters[i].UserParameter !== "" && templateData.DisplayParameters[i].UserParameter !== undefined) {
                            jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.DisplayParameters[i].Name + "\"," + templateData.DisplayParameters[i].UserParameter + ");\n";
                        } else if (templateData.DisplayParameters[i].UserParameter != "" && templateData.DisplayParameters[i].UserParameter !== undefined) {
                            if (templateData.DisplayParameters[i].DataType == 1 || templateData.DisplayParameters[i].DataType == 3) {
                                jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.DisplayParameters[i].Name + "\"," + templateData.DisplayParameters[i].UserParameter + ");\n";
                            } else {
                                jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.DisplayParameters[i].Name + "\"," + templateData.DisplayParameters[i].UserParameter + ");\n";
                            }
                        } else if (templateData.DisplayParameters[i].DataType == 2 && (templateData.DisplayParameters[i].isChanged)) {
                            jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.DisplayParameters[i].Name + "\"," + templateData.DisplayParameters[i].Value + ");\n";

                        } else if (templateData.DisplayParameters[i].isChanged) {
                            //if(isNaN(templateData.Parameters[i].Value)) {
                            if (templateData.DisplayParameters[i].DataType == 1 || templateData.DisplayParameters[i].DataType == 3) {
                                if (templateData.DisplayParameters[i].Name == "DisplayColumns") {
                                    if (templateData.DisplayParameters[i].Value == "NA")
                                        jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getChartTemplateObject().setProperty" + "( \"" + templateData.DisplayParameters[i].Name + "\" , \"" + templateData.SelectedColumns.join(",") + "\");\n";
                                    else
                                        jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.DisplayParameters[i].Name + "\",\"" + templateData.DisplayParameters[i].Value + "\");\n";
                                } else
                                    jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.DisplayParameters[i].Name + "\",\"" + templateData.DisplayParameters[i].Value + "\");\n";
                            } else {
                                jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.DisplayParameters[i].Name + "\"," + templateData.DisplayParameters[i].Value + ");\n";
                            }
                        }
                    }
                }

                //add the Parameters if configured
                if (templateData.Parameters != null) {
                    for (var i = 0; i < templateData.Parameters.length; i++) {
                        if (templateData.Parameters[i].UserParameter != "" && templateData.Parameters[i].UserParameter !== undefined) {
                            jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getQueryObject().setParameter(\"" + templateData.Parameters[i].Name + "\"," + templateData.Parameters[i].UserParameter + ");\n";
                        } else if (templateData.Parameters[i].isChanged) {
                            jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getQueryObject().setParameter(\"" + templateData.Parameters[i].Name + "\",\"" + templateData.Parameters[i].Value + "\");\n";
                        }
                    }
                }

                jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".refresh();\n";
                jsCode += '\t\t\t\t\t\t}catch(err){\n';
                jsCode += '\t\t\t\t\t\t\tsap.ui.core.BusyIndicator.hide();\n';
                jsCode += '\t\t\t\t\t\t\tconsole.log("An error has occured: " + err.name + "-" + err.message);\n';
                jsCode += '\t\t\t\t\t\t\tif(err instanceof com.sap.xmii.common.exception.MIIi5Exception){\n';
                jsCode += '\t\t\t\t\t\t\t\tvar oTextView = new sap.ui.commons.TextView();\n' +
                    '\t\t\t\t\t\t\t\toTextView.setText(err.message);\n' +
                    '\t\t\t\t\t\t\t\toTextView.placeAt("grid' + cellID + '","only");\n';
                jsCode += '\t\t\t\t\t\t\t}\n';
                jsCode += '\t\t\t\t\t\t}\n';
            } else {
                LoadModules.queryTable = true;
                //reset the flag to show dipslay param menu if Visualization type is 'table'
                templateData.EnableDisplayTempPropertiesMenu = false;
                templateData.EnableDisplayTempPropertiesGridMenu = false;
                if (fileType == FILE_TYPE_QUERY) {
                    fileType = templateData.FileType;
                }
                //if not Chart , then it is a Table
                var cellStyle = "position:relative;top:0px;bottom:0px;left:0px;right:0px;overflow:auto;display:inline-block;height:100%;width:100%";

                if (style !== undefined) {
                    cellStyle = style;
                } else if (cellHeight !== undefined) {
                    //replacing the cell height if the call is not from Mobile
                    cellStyle = cellStyle.replace("height:100%", "height:" + cellHeight + "vh");
                }
                cellStyle = titleStyle(templateData, cellStyle);
                htmlScript = '\t\t\t\t\t<div id=\"query' + cellID + '\" style=\"' + cellStyle + '\">\n';
                jsCode += '\t\t\t\t\ttry{\n';
                jsCode += '\t\t\t\t\t\tvar query_' + cellID + ' = new QueryTable("' + queryTemplate + '", "' + fileType + '");\n';

                //add the Title if customised 
                if (templateData.Title != null) {
                    jsCode += "\t\t\t\t\t\tquery_" + cellID + ".setTitle(\"" + templateData.Title + "\");\n";
                }
                if (templateData.AutoRefresh != null) {
                    jsCode += "\t\t\t\t\t\tquery_" + cellID + ".setAutoRefresh(\"" + templateData.AutoRefresh + "\");\n";
                }
                if (templateData.RefreshRate != null) {
                    jsCode += "\t\t\t\t\t\tquery_" + cellID + ".setRefreshRate(\"" + templateData.RefreshRate + "\");\n";
                }
                if (templateData.Parameters != null) {
                    for (var i = 0; i < templateData.Parameters.length; i++) {
                        if (templateData.Parameters[i].UserParameter != "" && templateData.Parameters[i].UserParameter != undefined)
                            jsCode += "\t\t\t\t\t\tquery_" + cellID + ".setParameter(\"" + templateData.Parameters[i].Name + "\"," + templateData.Parameters[i].UserParameter + ");\n";
                        else if (templateData.Parameters[i].isChanged)
                            jsCode += "\t\t\t\t\t\tquery_" + cellID + ".setParameter(\"" + templateData.Parameters[i].Name + "\",\"" + templateData.Parameters[i].Value + "\");\n";
                    }
                }
                if (templateData.SelectedColumns != null) {
                    jsCode += "\t\t\t\t\t\tquery_" + cellID + ".setColumns(\"" + templateData.SelectedColumns.join(",") + "\");\n";
                }

                //add the Query Parameters if configured (for MDO)
                if (templateData.QueryParameters != null) {
                    for (var i = 0; i < templateData.QueryParameters.length; i++) {
                        if (templateData.QueryParameters[i].UserParameter != "" && templateData.QueryParameters[i].UserParameter != undefined)
                            jsCode += "\t\t\t\t\t\tquery_" + cellID + ".setParameter(\"" + templateData.QueryParameters[i].Name + "\"," + templateData.QueryParameters[i].UserParameter + ");\n";
                        else if (templateData.QueryParameters[i].isChanged)
                            jsCode += "\t\t\t\t\t\tquery_" + cellID + ".setParameter(\"" + templateData.QueryParameters[i].Name + "\",\"" + templateData.QueryParameters[i].Value + "\");\n";
                    }
                }
                jsCode += "\t\t\t\t\t\tquery_" + cellID + ".draw(\"query" + cellID + "\");\n";
                jsCode += '\t\t\t\t\t}catch(err){\n';
                jsCode += '\t\t\t\t\t\tconsole.log("An error has occured: " + err.name + "-" + err.message);\n';
                jsCode += '\t\t\t\t\t}\n';
            }
        } else {
            templateData.EnableDisplayTempPropertiesMenu = false;
            templateData.EnableDisplayTempPropertiesGridMenu = false;
            if (fileType == FILE_TYPE_QUERY) {
                fileType = templateData.FileType;
            }
            //If no Visualization has been configured , then display as a Table
            var cellStyle = "position:relative;top:0px;bottom:0px;left:0px;right:0px;overflow:auto;display:inline-block;height:100%;width:100%";
            if (style !== undefined) {
                cellStyle = style;
            } else if (cellHeight !== undefined) {
                //replacing the cell height if the call is not from Mobile
                cellStyle = cellStyle.replace("height:100%", "height:" + cellHeight + "vh");
            }
            cellStyle = titleStyle(templateData, cellStyle);
            htmlScript = '\t\t\t\t\t<div id=\"query' + cellID + '\" style=\"' + cellStyle + '\">\n';
            jsCode += '\t\t\t\t\ttry{\n';
            if (getQueryMode(templateData, cellID) == "PICAnalysis") {
                templateData.Mode = "PICAnalysis";
            }
            if (fileType == "KPI" || (getQueryMode(templateData, cellID) == "PICAnalysis" && isObjectNotNull(templateData.Config))) {
                LoadModules.queryTable = true;
                LoadModules.KPI = true;
                jsCode += '\t\t\t\t\t\tvar query_' + cellID + ' = new QueryTable("' + queryTemplate + '", "' + fileType + '", ' + JSON.stringify(templateData.Config.dimensions) + ', ' + JSON.stringify(templateData.Config.duration) + ', "' + templateData.Mode + '", ' + JSON.stringify(templateData.Config) + ');\n';

                if (templateData.Config.autoRefresh != null) {
                    jsCode += "\t\t\t\t\t\tquery_" + cellID + ".setAutoRefresh(\"" + templateData.Config.autoRefresh + "\");\n";
                }
                if (templateData.Config.refreshRate != null) {
                    jsCode += "\t\t\t\t\t\tquery_" + cellID + ".setRefreshRate(\"" + templateData.Config.refreshRate + "\");\n";
                }
                var timeDimensionArray = [];
                if (templateData.Config.duration.minuteDisplay) {
                    if ("5 Minutes" == templateData.Config.duration.granularity) {
                        timeDimensionArray.push("Min_5");
                    } else if ("10 Minutes" == templateData.Config.duration.granularity) {
                        timeDimensionArray.push("Min_10");
                    } else if ("15 Minutes" == templateData.Config.duration.granularity) {
                        timeDimensionArray.push("Min_15");
                    } else if ("20 Minutes" == templateData.Config.duration.granularity) {
                        timeDimensionArray.push("Min_20");
                    } else if ("30 Minutes" == templateData.Config.duration.granularity) {
                        timeDimensionArray.push("Min_30");
                    }
                }
                if (templateData.Config.duration.hourDisplay) {
                    timeDimensionArray.push("Hour");
                }
                if (templateData.Config.duration.dayDisplay) {
                    timeDimensionArray.push("Day");
                }
                if (templateData.Config.duration.weekDisplay) {
                    timeDimensionArray.push("Week");
                }
                if (templateData.Config.duration.monthDisplay) {
                    timeDimensionArray.push("Month");
                }
                if (templateData.Config.duration.quarterDisplay) {
                    timeDimensionArray.push("Quarter");
                }
                if (templateData.Config.duration.yearDisplay) {
                    timeDimensionArray.push("Year");
                }
                if (templateData.Config.duration.shiftDisplay) {
                	timeDimensionArray.push("Shift");
                }
                jsCode += "\t\t\t\t\t\tquery_" + cellID + ".setSelectedTimeDimensions(\"" + timeDimensionArray + "\");\n";
            } else {
                LoadModules.queryTable = true;
                jsCode += '\t\t\t\t\t\tvar query_' + cellID + ' = new QueryTable("' + queryTemplate + '", "' + fileType + '","' + "" + '","' + "" + '","' + templateData.Mode + '", "' + JSON.stringify(templateData.Config) + '");\n';
            }

            //add the Title if customised 
            if (templateData.Title != null) {
                jsCode += "\t\t\t\t\t\tquery_" + cellID + ".setTitle(\"" + templateData.Title + "\");\n";
            }
            if (templateData.Parameters != null) {
                for (var i = 0; i < templateData.Parameters.length; i++) {
                    if (templateData.Parameters[i].UserParameter != "" && templateData.Parameters[i].UserParameter != undefined) {
                        jsCode += "\t\t\t\t\t\tquery_" + cellID + ".setParameter(\"" + templateData.Parameters[i].Name + "\"," + templateData.Parameters[i].UserParameter + ");\n";
                    } else if (templateData.Parameters[i].isChanged) {
                        jsCode += "\t\t\t\t\t\tquery_" + cellID + ".setParameter(\"" + templateData.Parameters[i].Name + "\",\"" + templateData.Parameters[i].Value + "\");\n";
                    }
                }
            }
            //Have to override query parameters with the values in the config visualization window
            if (fileType != "KPI" && isObjectNotNull(templateData.Config)) {
                var queryParams = getParametersForCatalogQuery(templateData, false);
                if (queryParams != undefined) {
                    $.each(queryParams, function(name, value) {
                        if (name == "ScopePropertyExpression") {
                            value = com.sap.xmii.common.util.MIIi5Util.stringReplaceAll(value, "\"", "\\\"");
                        }
                        if (name == "ScopePeColExpression") {
                            value = com.sap.xmii.common.util.MIIi5Util.stringReplaceAll(value, "\"", "\\\"");
                        }
                        jsCode += "\t\t\t\t\t\tquery_" + cellID + ".setParameter(\"" + name + "\",\"" + value + "\");\n";
                    });
                }
            }
            if (templateData.SelectedColumns != null) {
                jsCode += "\t\t\t\t\t\tquery_" + cellID + ".setColumns(\"" + templateData.SelectedColumns.join(",") + "\");\n";
            }

            //add the Query Parameters if configured (for MDO)
            if (templateData.QueryParameters != null) {
                for (var i = 0; i < templateData.QueryParameters.length; i++) {
                    if (templateData.QueryParameters[i].UserParameter != "" && templateData.QueryParameters[i].UserParameter != undefined) {
                        jsCode += "\t\t\t\t\t\tquery_" + cellID + ".setParameter(\"" + templateData.QueryParameters[i].Name + "\"," + templateData.QueryParameters[i].UserParameter + ");\n";
                    } else if (templateData.QueryParameters[i].isChanged)
                        jsCode += "\t\t\t\t\t\tquery_" + cellID + ".setParameter(\"" + templateData.QueryParameters[i].Name + "\",\"" + templateData.QueryParameters[i].Value + "\");\n";
                }
            }

            jsCode += "\t\t\t\t\t\tquery_" + cellID + ".draw(\"query" + cellID + "\");\n";
            jsCode += '\t\t\t\t\t}catch(err){\n';
            jsCode += '\t\t\t\t\t\tconsole.log("An error has occured: " + err.name + "-" + err.message);\n';
            jsCode += '\t\t\t\t\t}\n';
        }
        if (separateJsCode) {
            var cellHtml = {};
            cellHtml.html = htmlScript + '\t\t\t\t\t\t</div>\n';
            cellHtml.js = jsCode;
        } else {
            var cellHtml = htmlScript + startScript + jsCode + endScript + '\t\t\t\t\t\t</div>\n';
        }

        return cellHtml;
    }
}
/*
 * The templateData is of the format  * {"Name" : "Default", "ParentFolderName" : "", "Path" : "Default", "ParentPath" : "", "FileType" : "", "MappedQueryTemplate" : "NA" }
 * The applet code generated using the data in the object embedded in the cell.
 * 
 */
function addContentHtmlCode(objectData, cellID, runtime, style, cellHeight, separateJsCode) {

    var templateData = objectData.Object;
    var tagArray = objectData.TagArray;
    var queryArray = objectData.QueryArray;
    var SVGArray = objectData.SVGArray;
    if (separateJsCode) {
        var cellHtml = {};
        cellHtml.html = "";
        cellHtml.js = "";
    } else {
        var cellHtml = "";
    }
    var cellJs = "";
    var divCellId = "";
    var startScript = '\t\t\t\t\t<script>\n';
    var endScript = "\t\t\t\t\t</script>\n";
    // get event tree data for custom function generation
    var eventsTreeData = PageSettings.General.Events;

    // loop event tree to add all custom function to globalUserScript
    if (eventsTreeData) {
        for (var i = 0, len1 = eventsTreeData.length; i < len1; i++) {
            handlerList = eventsTreeData[i].Handlers;
            for (var j = 0, len2 = handlerList.length; j < len2; j++) {
                customHandler = handlerList[j].CustomHandler.trim();
                if (customHandler) {
                    if (globalUserScript.search("function " + customHandler) == -1) {
                        var javadoc = '\n/**' +
                            '\n' + oBundle.getText("CUSTOM_HANDLER_CALL_BACK", handlerList[j].Name) +
                            '\n**/';
                        globalUserScript += javadoc;
                        globalUserScript += '\n' + 'function ' + customHandler + '(){\n' +
                            '//TODO\n' +
                            '}\n';
                    }
                }
            }
        }
    }

    //flag to know whether the dashboard in runtime or design
    ssceLayout.isDesign = !runtime;
    if (templateData != null && (templateData.isPlugin == false || templateData.isPlugin == undefined) && !isImage(templateData.Name) && !isVDSFile(templateData.Name) && !isXCelcius(templateData.Name) && !isVEFile(templateData.Name) && (!isSVGFile(templateData.Name) && templateData.FileType != "SVGObject") && !isWebPage(templateData.Name)) {
        var code = templateData.FileType;
        var fileType = determineFileType(code);
        if (fileType == FILE_TYPE_PIC_GROUP) {
            LoadModules.picTree = true;
            divCellId = "picTree:" + cellID;
            var cellStyle = "width:100%;height:100%;";
            if (style !== undefined) {
                cellStyle = style;
            } else if (cellHeight !== undefined) {
                //replacing the cell height if the call is not from Mobile
                cellStyle = cellStyle.replace("height:100%", "height:" + cellHeight + "vh");
            }

            //title style
            cellStyle = titleStyle(objectData, cellStyle);
            var html = '\t\t\t\t\t<div id=\"' + divCellId + '\" style=\"' + cellStyle + '\">\n';

            cellJs = '\t\t\t\t\ttry{\n';
            var selectFunctionName = "";
            if (isObjectNotNull(templateData.CallbackData) && isObjectNotNull(templateData.CallbackData.SelectCallback) && templateData.CallbackData.SelectCallback && isObjectNotNull(templateData.CallbackData.SelectFunctionName) && templateData.CallbackData.SelectFunctionName != "") {
                selectFunctionName = templateData.CallbackData.SelectFunctionName;
                if (globalUserScript.search("function " + selectFunctionName) == -1) {
                    var javadoc = '\n/**' +
                        '\n' + oBundle.getText("PICTREE_NODE_SELECT_CALLBACK") +
                        '\nParameters:' +
                        '\n\tpicNode :\t' + oBundle.getText("PICTREE_SELECT_CALLBACK_OBJECT") +
                        '\n\t\tpicNode.getName() :\t' + oBundle.getText("PICNODE_GETNAME") +
                        '\n\t\tpicNode.getNamespace() :\t' + oBundle.getText("PICNODE_GETNAMESPACE") +
                        '\n\t\tpicNode.getCategory() :\t' + oBundle.getText("PICNODE_GETCATEGORY") +
                        '\n\t\tpicNode.getType() :\t' + oBundle.getText("PICNODE_GETTYPE") +
                        '\n\t\tpicNode.getDescription() :\t' + oBundle.getText("PICNODE_GETDESCRIPTION") +
                        '\n\t\tpicNode.getParent() :\t' + oBundle.getText("PICNODE_GETPARENT") +
                        '\n\t\tpicNode.getChilds() :\t' + oBundle.getText("PICNODE_GETCHILDS") +
                        '\n\t\tpicNode.showTrend(cellId) :\t' + oBundle.getText("PICNODE_SHOWTREND") +
                        '\n**/';
                    globalUserScript += javadoc;
                    globalUserScript += '\n' + 'function ' + selectFunctionName + '(picNode){\n//TODO\n}\n';
                }
            }
            var iconPath = "/XMII/Images/folder_1.gif";
            var groupDisplay = templateData.GroupDisplay ? templateData.GroupDisplay : "Hierarchy";
            if (isObjectNotNull(templateData.IconPath))
                iconPath = templateData.IconPath;
            cellJs += '\t\t\t\t\t\t\tvar picTree_' + cellID + ' = new com.sap.xmii.ssce.PICTree("' + templateData.Name + '", "' + templateData.Namespace + '", "' + divCellId + '", "' + templateData.Description;
            if (isObjectNotNull(templateData.Category))
                cellJs = cellJs + '", "' + templateData.Category + '", "' + selectFunctionName + '", "' + iconPath + '", "' + groupDisplay + '", "' + templateData.CallbackData.ShowTrend + '", "' + templateData.CallbackData.SelectRefreshAuto + '", "' + templateData.CallbackData.SelectRefreshRate + '", "' + templateData.CallbackData.retainCurrentSettings + '", "' + templateData.zoomLevel + '", "' + templateData.centerPoint + '");\n';
            else
                cellJs = cellJs + '", null, "' + selectFunctionName + '", "' + iconPath + '", "' + groupDisplay + '", "' + templateData.CallbackData.ShowTrend + '", "' + templateData.CallbackData.SelectRefreshAuto + '", "' + templateData.CallbackData.SelectRefreshRate + '", "' + templateData.CallbackData.retainCurrentSettings + '", "' + templateData.zoomLevel + '", "' + templateData.centerPoint + '");\n';

            cellJs += '\t\t\t\t\t\t\tpicTree_' + cellID + '.draw();\n';
            cellJs += '\t\t\t\t\t\t\tceController.addObject("' + cellID + '", picTree_' + cellID + ');\n';

            var spotDataArray = templateData.SpotData;
            if (spotDataArray != null && spotDataArray != undefined && spotDataArray.length > 0) {
                cellJs += "\t\t\t\t\t\t\t\ var " + "picTree_" + cellID + "_spotDataArray = [];\n";
                for (var j = 0; j < spotDataArray.length; j++) {
                    var spotJson = spotDataArray[j];
                    var spotId = Object.keys(spotJson)[0];
                    var spotData = spotJson[spotId];
                    var changedParameters = spotData.ChangedParameters;
                    var selectedNodes = spotData.Namespace;
                    cellJs += "\t\t\t\t\t\t\t var " + "picTree_" + cellID + "_spotData_" + j + " = {};\n" +
                        "\t\t\t\t\t\t\t\ " + "picTree_" + cellID + "_spotData_" + j + ".spotId = \"" + spotId + "\";\n" +
                        "\t\t\t\t\t\t\t\ " + "picTree_" + cellID + "_spotData_" + j + ".changedParam = {};\n";
                    for (var k = 0; k < changedParameters.length; k++) {
                        var changedParameter = changedParameters[k];
                        if (changedParameter.isChanged) {
                            if (changedParameter.UserParameter != "" && changedParameter.UserParameter != undefined)
                                cellJs += "\t\t\t\t\t\t\t\ " + "picTree_" + cellID + "_spotData_" + j + ".changedParam [\"" + changedParameter.Name + "\"] = " + changedParameter.UserParameter + ";\n";
                            else
                                cellJs += "\t\t\t\t\t\t\t\ " + "picTree_" + cellID + "_spotData_" + j + ".changedParam [\"" + changedParameter.Name + "\"] = \"" + changedParameter.Value + "\";\n";
                        }
                    }

                    cellJs += "\t\t\t\t\t\t\t\ " + "picTree_" + cellID + "_spotDataArray" + ".push(" + "picTree_" + cellID + "_spotData_" + j + ");\n";

                }
                cellJs += "\t\t\t\t\t\t\t" + 'picTree_' + cellID + ".refreshSpots(" + "picTree_" + cellID + "_spotDataArray" + ");\n";
            }
            cellJs += '\t\t\t\t\t}catch(err){\n';
            cellJs += '\t\t\t\t\t\t\tconsole.log("An error has occured: " + err.name + "-" + err.message);\n';
            cellJs += '\t\t\t\t\t}\n';
            if (separateJsCode) {
                cellHtml = {};
                cellHtml.html = html;
                cellHtml.js = cellJs;
            } else {
                html = html + startScript + cellJs + endScript + '\t\t\t\t\t\t</div>\n';
                cellHtml = html;
            }
        } else if (fileType == FILE_TYPE_QUERY || fileType == FILE_TYPE_MDO) {
            //to add the query template in the script tag in the respective cell
            divCellId = "chart" + cellID;
            if (typeof objectData.TitleInfo !== "undefined" && objectData.TitleInfo !== null && objectData.TitleInfo.ShowOrNot === true) {
                templateData.TitleInfo = objectData.TitleInfo;
            }
            cellHtml = addContentScript(templateData, cellID, fileType, style, cellHeight, separateJsCode);
        } else if (fileType == FILE_TYPE_DISPLAY) {
            divCellId = "applet" + cellID;
            var paramData = [];
            var isUserParamGiven = false; // flag to check whether the User Parameter is provided
            var displayTemplate = templateData.Path + "/" + removeExtension(templateData.Name);
            var queryTemplate = templateData.MappedQueryTemplate;
            var html = "\t\t\t\t\t<APPLET NAME=\"" + divCellId + "\" CODEBASE=\"/XMII/Classes\" CODE=\"" + code + "\" ARCHIVE=\"illum8.zip\" HEIGHT=\"" + "100%" + "\" WIDTH=\"100%\" TABINDEX=1 MAYSCRIPT>\n";
            //title style
            if (typeof objectData.TitleInfo !== "undefined" && objectData.TitleInfo !== null && objectData.TitleInfo.ShowOrNot === true) {
                if (objectData.TitleInfo.UseSpecificSetting) {
                    html = "\t\t\t\t\t<APPLET NAME=\"" + divCellId + "\" CODEBASE=\"/XMII/Classes\" CODE=\"" + code + "\" ARCHIVE=\"illum8.zip\" HEIGHT=\"100%\" WIDTH=\"100%\" style =\"position:relative;margin-top:-" + objectData.TitleInfo.Height + "px;padding-top:" + objectData.TitleInfo.Height + "px;\"" + " TABINDEX=1 MAYSCRIPT>\n";
                } else {
                    html = "\t\t\t\t\t<APPLET NAME=\"" + divCellId + "\" CODEBASE=\"/XMII/Classes\" CODE=\"" + code + "\" ARCHIVE=\"illum8.zip\" HEIGHT=\"100%\" WIDTH=\"100%\" style =\"position:relative;\"" + " TABINDEX=1 MAYSCRIPT>\n";
                }
            }
            html = html + "\t\t\t\t\t<PARAM NAME=\"DisplayTemplate\" VALUE=\"" + displayTemplate + "\">\n";
            html = html + "\t\t\t\t\t<PARAM NAME=\"QueryTemplate\" VALUE=\"" + queryTemplate + "\">\n";
            html = html + "\t\t\t\t\t<PARAM NAME=\"Content-Type\" VALUE=\"image&#x2f;png\">\n";
            if (templateData.Parameters != null) {
                for (var i = 0; i < templateData.Parameters.length; i++) {
                    if (templateData.Parameters[i].UserParameter != "" && templateData.Parameters[i].UserParameter !== undefined) {
                        paramData.push({
                            "Name": templateData.Parameters[i].Name,
                            "Value": templateData.Parameters[i].UserParameter,
                            "Object": "Chart"
                        });
                        isUserParamGiven = true;
                        html = html + "\t\t\t\t\t<PARAM NAME=\"" + templateData.Parameters[i].Name + "\" VALUE=" + templateData.Parameters[i].UserParameter + ">\n";
                    } else if (templateData.Parameters[i].isChanged) {
                        html = html + "\t\t\t\t\t<PARAM NAME=\"" + templateData.Parameters[i].Name + "\" VALUE=\"" + templateData.Parameters[i].Value + "\">\n";
                    }
                }
            }
            if (templateData.QueryParameters != null) {
                for (var i = 0; i < templateData.QueryParameters.length; i++) {
                    if (templateData.QueryParameters[i].UserParameter != "" && templateData.QueryParameters[i].UserParameter !== undefined) {
                        isUserParamGiven = true;
                        paramData.push({
                            "Name": templateData.QueryParameters[i].Name,
                            "Value": templateData.QueryParameters[i].UserParameter,
                            "Object": "Query"
                        });
                        html = html + "\t\t\t\t\t<PARAM NAME=\"" + templateData.QueryParameters[i].Name + "\" VALUE=" + templateData.QueryParameters[i].UserParameter + ">\n";
                    } else if (templateData.QueryParameters[i].isChanged) {
                        html = html + "\t\t\t\t\t<PARAM NAME=\"" + templateData.QueryParameters[i].Name + "\" VALUE=\"" + templateData.QueryParameters[i].Value + "\">\n";
                    }
                }
            }
            html = html + "\t\t\t\t\t</APPLET>\n";
            if (isUserParamGiven) {
                cellJs = "\n\t\t\t\t\t\tvar inputParamData = " + JSON.stringify(paramData) + ";" +
                    "\n\t\t\t\t\t\twindow.onload = function ()  { " +
                    "\n\t\t\t\t\t\t\tif(!(document[\"" + divCellId + "\"])) return;" +
                    "\n\t\t\t\t\t\t\tvar chartObject = document[\"" + divCellId + "\"].getChartObject();  " +
                    "\n\t\t\t\t\t\t\tvar queryObject = document[\"" + divCellId + "\"].getQueryObject();" +
                    "\n\t\t\t\t\t\t\tif(inputParamData != undefined){" +
                    "\n\t\t\t\t\t\t\t\tfor (var i = 0 ; i < inputParamData.length;i++) {" +
                    "\n\t\t\t\t\t\t\t\t\tvar setterName = 'set'+ inputParamData[i].Name;" +
                    "\n\t\t\t\t\t\t\t\t\tif (inputParamData[i].Object == 'Chart') {" +
                    "\n\t\t\t\t\t\t\t\t\t\tchartObject[setterName](window[inputParamData[i].Value]);" +
                    "\n\t\t\t\t\t\t\t\t\t} else {" +
                    "\n\t\t\t\t\t\t\t\t\t\tqueryObject[setterName](window[inputParamData[i].Value]);" +
                    "\n\t\t\t\t\t\t\t\t\t}" +
                    "\n\t\t\t\t\t\t\t\t}" +
                    "\n\t\t\t\t\t\t\t}" +
                    "\n\t\t\t\t\t\t}";
            }
            if (separateJsCode) {
                cellHtml = {};
                cellHtml.html = html;
                cellHtml.js = cellJs;
            } else {
                if (cellJs !== "") {
                    html = html + startScript + cellJs + endScript;
                }
                cellHtml = html;
            }
        } else if (fileType == FILE_TYPE_KPI) {
            LoadModules.KPI = true;
            if (typeof objectData.TitleInfo !== "undefined" && objectData.TitleInfo !== null && objectData.TitleInfo.ShowOrNot === true) {
                templateData.TitleInfo = objectData.TitleInfo;
            }
            cellHtml = addKPIContentHTML(templateData, cellID, style, cellHeight, separateJsCode);
        } else if (fileType == FILE_TYPE_I5CHART) {
            divCellId = "chart" + cellID;
            var cellStyle = "width:100%;height:100%;";

            if (style !== undefined) {
                cellStyle = style;
            } else if (cellHeight !== undefined) {
                //replacing the cell height if the call is not from Mobile
                cellStyle = cellStyle.replace("height:100%", "height:" + cellHeight + "vh");
            }
            //title style
            cellStyle = titleStyle(objectData, cellStyle);
            var hScriptContent = '\t\t\t\t\t<div id=\"' + divCellId + '\" style=\"' + cellStyle + '\">\n';
            cellJs += '\t\t\t\t\t\ttry{\n';
            cellJs += '\t\t\t\t\t\t\tjQuery.sap.require("sap.viz.library");\n' + '\t\t\t\t\t\t\t' + addi5ChartContentScript(templateData, cellID) + '\n';
            cellJs += '\t\t\t\t\t\t}catch(err){\n';
            cellJs += '\t\t\t\t\t\t\tsap.ui.core.BusyIndicator.hide();\n';
            cellJs += '\t\t\t\t\t\t\tconsole.log("An error has occured: " + err.name + "-" + err.message);\n';
            cellJs += '\t\t\t\t\t\t\tif(err instanceof com.sap.xmii.common.exception.MIIi5Exception){\n';
            cellJs += '\t\t\t\t\t\t\t\tvar oTextView = new sap.ui.commons.TextView();\n' + '\t\t\t\t\t\t\t\toTextView.setText(err.message);\n' + '\t\t\t\t\t\t\t\toTextView.placeAt("' + divCellId + '","only");\n';
            cellJs += '\t\t\t\t\t\t\t}\n';
            cellJs += '\t\t\t\t\t\t}\n';
            if (separateJsCode) {
                cellHtml = {};
                cellHtml.html = hScriptContent;
                cellHtml.js = cellJs;
            } else {
            	hScriptContent = hScriptContent + startScript + cellJs + endScript + '\t\t\t\t\t\t</div>\n';
                cellHtml = hScriptContent;
            }
        } else if (fileType == FILE_TYPE_I5GRID) {
            LoadModules.i5Grid = true;
            divCellId = "grid" + cellID;
            var cellStyle = "height:100%;width:100%;";

            if (style !== undefined) {
                cellStyle = style;
            } else if (cellHeight !== undefined) {
                //replacing the cell height if the call is not from Mobile
                cellStyle = cellStyle.replace("height:100%", "height:" + cellHeight + "vh");
            }
            //title style
            cellStyle = titleStyle(objectData, cellStyle);
            var hScriptContent = '\t\t\t\t\t<div id=\"' + divCellId + '\" style=\"' + cellStyle + '\">\n';
            cellJs += '\t\t\t\t\t\ttry{\n' + '\t\t\t\t\t\t\t' + addi5GridContentScript(templateData, cellID) + '\n';
            cellJs += '\t\t\t\t\t\t}catch(err){\n';
            cellJs += '\t\t\t\t\t\t\tsap.ui.core.BusyIndicator.hide();\n';
            cellJs += '\t\t\t\t\t\t\tconsole.log("An error has occured: " + err.name + "-" + err.message);\n';
            cellJs += '\t\t\t\t\t\t}\n';
            
            if (separateJsCode) {
                cellHtml = {};
                cellHtml.html = hScriptContent;
                cellHtml.js = cellJs;
            } else {
            	hScriptContent = hScriptContent + startScript + cellJs + endScript + '\t\t\t\t\t\t</div>\n';
                cellHtml = hScriptContent;
            }
        } else if (fileType == FILE_TYPE_I5SPCCHART) {
            LoadModules.i5SPCChart = true;
            divCellId = "chart" + cellID;
            var cellStyle = "width:100%;height:100%;";

            if (style !== undefined) {
                cellStyle = style;
            } else if (cellHeight !== undefined) {
                //replacing the cell height if the call is not from Mobile
                cellStyle = cellStyle.replace("height:100%", "height:" + cellHeight + "vh");
            }
            //title style
            cellStyle = titleStyle(objectData, cellStyle);
            var hScriptContent = '\t\t\t\t\t<div id=\"' + divCellId + '\" style=\"' + cellStyle + '\">\n';
            cellJs += '\t\t\t\t\t\ttry{\n';
            cellJs += '\t\t\t\t\t\t\t' + addi5SPCChartContentScript(templateData, cellID) + '\n';
            cellJs += '\t\t\t\t\t\t}catch(err){\n';
            cellJs += '\t\t\t\t\t\t\tsap.ui.core.BusyIndicator.hide();\n';
            cellJs += '\t\t\t\t\t\t\tconsole.log("An error has occured: " + err.name + "-" + err.message);\n';
            cellJs += '\t\t\t\t\t\t}\n';
            
            if (separateJsCode) {
                cellHtml = {};
                cellHtml.html = hScriptContent;
                cellHtml.js = cellJs;
            } else {
            	hScriptContent = hScriptContent + startScript + cellJs + endScript + '\t\t\t\t\t\t</div>\n';
                cellHtml = hScriptContent;
            }
        } else if (fileType == FILE_TYPE_UIELEMENT) {
            LoadModules.uiElements = true;
            var hScriptContent;
            divCellId = "uiElement" + cellID;
            var cellStyle = "width:100%;height:100%;";

            if (style !== undefined) {
                cellStyle = style;
            } else if (cellHeight !== undefined) {
                //replacing the cell height if the call is not from Mobile
                cellStyle = cellStyle.replace("height:100%", "height:" + cellHeight + "vh");
            }
            //title style
            cellStyle = titleStyle(objectData, cellStyle);
            //          if(!runtime){
            hScriptContent = '\t\t\t\t\t<div id=\"' + divCellId + '\" class=\"formStyle\" style=\"' + cellStyle + '\">\n';
            
            cellJs += '\t\t\t\t\t\ttry{\n';
            cellJs += '\t\t\t\t\t\t\t' + addUIElementContentScript(templateData, cellID, runtime) + '\n';
            cellJs += '\t\t\t\t\t\t}catch(err){\n';
            cellJs += '\t\t\t\t\t\t\tsap.ui.core.BusyIndicator.hide();\n';
            cellJs += '\t\t\t\t\t\t\tconsole.log("An error has occured: " + err.name + "-" + err.message);\n';
            cellJs += '\t\t\t\t\t\t}\n';
            
            if (separateJsCode) {
                cellHtml = {};
                cellHtml.html = hScriptContent;
                cellHtml.js = cellJs;
            } else {
            	hScriptContent = hScriptContent + startScript + cellJs + endScript + '\t\t\t\t\t\t</div>\n';
                cellHtml = hScriptContent;
            }
            
          //below lines added to copy script for events,  if controls added from clipboard.	
			if (sap.ui.getCore().byId("main-shell")._sOpenPaneId == "PI_Clipboard")	{	
				if(objectData.globalUserScript!=undefined)
					{
					globalUserScript=objectData.globalUserScript;
					}
				if(objectData.globalUserFiles!=undefined)
					{
					globalUserFiles=objectData.globalUserFiles;
					}
			}	

            for (var j = 0; j < templateData.Controls.length; j++) {
                if (templateData.Controls[j].ControlType == "sap.ui.commons.Button") {
                    var callbackMethod = templateData.Controls[j].onClick;
                    var parameters = templateData.Controls[j].Parameters;
                    var parameterString = "";
                    if (parameters != undefined && parameters != "" && parameters != null) {
                        for (var i = 0; i < parameters.length; i++) {
                            if (parameterString == "") {
                                parameterString += parameters[i].key;
                            } else {
                                parameterString += "," + parameters[i].key;
                            }
                        }
                    }
                    if (callbackMethod != undefined && callbackMethod != null && callbackMethod != "") {


                        //                          if(templateData.Controls[j].Click == undefined){
                        if (globalUserScript.search("function " + callbackMethod + '\\(' + parameterString + '\\)') == -1) {
                            var javadoc = '\n/**' +
                                '\n' + oBundle.getText("BUTTON_PRESS_CALLBACK") +
                                '\nParameters:' +
                                '\n\ParamX... : ' + oBundle.getText("BUTTON_PRESS_PARAMS") +
                                '\n**/';
                            globalUserScript += javadoc;
                            globalUserScript += '\n' + 'function ' + callbackMethod + '(' + parameterString + '){\n' +
                                '//TODO\n' +
                                '}\n';
                        }
                        //Flag to check whether the GlobalUserScript for the click event is present
                        templateData.Controls[j].Click = templateData.Controls[j].onClick + templateData.Controls[j].Id;
                    }
                    //                          }

                } else if (templateData.Controls[j].ControlType == "sap.ui.commons.TextField") {
                    var callbackMethod_LiveChange = templateData.Controls[j].onLiveChange;
                    if (callbackMethod_LiveChange != undefined && callbackMethod_LiveChange != null && callbackMethod_LiveChange != "") {
                        if (globalUserScript.search("function " + callbackMethod_LiveChange) == -1) {
                            var javadoc = '\n/**' +
                                '\n' + oBundle.getText("TEXTFIELD_LIVE_CALLBACK") +
                                '\nParameters:' +
                                '\n\oEvent : ' + oBundle.getText("TEXTFIELD_EVENT_OBJECT") +
                                '\n**/';
                            globalUserScript += javadoc;
                            globalUserScript += '\n' + 'function ' + callbackMethod_LiveChange + '(oEvent){\n' +
                                '//TODO\n' +
                                '}\n';
                        }
                    }
                    var callbackMethod_Enter = templateData.Controls[j].onEnter;
                    if (callbackMethod_Enter != undefined && callbackMethod_Enter != null && callbackMethod_Enter != "") {
                        if (globalUserScript.search("function " + callbackMethod_Enter) == -1) {
                            var javadoc = '\n/**' +
                                '\n' + oBundle.getText("TEXTFIELD_CHANGE_CALLBACK") +
                                '\nParameters:' +
                                '\n\oEvent : ' + oBundle.getText("TEXTFIELD_EVENT_CHANGE_OBJECT") +
                                '\n**/';
                            globalUserScript += javadoc;
                            globalUserScript += '\n' + 'function ' + callbackMethod_Enter + '(oEvent){\n' +
                                '//TODO\n' +
                                '}\n';
                        }
                    }
                } else if (templateData.Controls[j].ControlType == "sap.ui.commons.DropdownBox") {
                    var callbackMethod_onSelect = templateData.Controls[j].onSelect;
                    if (callbackMethod_onSelect != undefined && callbackMethod_onSelect != null && callbackMethod_onSelect != "") {
                        if (globalUserScript.search("function " + callbackMethod_onSelect) == -1) {
                            var javadoc = '\n/**' +
                                '\n' + oBundle.getText("DROPDOWN_ONSELECT_CALLBACK") +
                                '\n**/';
                            globalUserScript += javadoc;
                            globalUserScript += '\n' + 'function ' + callbackMethod_onSelect + '(){\n' +
                                '//TODO\n' +
                                '}\n';
                        }
                    }
                    var callbackMethod_onInitialize = templateData.Controls[j].onInitialize;
                    if (callbackMethod_onInitialize != undefined && callbackMethod_onInitialize != null && callbackMethod_onInitialize != "") {
                        if (globalUserScript.search("function " + callbackMethod_onInitialize) == -1) {
                            var javadoc = '\n/**' +
                                '\n' + oBundle.getText("DROPDOWN_ONINIT_CALLBACK") +
                                '\n**/';
                            globalUserScript += javadoc;
                            globalUserScript += '\n' + 'function ' + callbackMethod_onInitialize + '(){\n' +
                                '//TODO\n' +
                                '}\n';
                        }
                    }
                } else if (templateData.Controls[j].ControlType == "sap.m.TextArea") {
                    var callbackMethod_LiveChange = templateData.Controls[j].onLiveChange;
                    if (callbackMethod_LiveChange != undefined && callbackMethod_LiveChange != "" && callbackMethod_LiveChange != null) {
                    	
                    	

                    	
                        if (globalUserScript.search("function " + callbackMethod_LiveChange) == -1) {
                            var javadoc = '\n/**' +
                                '\n' + oBundle.getText("TEXTAREA_LIVE_CALLBACK") +
                                '\nParameters:' +
                                '\n\oEvent : ' + oBundle.getText("TEXTAREA_EVENT_OBJECT") +
                                '\n**/';
                            globalUserScript += javadoc;
                            globalUserScript += '\n' + 'function ' + callbackMethod_LiveChange + '(oEvent){\n' +
                                '//TODO\n' +
                                '}\n';
                        }
                    }
                    var callbackMethod_Enter = templateData.Controls[j].onEnter;
                    if (callbackMethod_Enter != undefined && callbackMethod_Enter != null && callbackMethod_Enter != "") {
                        if (globalUserScript.search("function " + callbackMethod_Enter) == -1) {
                            var javadoc = '\n/**' +
                                '\n' + oBundle.getText("TEXTAREA_CHANGE_CALLBACK") +
                                '\nParameters:' +
                                '\n\oEvent : ' + oBundle.getText("TEXTAREA_EVENT_CHANGE_OBJECT") +
                                '\n**/';
                            globalUserScript += javadoc;
                            globalUserScript += '\n' + 'function ' + callbackMethod_Enter + '(oEvent){\n' +
                                '//TODO\n' +
                                '}\n';
                        }
                    }
                } else if (templateData.Controls[j].ControlType == "sap.m.RadioButton") {
                    var callbackMethod_OnSelect = templateData.Controls[j].onSelect;
                    if (callbackMethod_OnSelect != undefined && callbackMethod_OnSelect != null && callbackMethod_OnSelect != "") {
                        if (globalUserScript.search("function " + callbackMethod_OnSelect) == -1) {
                            var javadoc = '\n/**' +
                                '\n' + oBundle.getText("RADIOBUTTON_ONSELECT") +
                                '\nParameters:' +
                                '\n\oEvent : ' + oBundle.getText("RADIOBUTTON_EVENT_OBJECT") +
                                '\n**/';
                            globalUserScript += javadoc;
                            globalUserScript += '\n' + 'function ' + callbackMethod_OnSelect + '(oEvent){\n' +
                                '//TODO\n' +
                                '}\n';
                        }
                    }
                } else if (templateData.Controls[j].ControlType == "sap.m.CheckBox") {

                    var callbackMethod_OnSelect = templateData.Controls[j].onSelect;
                    if (callbackMethod_OnSelect != undefined && callbackMethod_OnSelect != null && callbackMethod_OnSelect != "") {
                        if (globalUserScript.search("function " + callbackMethod_OnSelect) == -1) {
                            var javadoc = '\n/**' +
                                '\n' + oBundle.getText("CHECKBOX_ONSELECT") +
                                '\nParameters:' +
                                '\n\oEvent : ' + oBundle.getText("CHECKBOX_EVENT_OBJECT") +
                                '\n**/';
                            globalUserScript += javadoc;
                            globalUserScript += '\n' + 'function ' + callbackMethod_OnSelect + '(oEvent){\n' +
                                '//TODO\n' +
                                '}\n';
                        }
                    }
                } else if (templateData.Controls[j].ControlType == "sap.m.Button") {
                    var callbackMethod = templateData.Controls[j].onClick;
                    var parameters = templateData.Controls[j].Parameters;
                    var parameterString = "";
                    if (parameters != undefined && parameters != null && parameters != "") {
                        for (var i = 0; i < parameters.length; i++) {
                            if (parameterString == "") {
                                parameterString += parameters[i].key;
                            } else {
                                parameterString += "," + parameters[i].key;
                            }
                        }
                    }
                    if (callbackMethod != undefined && callbackMethod != null && callbackMethod != "") {
                        //                      if(templateData.Controls[j].Click == undefined){
                        if (globalUserScript.search("function " + callbackMethod + '\\(' + parameterString + '\\)') == -1) {
                            var javadoc = '\n/**' +
                                '\n' + oBundle.getText("BUTTON_PRESS_CALLBACK") +
                                '\nParameters:' +
                                '\n\ParamX... : ' + oBundle.getText("BUTTON_PRESS_PARAMS") +
                                '\n**/';
                            globalUserScript += javadoc;
                            globalUserScript += '\n' + 'function ' + callbackMethod + '(' + parameterString + '){\n' +
                                '//TODO\n' +
                                '}\n';
                        }
                        //Flag to check whether the GlobalUserScript for the click event is present
                        templateData.Controls[j].Click = templateData.Controls[j].onClick + templateData.Controls[j].Id;
                    }
                    //                      }
                } else if (templateData.Controls[j].ControlType == "sap.m.Input") {
                    var callbackMethod_LiveChange = templateData.Controls[j].onLiveChange;
                    if (callbackMethod_LiveChange != undefined && callbackMethod_LiveChange != null && callbackMethod_LiveChange != "") {
                        if (globalUserScript.search("function " + callbackMethod_LiveChange) == -1) {
                            var javadoc = '\n/**' +
                                '\n' + oBundle.getText("TEXTFIELD_LIVE_CALLBACK") +
                                '\nParameters:' +
                                '\n\oEvent : ' + oBundle.getText("TEXTFIELD_EVENT_OBJECT") +
                                '\n**/';
                            globalUserScript += javadoc;
                            globalUserScript += '\n' + 'function ' + callbackMethod_LiveChange + '(oEvent){\n' +
                                '//TODO\n' +
                                '}\n';
                        }
                    }
                    var callbackMethod_Enter = templateData.Controls[j].onEnter;
                    if (callbackMethod_Enter != undefined && callbackMethod_Enter != null && callbackMethod_Enter != "") {
                        if (globalUserScript.search("function " + callbackMethod_Enter) == -1) {
                            var javadoc = '\n/**' +
                                '\n' + oBundle.getText("TEXTFIELD_CHANGE_CALLBACK") +
                                '\nParameters:' +
                                '\n\oEvent : ' + oBundle.getText("TEXTFIELD_EVENT_CHANGE_OBJECT") +
                                '\n**/';
                            globalUserScript += javadoc;
                            globalUserScript += '\n' + 'function ' + callbackMethod_Enter + '(oEvent){\n' +
                                '//TODO\n' +
                                '}\n';
                        }
                    }
                    var callbackMethod_Click = templateData.Controls[j].onValueHelp;
                    if (callbackMethod_Click != undefined && callbackMethod_Click != null && callbackMethod_Click != "") {
                        if (globalUserScript.search("function " + callbackMethod_Click) == -1) {
                            var javadoc = '\n/**' +
                                '\n' + oBundle.getText("TEXTFIELD_CLICK_VALUEHELP_CALLBACK") +
                                //                          '\nParameters:' +
                                //                          '\n\oEvent : '+ oBundle.getText("TEXTFIELD_EVENT_CHANGE_OBJECT") +
                                '\n**/';
                            globalUserScript += javadoc;
                            globalUserScript += '\n' + 'function ' + callbackMethod_Click + '(uiElement){\n' +
                                '//TODO\n' +
                                '}\n';
                        }
                    }
                } else if (templateData.Controls[j].ControlType == "sap.m.Select") {
                    var callbackMethod_onSelect = templateData.Controls[j].onSelect;
                    if (callbackMethod_onSelect != undefined && callbackMethod_onSelect != "" && callbackMethod_onSelect != null) {
                        if (globalUserScript.search("function " + callbackMethod_onSelect) == -1) {
                            var javadoc = '\n/**' +
                                '\n' + oBundle.getText("DROPDOWN_ONSELECT_CALLBACK") +
                                '\n**/';
                            globalUserScript += javadoc;
                            globalUserScript += '\n' + 'function ' + callbackMethod_onSelect + '(oEvent){\n' +
                                '//TODO\n' +
                                '}\n';
                        }
                    }
                    var callbackMethod_onInitialize = templateData.Controls[j].onInitialize;
                    if (callbackMethod_onInitialize != undefined && callbackMethod_onInitialize != null && callbackMethod_onInitialize != "") {
                        if (globalUserScript.search("function " + callbackMethod_onInitialize) == -1) {
                            var javadoc = '\n/**' +
                                '\n' + oBundle.getText("DROPDOWN_ONINIT_CALLBACK") +
                                '\n**/';
                            globalUserScript += javadoc;
                            globalUserScript += '\n' + 'function ' + callbackMethod_onInitialize + '(){\n' +
                                '//TODO\n' +
                                '}\n';
                        }
                    }
                } else if (templateData.Controls[j].ControlType == "sap.ui.commons.ListBox") { //add listbox
                    var callbackMethod_onSelect = templateData.Controls[j].onSelect;
                    if (callbackMethod_onSelect != undefined && callbackMethod_onSelect != "" && callbackMethod_onSelect != null) {
                        if (globalUserScript.search("function " + callbackMethod_onSelect) == -1) {
                            var javadoc = '\n/**' +
                                '\n' + oBundle.getText("LISTBOX_ONSELECT_CALLBACK") +
                                '\n**/';
                            globalUserScript += javadoc;
                            globalUserScript += '\n' + 'function ' + callbackMethod_onSelect + '(){\n' +
                                '//TODO\n' +
                                '}\n';
                        }
                    }

                }
            }
        }

    } else if (templateData != null && isImage(templateData.Name)) {
        LoadModules.plantView = true;
        var path = templateData.Path.replace("/WEB", "");
        var imageAddress = "/XMII/CM/" + path + "/" + encodeURIComponent(templateData.Name);
        divCellId = "imgContainer:" + cellID;
        var cellStyle = "width:100%;height:100%;";

        if (style !== undefined) {
            cellStyle = style + "position:relative;";
        } else if (cellHeight !== undefined) {
            //replacing the cell height if the call is not from Mobile
            cellStyle = cellStyle.replace("height:100%", "height:" + cellHeight + "vh");
        }
        //title style
        cellStyle = titleStyle(objectData, cellStyle);
        var html = '\t\t\t\t\t<div id=\"' + divCellId + '\" style=\"' + cellStyle + '\">\n';
        cellJs += '\t\t\t\t\ttry{\n';
        cellJs += '\t\t\t\t\t\t\tvar plantImageData_' + cellID + ' = {};\n';
        cellJs += '\t\t\t\t\t\t\tplantImageData_' + cellID + '.CellId = \"' + cellID + '\";\n';
        cellJs += '\t\t\t\t\t\t\tplantImageData_' + cellID + '.ImageUrl = \"' + imageAddress + '\";\n';
        cellJs += '\t\t\t\t\t\t\tplantImageData_' + cellID + '.ImageNaturalWidth = \"' + templateData.Width + '\";\n';
        cellJs += '\t\t\t\t\t\t\tplantImageData_' + cellID + '.ImageNaturalHeight = \"' + templateData.Height + '\";\n';
        if (runtime) {
        	cellJs += '\t\t\t\t\t\t\tplantImageData_' + cellID + '.Runtime = \"' + runtime + '\";\n\n';
        } else {
        	cellJs += '\n';
        }
        cellJs += '\t\t\t\t\t\t\tvar plantView_' + cellID + ' = new com.sap.xmii.ssce.PlantView(plantImageData_' + cellID + ');\n';
        if (templateData.Area !== undefined && templateData.Area.length > 0) {
            for (var i = 0; i < templateData.Area.length; i++) {
                if (templateData.Area[i].Type == CIRCLE) {
                	cellJs += '\t\t\t\t\t\t\tplantView_' + cellID + '.addCircle(\"' + templateData.Area[i].Name + '\", ' +
                        '\"' + templateData.Area[i].Color +
                        '\", \"' + templateData.Area[i].Opacity +
                        '\", \"' + JSON.stringify(templateData.Area[i].X) +
                        '\", \"' + JSON.stringify(templateData.Area[i].Y) +
                        '\", \"' + JSON.stringify(templateData.Area[i].Radius);
                    if (isObjectNotNull(JSON.stringify(templateData.Area[i].CallbackData))) {
                    	cellJs += '\", \"' + JSON.stringify(templateData.Area[i].CallbackData.SelectCallback) +
                            '\", ' + JSON.stringify(templateData.Area[i].CallbackData.SelectFunctionName) + ');\n';
                    } else {
                    	cellJs += '\");\n';
                    }

                } else if (templateData.Area[i].Type == RECTANGLE) {
                	cellJs += '\t\t\t\t\t\t\tplantView_' + cellID + '.addRectangle(\"' + templateData.Area[i].Name + '\", ' +
                        '\"' + templateData.Area[i].Color +
                        '\", \"' + templateData.Area[i].Opacity +
                        '\", \"' + JSON.stringify(templateData.Area[i].X) +
                        '\", \"' + JSON.stringify(templateData.Area[i].Y);
                    if (isObjectNotNull(JSON.stringify(templateData.Area[i].CallbackData))) {
                    	cellJs += '\", \"' + JSON.stringify(templateData.Area[i].CallbackData.SelectCallback) +
                            '\", ' + JSON.stringify(templateData.Area[i].CallbackData.SelectFunctionName) + ');\n';
                    } else {
                    	cellJs += '\");\n';
                    }
                } else {
                	cellJs += '\t\t\t\t\t\t\tplantView_' + cellID + '.addArea(\"' + templateData.Area[i].Name + '\", ' +
                        '\"' + templateData.Area[i].Color +
                        '\", \"' + templateData.Area[i].Opacity +
                        '\", \"' + JSON.stringify(templateData.Area[i].X) +
                        '\", \"' + JSON.stringify(templateData.Area[i].Y);

                    if (isObjectNotNull(JSON.stringify(templateData.Area[i].CallbackData))) {
                    	cellJs += '\", \"' + JSON.stringify(templateData.Area[i].CallbackData.SelectCallback) +
                            '\", ' + JSON.stringify(templateData.Area[i].CallbackData.SelectFunctionName) + ');\n';
                    } else {
                    	cellJs += '\");\n';
                    }
                }


                if (isObjectNotNull(JSON.stringify(templateData.Area[i].CallbackData)) && isObjectNotNull(JSON.stringify(templateData.Area[i].CallbackData.SelectCallback)) && JSON.stringify(templateData.Area[i].CallbackData.SelectCallback) == "true" &&
                    isObjectNotNull(JSON.stringify(templateData.Area[i].CallbackData.SelectFunctionName)) && isObjectNotNull(JSON.stringify(templateData.Area[i].CallbackData.SelectFunctionName != ""))) {
                    var areaOnClickFunctionName = templateData.Area[i].CallbackData.SelectFunctionName;
                    if (globalUserScript.search("function " + areaOnClickFunctionName) == -1) {
                        var javadoc = '\n/**' +
                            '\n' + oBundle.getText("AREA_ON_CLICK_CALLBACK") +
                            '\nParameters:' +
                            '\n\tareaName:\t' + oBundle.getText("AREA_NAME_PARAM") +
                            '\n**/';
                        globalUserScript += javadoc;
                        globalUserScript += '\n' + 'function ' + areaOnClickFunctionName + '(areaName){\n//TODO\n}\n';
                    }
                }
            }
        }
        cellJs += '\t\t\t\t\t\t\tplantView_' + cellID + '.draw();\n';
        cellJs += '\t\t\t\t\t}catch(err){\n';
        cellJs += '\t\t\t\t\t\t\tconsole.log("An error has occured: " + err.name + "-" + err.message);\n';
        cellJs += '\t\t\t\t\t}\n';
        
        if (separateJsCode) {
            cellHtml = {};
            cellHtml.html = html;
            cellHtml.js = cellJs;
        } else {
        	html = html + startScript + cellJs + endScript + '\t\t\t\t\t\t</div>\n';
            cellHtml = html;
        }
    } else if (templateData != null && isXCelcius(templateData.Name)) {
        var path = templateData.Path.replace("/WEB", "");
        var cellStyle = "height:100%;width:100%;";

        if (style !== undefined) {
            cellStyle = style;
        } else if (cellHeight !== undefined) {
            //replacing the cell height if the call is not from Mobile
            cellStyle = cellStyle.replace("height:100%", "height:" + cellHeight + "vh");
        }
        //title style
        cellStyle = titleStyle(objectData, cellStyle);
        var html = "\t\t\t\t\t<div id=\"swf" + cellID + "\" style=\"" + cellStyle + "\">\n\t\t\t\t\t" +
            "<OBJECT classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"\n" +
            "\t\t\t\t\tcodebase=\"http://fpdownload.adobe.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0\"\n" +
            "\t\t\t\t\tWIDTH=\"100%\" HEIGHT=\"100%\" id=\"myMovieName\">\n" +
            "\t\t\t\t\t\t<PARAM NAME=\"movie\" VALUE=\"/XMII/CM/" + path + "/" + templateData.Name + "\"> \n" +
            "\t\t\t\t\t\t<PARAM NAME=\"quality\" VALUE=\"high\">\n" +
            "\t\t\t\t\t\t<PARAM NAME=\"bgcolor\" VALUE=\"#FFFFFF\">\n" +
            "\t\t\t\t\t\t<PARAM NAME=\"play\" VALUE=\"true\">\n" +
            "\t\t\t\t\t\t<PARAM NAME=\"loop\" VALUE=\"true\">\n" +
            "\t\t\t\t\t\t<PARAM NAME=bgcolor VALUE=\"#FFFFFF\">\n" +
            "\t\t\t\t\t<EMBED src=\"/XMII/CM/" + path + "/" + templateData.Name + "\" quality=high bgcolor=#FFFFFF WIDTH=\"100%\" HEIGHT=\"100%\" \n" +
            "\t\t\t\t\tNAME=\"myMovieName\" ALIGN=\"\" TYPE=\"application/x-shockwave-flash\" \n" +
            "\t\t\t\t\t play=\"true\" loop=\"true\" \n" +
            "\t\t\t\t\t PLUGINSPAGE=\"http://www.adobe.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash\">\n" +
            "\t\t\t\t\t</EMBED>\n" +
            "\t\t\t\t\t </OBJECT>\n";
        html += '\t\t\t\t\t</div>\n';
        if (separateJsCode) {
            cellHtml = {};
            cellHtml.html = html;
        } else {
        	cellHtml = html;
        }
    } else if (templateData != null && isVEFile(templateData.Name)) {
        var path = templateData.Path.replace("/WEB", "");
        //var html = "<OBJECT id=ID1 classid=CLSID:B2058416-94A8-4966-9FAF-49E7D6E22F6D type=\"application/rh\"> <param name=\"FileName\" value=\"/XMII/CM/" + path + "/" + templateData.Name + "\"></OBJECT>";
        var html = "<OBJECT id=ID1 classid=CLSID:B2058416-94A8-4966-9FAF-49E7D6E22F6D><PARAM NAME=\"FILEPATH\" VALUE=\"/XMII/CM/" + path + "/" + templateData.Name + "\"></OBJECT>";
        //html += "<script>document.all.ID1.SAP_LOAD_VIEWER_SINGLE('<start LANGUAGE=\"enNZ\" FILEPATH=\"/XMII/CM/"+path + "/" + templateData.Name +"\" CREATE_LAYER=\"true\" USER=\"sapplm7\" SAP_VISUALIZATION=\"true\"/>',\"\",\"\",\"\");</script>";
        if (separateJsCode) {
            cellHtml = {};
            cellHtml.html = html;
        } else {
        	cellHtml = html;
        }
    } else if (templateData != null && (isSVGFile(templateData.Name) || templateData.FileType == "SVGObject")) {
        LoadModules.svg = true;
        var path = templateData.Path.replace("/WEB", "");
        var xacuteQuery = false;

        if (objectData.Object.SVGConfigData != undefined) {
            var svgData = objectData.Object.SVGConfigData;
            var autoRefreshValue = svgData.autoRefresh;
            var refreshRate = svgData.refreshRate;
            var onClick = svgData.selectClick; //making SVG clickable
            var onClickMethod = svgData.selectMethodName;


            var svgPath = "/XMII/CM/" + path + "/" + templateData.Name;
            var queryPath = svgData.queryPath;
            //Following check is made when the queryPath is empty or undefined then move the svgPath value to queryPath
            //So that it can render
            if (queryPath == "" || queryPath == undefined || queryPath == null) {
                queryPath = svgPath;
                svgPath = "";
            }
        } else {
            //if SVGConfigData is undefined , this means Xacute Query is converted to SVG.
            var svgData = objectData.Object;
            var path1 = templateData.Path.replace("/WEB", "");
            var svgPath1 = "/XMII/CM/" + path + "/" + templateData.Name;
            var autoRefreshValue = svgData.AutoRefresh;
            var refreshRate = svgData.RefreshRate;
            var svgPath = "";
            var queryPath = path + "/" + templateData.Name;
            var ext = queryPath.substring(queryPath.length - 3, queryPath.length);
            if (ext == 'svg') {
                queryPath = svgPath1;
            }
            xacuteQuery = true;
        }

        //Enabling the configure query menu if queryPath is given
        if (objectData.Object.SVGConfigData != null && objectData.Object.SVGConfigData != undefined && objectData.Object.SVGConfigData != "" &&
            objectData.Object.SVGConfigData.queryPath != null && objectData.Object.SVGConfigData.queryPath != undefined && objectData.Object.SVGConfigData.queryPath != "") {
            objectData.Object.EnableQueryConfigParamMenu = true;
        }

        var cellStyle = "text-align:center;width:100%;height:100%;";

        if (style !== undefined) {
            cellStyle = style;
        } else if (cellHeight !== undefined) {
            //replacing the cell height if the call is not from Mobile
            cellStyle = cellStyle.replace("height:100%", "height:" + cellHeight + "vh");
        }
        //title style
        cellStyle = titleStyle(objectData, cellStyle);
        var html = '\t\t\t\t\t<div id="svg' + cellID + '" style=\"' + cellStyle + '\">\n';
        cellJs += '\t\t\t\t\t\ttry{\n';

        //During runtime we do not send the queryParameters to the constructor
        if (runtime) {
        	cellJs += '\t\t\t\t\t\t\tvar svgObj_' + cellID + ' = new com.sap.xmii.ce.util.svgObject("svg' + cellID + '","' + svgPath + '",true,' + refreshRate + ',"' + queryPath + '",' + '[],' + onClick + ',"' + onClickMethod + '");\n';
        } else {
        	cellJs += '\t\t\t\t\t\t\tvar svgObj_' + cellID + ' = new com.sap.xmii.ce.util.svgObject("svg' + cellID + '","' + svgPath + '",true,' + refreshRate + ',"' + queryPath + '" ,' + JSON.stringify(objectData.Object.Parameters) + ',' + onClick + ',"' + onClickMethod + '");\n';
        }
        //Checking if the svgData is configured and refresh rate and auto refresh is given
        if ((svgData != undefined && autoRefreshValue && parseInt(refreshRate) > 0)) {
            //During runtime or preview mode, if the parameter is given defining the add parameter and providing the name and value as parameters
            if (runtime && templateData.Parameters != null) {
                //Looping through the templateData.Parameters to add the parameters
                for (var i = 0; i < templateData.Parameters.length; i++) {
                    if (templateData.Parameters[i].UserParameter != "" && templateData.Parameters[i].UserParameter !== undefined) {
                    	cellJs += "\t\t\t\t\t\t\tsvgObj_" + cellID + ".addParameters(\"" + templateData.Parameters[i].Name + "\"," + templateData.Parameters[i].UserParameter + ");\n";
                    } else if (templateData.Parameters[i].isChanged) {
                    	cellJs += "\t\t\t\t\t\t\tsvgObj_" + cellID + ".addParameters(\"" + templateData.Parameters[i].Name + "\",\"" + templateData.Parameters[i].Value + "\");\n";
                    }
                }
            }

            //Add onClick functionality to the svg object
            if (runtime && onClick && onClickMethod != "") {
                if (isObjectNotNull(templateData.SVGConfigData)) {
                    var callBackData = templateData.SVGConfigData;
                    if (isObjectNotNull(callBackData) && isObjectNotNull(callBackData.selectClick) && callBackData.selectClick && isObjectNotNull(callBackData.selectMethodName) && callBackData.selectMethodName != "") {
                        var method = callBackData.selectMethodName;
                        if (globalUserScript.search("function " + method) == -1) {
                            var objectName = "SVG_SELECT_CALLBACK_OBJECT";
                            var functionName = "Function called when you click SVG Object";

                            var javadoc = '\n/**' +
                                '\n' + functionName +
                                '\nParameters:' +
                                '\n\tsvgData :\t' + 'contains information about SVG' +
                                '\n\t\tsvgData.svgName :\t' + 'Returns SVG name' +
                                '\n**/';
                            globalUserScript += javadoc;
                            globalUserScript += '\n' + 'function ' + method + '(svgData){\n//TODO\n}\n';
                        }
                    }
                }
            }



            cellJs += '\t\t\t\t\t\t\tsvgObj_' + cellID + '.drawSVG();\n';
            cellJs += '\t\t\t\t\t\t\tsvgObj_' + cellID + '.refreshSVG();\n';
        } else {
            //if svgData is not configured and refresh rate and auto refresh is not given
            //During runtime or preview mode, if the parameter is given defining the add parameter and providing the name and value as parameters
            if (runtime && templateData.Parameters != null) {
                //Looping through the templateData.Parameters to add the parameters
                for (var i = 0; i < templateData.Parameters.length; i++) {
                    if (templateData.Parameters[i].UserParameter != "" && templateData.Parameters[i].UserParameter !== undefined) {
                    	cellJs += "\t\t\t\t\t\t\tsvgObj_" + cellID + ".addParameters(\"" + templateData.Parameters[i].Name + "\"," + templateData.Parameters[i].UserParameter + ");\n";
                    } else if (templateData.Parameters[i].isChanged) {
                    	cellJs += "\t\t\t\t\t\t\t\tsvgObj_" + cellID + ".addParameters(\"" + templateData.Parameters[i].Name + "\",\"" + templateData.Parameters[i].Value + "\");\n";
                    }
                }
            }

            //Add on click for SVG
            if (runtime && onClick && onClickMethod != "") {
                if (isObjectNotNull(templateData.SVGConfigData)) {
                    var callBackData = templateData.SVGConfigData;
                    if (isObjectNotNull(callBackData) && isObjectNotNull(callBackData.selectClick) && callBackData.selectClick && isObjectNotNull(callBackData.selectMethodName) && callBackData.selectMethodName != "") {
                        var method = callBackData.selectMethodName;
                        if (globalUserScript.search("function " + method) == -1) {
                            var objectName = "SVG_SELECT_CALLBACK_OBJECT";
                            var functionName = "Function called when you click SVG Object";
                            var javadoc = '\n/**' +
                                '\n' + functionName +
                                '\nParameters:' +
                                '\n\tsvgData :\t' + 'contains information about SVG' +
                                '\n\t\tsvgData.svgName :\t' + 'Returns SVG name' +
                                '\n**/';
                            globalUserScript += javadoc;
                            globalUserScript += '\n' + 'function ' + method + '(svgData){\n//TODO\n}\n';
                        }
                    }
                }
            }

            cellJs += '\t\t\t\t\t\t\tsvgObj_' + cellID + '.drawSVG();\n';
        }
        cellJs += '\t\t\t\t\t\t}catch(err){\n';
        cellJs += '\t\t\t\t\t\t\tconsole.log("An error has occured: " + err.name + "-" + err.message);\n';
        cellJs += '\t\t\t\t\t\t}\n';
        
        if (separateJsCode) {
            cellHtml = {};
            cellHtml.html = html;
            cellHtml.js = cellJs;
        } else {
        	html = html + startScript + cellJs + endScript + '\t\t\t\t\t\t</div>\n';
            cellHtml = html;
        }
        return cellHtml;
    } else if (templateData != null && isWebPage(templateData.Name)) {
        divCellId = "web" + cellID;
        var path = templateData.Path.replace("/WEB", "");
        var webFilePath = "/XMII/CM/" + path + "/" + templateData.Name;
        var cellStyle = "width:100%;height:100%;";

        if (style !== undefined) {
            cellStyle = style;
        } else if (cellHeight !== undefined) {
            //replacing the cell height if the call is not from Mobile
            cellStyle = cellStyle.replace("height:100%", "height:" + cellHeight + "vh");
        }
        //title style
        cellStyle = titleStyle(objectData, cellStyle);
        var html = "\t\t\t\t\t<div id=\"" + divCellId + "\"  style=\"" + cellStyle + "\">\n";
        html += "\t\t\t\t\t\t<iframe src=\"" + webFilePath + "?displayDesktopVersion=true\" width=\"100%\" height=\"" + "100" + "%\" ></iframe>";
        html += '\n\t\t\t\t\t</div>\n';
        if (separateJsCode) {
            cellHtml = {};
            cellHtml.html = html;
        } else {
        	cellHtml = html;
        }
        return cellHtml;
    } else if (templateData != null && isVDSFile(templateData.Name)) {
        LoadModules.queryObject = true;
        var cellStyle = "width:100%;height:100%;";

        if (style !== undefined) {
            cellStyle = style;
        } else if (cellHeight !== undefined) {
            //replacing the cell height if the call is not from Mobile
            cellStyle = cellStyle.replace("height:100%", "height:" + cellHeight + "vh");
        }
        //title style
        cellStyle = titleStyle(objectData, cellStyle);

        return addVEControlContentScript(templateData, cellID, runtime, cellStyle, $("#" + cellID).height(), $("#" + cellID).width(), separateJsCode);

    } else if (templateData != null && templateData.isPlugin == true) {
        //  return CurrentExtension.extension.generateHTML(templateData);
        var JSClass = extensionNameClassMap[templateData.extensionName];
        if (extensionJSFiles.indexOf('/XMII/CM' + JSClass.getMainJSFile()) == -1) {
            extensionJSFiles.push('/XMII/CM' + JSClass.getMainJSFile());
        }
        var utilJSFiles = JSClass.getUtilJSFile();
        var jsArray = utilJSFiles.split(',');
        for (i = 0; i < jsArray.length; i++) {
            CEPluginHandler.loadScript('/XMII/CM' + jsArray[i]);
            var value = '/XMII/CM' + jsArray[i];
            if (extensionJSFiles.indexOf(value) == -1) {
                extensionJSFiles.push(value);
            }
        }
        return JSClass.generateHTML(templateData);
    }



    if (templateData !== undefined && templateData != null && templateData.TagDisplay == "Graph") {
        //jQuery.isArray(tagArray[0]) is implemented because in previous dashboard tagArray is saved as array sometimes instead of object
        //So first check for an array, if the tagarray has an array do not execute further code
        if (tagArray != null && typeof(tagArray) != 'undefined' && tagArray.length > 0 && !jQuery.isArray(tagArray[0])) {
            var jsScript = "";
                divCellId = "tags" + cellID;
                var cellStyle = "width:100%;height:100%;";

                if (style !== undefined) {
                    cellStyle = style;
                } else if (cellHeight !== undefined) {
                    //replacing the cell height if the call is not from Mobile
                    cellStyle = cellStyle.replace("height:100%", "height:" + cellHeight + "vh");
                }
                //title style
                cellStyle = titleStyle(objectData, cellStyle);
                var html = "\t\t\t\t\t<div id=\"" + divCellId + "\"  style=\"" + cellStyle + "\">\n";
                var virtualTagID = getVirtualTagIDValue(tagArray);
                //Excluding Virtual Tag with multiple columns if any from the tagArray
                var tagArrays = [];
                for(var i=0; i<tagArray.length; i++){
                	if(tagArray[i].VirtualTag){
                		if(!tagArray[i].IsMultipleCols)
                			tagArrays.push(tagArray[i]);
                	}else{
                		tagArrays.push(tagArray[i]);
                	}
                }
                if(tagArrays.length==0)
                	tagArrays = tagArray;
           // jsScript += '\t\t\t\t\t<script>\n';
            jsScript += '\t\t\t\t\ttry{\n';
            var delimitedData = applyNamespaceDelimiterForTags(tagArrays, true);
            jsScript += "\t\t\t\t\t\t\tvar chart_" + divCellId + " = new com.sap.xmii.chart.hchart.i5Chart(com.sap.xmii.common.util.ChartTypes.LINE, \"Predefined/DefaultCatalogHistoryQuery\");\n";
            jsScript += "\t\t\t\t\t\t\tchart_" + divCellId + ".getQueryObject().setParameter(\"SelectedObjects\", \"" + delimitedData.selectedObjects + "\");\n";
            jsScript += "\t\t\t\t\t\t\tchart_" + divCellId + ".getQueryObject().setMode(\"History\");\n";
            jsScript += "\t\t\t\t\t\t\tchart_" + divCellId + ".getQueryObject().setParameter(\"NamespaceDelimeter\",\"" + delimitedData.delimiter + "\");\n";
            if(virtualTagID != undefined || virtualTagID != null)
            	jsScript += "\t\t\t\t\t\t\tchart_" + divCellId + ".getQueryObject().setParameter(\"VirtualTagID\",\"" + virtualTagID + "\");\n";
            //htmlScript += "\t\t\t\t\t\t\tchart_" + divCellId + ".getChartTemplateObject().setProperty(\"ValueColumns\",\"" + delimitedData.selectedObjects + "\");\n";

            var isSelectedTagParamChanged = false;
            var selectedTags = null;
            var selectedAliases = null;
            //add the Query Parameters if configured
            if (templateData.QueryParameters != null) {
                for (var i = 0; i < templateData.QueryParameters.length; i++) {
                    if (templateData.QueryParameters[i].UserParameter != "" && templateData.QueryParameters[i].UserParameter !== undefined) {
                    	if(templateData.QueryParameters[i].GroupId == 62){
                    		var sysParam = "trxparam." + templateData.QueryParameters[i].Name;
                    		jsCode += "\t\t\t\t\t\tchart_" + cellID + ".getQueryObject().setParameter(\"" + sysParam + "\"," + templateData.QueryParameters[i].UserParameter + ");\n";
                    	}else
                    		jsScript += "\t\t\t\t\t\t\tchart_" + divCellId + ".getQueryObject().setParameter(\"" + templateData.QueryParameters[i].Name + "\"," + templateData.QueryParameters[i].UserParameter + ");\n";
                    } else if (templateData.QueryParameters[i].isChanged) {
                    	if(templateData.QueryParameters[i].GroupId == 62){
                    		var sysParam = "trxparam." + templateData.QueryParameters[i].Name;
                    		jsScript += "\t\t\t\t\t\tchart_" + divCellId + ".getQueryObject().setParameter(\"" + sysParam + "\",\"" + templateData.QueryParameters[i].Value + "\");\n";
                    	}
                        //if selectedTag or selected Alias has been configured then get the selectedTag amd alias value in string to set the value columns
                    	else if (templateData.QueryParameters[i].Name == "SelectedTags" && templateData.QueryParameters[i].Value != "") {
                            isSelectedTagParamChanged = true;
                            var tagsData = templateData.QueryParameters[i].Value.split(",");
                            for (var j = 0; j < tagsData.length; j++) {
                                var nameString = tagsData[j].replace(/\//g, delimitedData.delimiter);
                                selectedTags == null ? selectedTags = nameString : selectedTags += "," + nameString;
                            }
                            jsScript += "\t\t\t\t\t\t\tchart_" + divCellId + ".getQueryObject().setParameter(\"" + templateData.QueryParameters[i].Name + "\",\"" + selectedTags + "\");\n";
                        } else if (templateData.QueryParameters[i].Name == "SelectedAliases") {
                            selectedAliases = templateData.QueryParameters[i].Value;
                            jsScript += "\t\t\t\t\t\t\tchart_" + divCellId + ".getQueryObject().setParameter(\"" + templateData.QueryParameters[i].Name + "\",\"" + templateData.QueryParameters[i].Value + "\");\n";
                        } else
                        	jsScript += "\t\t\t\t\t\t\tchart_" + divCellId + ".getQueryObject().setParameter(\"" + templateData.QueryParameters[i].Name + "\",\"" + templateData.QueryParameters[i].Value + "\");\n";
                    }
                }
            }
            //if alias names are given, then get the aliases name otherwise get the tag name
            // and set the value to the valuecolumns
            if (isSelectedTagParamChanged) {
                if (selectedAliases != undefined && selectedTags != undefined) {
                    var aliases = selectedAliases.split(",");
                    var tags = selectedTags.split(",");
                    var valueColumns = null;
                    for (var i = 0; i < aliases.length; i++) {
                        if (aliases[i] != "") {
                            valueColumns == null ? valueColumns = aliases[i] : valueColumns += "," + aliases[i];
                        } else {
                            valueColumns == null ? valueColumns = tags[i] : valueColumns += "," + tags[i];
                        }
                    }
                    jsScript += "\t\t\t\t\t\t\tchart_" + divCellId + ".getChartTemplateObject().setProperty(\"ValueColumns\", \"" + valueColumns + "\");\n";
                }
            } else {
                //this condition is for the tag when it is dropped for the first time 
                // We need to set the all the tags with alias as the tag name( not namespace like CatalogConnector~root~CylTemp1 then set CylTemp1 to it alias) 
                //then the value is then set as a valuecolumns
                var tagsData = delimitedData.selectedObjects.split(",");
                var selectedTags = null,
                    selectedAliases = null,
                    valueColumns = null;
                for (var i = 0; i < tagsData.length; i++) {
                    selectedTags == null ? selectedTags = tagsData[i] : selectedTags += "," + tagsData[i];
                    selectedAliases == null ? selectedAliases = tagsData[i].substring(tagsData[i].lastIndexOf(delimitedData.delimiter) + 1) : selectedAliases += "," + tagsData[i].substring(tagsData[i].lastIndexOf(delimitedData.delimiter) + 1);
                }
                if (templateData.QueryParameters == undefined) templateData.QueryParameters = [];

                var currentIndex = findIndexOfParameterAndInitialize(templateData.QueryParameters, "SelectedTags", 12, 1, 10, selectedTags);
                templateData.QueryParameters[currentIndex].Value = selectedTags;
                templateData.QueryParameters[currentIndex].DefaultValue = selectedTags;

                var currentIndex = findIndexOfParameterAndInitialize(templateData.QueryParameters, "SelectedAliases", 0, 1, 10, selectedAliases);
                templateData.QueryParameters[currentIndex].Value = selectedAliases;
                valueColumns = selectedAliases;
                jsScript += "\t\t\t\t\t\t\tchart_" + divCellId + ".getQueryObject().setParameter(\"SelectedTags\",\"" + selectedTags + "\");\n";
                jsScript += "\t\t\t\t\t\t\tchart_" + divCellId + ".getQueryObject().setParameter(\"SelectedAliases\",\"" + selectedAliases + "\");\n";
                jsScript += "\t\t\t\t\t\t\tchart_" + divCellId + ".getChartTemplateObject().setProperty(\"ValueColumns\", \"" + valueColumns + "\");\n";
            }
            templateData.TagAlias = selectedAliases;
            var  setTimeSeries = false;
            //add the Display Parameters if configured
            if (templateData.DisplayParameters != null) {
                for (var i = 0; i < templateData.DisplayParameters.length; i++) {
                    if (templateData.DisplayParameters[i].DataType == 2 && templateData.DisplayParameters[i].UserParameter !== undefined && templateData.DisplayParameters[i].UserParameter !== "") {
                    	jsScript += "\t\t\t\t\t\t\tchart_" + divCellId + ".getChartTemplateObject().setProperty(\"" + templateData.DisplayParameters[i].Name + "\"," + templateData.DisplayParameters[i].UserParameter + ");\n";
                    } else if (templateData.DisplayParameters[i].UserParameter != "" && templateData.DisplayParameters[i].UserParameter != undefined) {
                    	jsScript += "\t\t\t\t\t\t\tchart_" + divCellId + ".getChartTemplateObject().setProperty(\"" + templateData.DisplayParameters[i].Name + "\"," + templateData.DisplayParameters[i].UserParameter + ");\n";
                    } else if (templateData.DisplayParameters[i].DataType == 2 && (templateData.DisplayParameters[i].isChanged)) {
                    	if(templateData.DisplayParameters[i].Name == "TimeSeries") {
                    		setTimeSeries = true;
                    	}
                        if (templateData.DisplayParameters[i].Name == "ValueColumns")
                        	jsScript += "\t\t\t\t\t\t\tchart_" + divCellId + ".getChartTemplateObject().setProperty(\"" + templateData.DisplayParameters[i].Name + "\",\"" + templateData.DisplayParameters[i].Value + "\");\n";
                        else
                        	jsScript += "\t\t\t\t\t\t\tchart_" + divCellId + ".getChartTemplateObject().setProperty(\"" + templateData.DisplayParameters[i].Name + "\"," + templateData.DisplayParameters[i].Value + ");\n";
                    } else if (templateData.DisplayParameters[i].isChanged) {
                    	jsScript += "\t\t\t\t\t\t\tchart_" + divCellId + ".getChartTemplateObject().setProperty(\"" + templateData.DisplayParameters[i].Name + "\",\"" + templateData.DisplayParameters[i].Value + "\");\n";
                    	
                    }
                }
            }
            
            if(!setTimeSeries)
            	jsScript += "\t\t\t\t\t\t\tchart_" + divCellId + ".getChartTemplateObject().setProperty(\"TimeSeries\", true);\n";
            
            jsScript += "\t\t\t\t\t\t\tchart_" + divCellId + ".registerCreationEventHandler(ceController.addObject(\"" + cellID + "\",chart_" + divCellId + "));\n";
            jsScript += "\t\t\t\t\t\t\tchart_" + divCellId + ".draw(\"" + divCellId + "\");\n";
            jsScript += '\t\t\t\t\t}catch(err){\n';
            jsScript += '\t\t\t\t\t\tsap.ui.core.BusyIndicator.hide();\n';
            jsScript += '\t\t\t\t\t\tconsole.log("An error has occured: " + err.name + "-" + err.message);\n';
            jsScript += '\t\t\t\t\t\tvar oTextView = new sap.ui.commons.TextView();\n' +
                '\t\t\t\t\t\toTextView.setText(err.message);\n' +
                '\t\t\t\t\t\toTextView.placeAt("' + divCellId + '","only");\n';
            jsScript += '\t\t\t\t\t}\n';


            if (separateJsCode) {
                cellHtml = {};
                cellHtml.html = html;
                cellHtml.js = jsScript;
            } else {
            	html = html + startScript + jsScript + endScript + '\t\t\t\t\t\t</div>\n';
                cellHtml = html;
            }
        }
    }else if(templateData !== undefined && templateData != null && templateData.TagDisplay == "QueryTable") {
    	 //jQuery.isArray(tagArray[0]) is implemented because in previous dashboard tagArray is saved as array sometimes instead of object
        //So first check for an array, if the tagarray has an array do not execute further code
    	var selectedTags = "";
    	var templateArray = [];
    	templateArray.push(templateData);
    	var delimitedData = applyNamespaceDelimiterForTags(templateArray, true);
    	var virtualTagID = getVirtualTagIDValue(tagArray);
    	if (templateData.Visualization != null) {
    		var htmlScript = "";
            var jsCode = "";
            var startScript = '\t\t\t\t\t<script>\n';
            var endScript = "\t\t\t\t\t</script>\n";
            //When the visualization is either i5SPCChart or chart
            if (templateData.Visualization == 'Chart' || templateData.Visualization == 'SPCChart') {
                var chartType;
                if (templateData.Visualization == 'Chart')
                    chartType = determineChartType(templateData.ChartType);
                else
                    chartType = getSPCChartTypeNumber(templateData.ChartType);

                var hQueryTemplate = templateData.Path + "/" + removeExtension(templateData.Name);
                var fileType = determineFileType(templateData.FileType);

                //set the flag to display 'Configure Display Template Properties' button in Menu Bar
                templateData.EnableDisplayTempPropertiesMenu = true;
                var cellStyle = "position:relative;top:0px;bottom:0px;left:0px;right:0px;overflow:auto;display:inline-block;height:100%;width:100%;";

                if (style !== undefined) {
                    cellStyle = style;
                } else if (cellHeight !== undefined) {
                    //replacing the cell height if the call is not from Mobile
                    cellStyle = cellStyle.replace("height:100%", "height:" + cellHeight + "vh");
                }
                //title style
                cellStyle = titleStyle(templateData, cellStyle);
                htmlScript += '\t\t\t\t\t<div id=\"chart' + cellID + '\" style=\"' + cellStyle + '\">\n';
                //                htmlScript += '\t\t\t\t\tjQuery.sap.require("sap.viz.library");\n' + 
                jsCode += '\t\t\t\t\ttry{\n';
               
                //When i5SPCChart
                if (templateData.Visualization == 'SPCChart') {
                    LoadModules.i5SPCChart = true;
                    jsCode += "\t\t\t\t\t\tvar chart_" + cellID + " = " + "new com.sap.xmii.chart.hchart.i5SPCChart(" + chartType + ",\"Predefined/DefaultCatalogHistoryQuery\");\n";
                    jsCode += "\t\t\t\t\t\t\tchart_" + cellID + ".getQueryObject().setParameter(\"SelectedObjects\", \"" + delimitedData.selectedObjects + "\");\n";
                    jsCode += "\t\t\t\t\t\t\tchart_" + cellID + ".getQueryObject().setMode(\"History\");\n";
                    jsCode += "\t\t\t\t\t\t\tchart_" + cellID + ".getQueryObject().setParameter(\"NamespaceDelimeter\",\"" + delimitedData.delimiter + "\");\n";
                } else {
                    jsCode += "\t\t\t\t\t\tvar chart_" + cellID + " = " + "new com.sap.xmii.chart.hchart.i5Chart(" + chartType + ",\"Predefined/DefaultCatalogHistoryQuery\");\n";
                    jsCode += "\t\t\t\t\t\t\tchart_" + cellID + ".getQueryObject().setParameter(\"SelectedObjects\", \"" + delimitedData.selectedObjects + "\");\n";
                    jsCode += "\t\t\t\t\t\t\tchart_" + cellID + ".getQueryObject().setMode(\"History\");\n";
                    jsCode += "\t\t\t\t\t\t\tchart_" + cellID + ".getQueryObject().setParameter(\"NamespaceDelimeter\",\"" + delimitedData.delimiter + "\");\n";
                    
                    if(chartType == "com.sap.xmii.common.util.ChartTypes.LINE")
                    	jsCode += "\t\t\t\t\t\t\tchart_" + cellID + ".getChartObject().setTimeSeries(true);\n";
                }
                if(virtualTagID != undefined || virtualTagID != null)
                	jsCode += "\t\t\t\t\t\t\tchart_" + cellID + ".getQueryObject().setParameter(\"VirtualTagID\",\"" + virtualTagID + "\");\n";
                //add the Title if customised 
                if (templateData.Title != null) {
                    jsCode += "\t\t\t\t\t\tchart_" + cellID + ".getChartObject().setTitle(\""+ templateData.Title + "\");\n";
                }     
                //add the X Axis and Y Axis Columns  if configured
                if (templateData.XAxis != null) {
                    //For i5SPCChart attribute column is label column
                    if (templateData.Visualization == 'SPCChart')
                        jsCode += "\t\t\t\t\t\tchart_" + cellID + ".getChartObject().setAttributeColumns(\"" + templateData.XAxis.join(",") + "\");\n";
                    else
                        jsCode += "\t\t\t\t\t\tchart_" + cellID + ".getChartObject().setLabelColumns(\""+ templateData.XAxis.join(",") + "\");\n";
                }
                if (templateData.YAxis != null) {
                    jsCode += "\t\t\t\t\t\tchart_" + cellID + ".getChartObject().setValueColumns(\""+ templateData.YAxis.join(",") + "\");\n";
                }
                
                //add the Display Parameters if configured
                if (templateData.DisplayParameters != null) {
                    for (var i = 0; i < templateData.DisplayParameters.length; i++) {
                        if (templateData.DisplayParameters[i].DataType == 2 && templateData.DisplayParameters[i].UserParameter != "" && templateData.DisplayParameters[i].UserParameter != undefined) {
                        	jsCode += "\t\t\t\t\t\tchart_" + cellID + ".getChartObject().set" + templateData.DisplayParameters[i].Name + "(" + templateData.DisplayParameters[i].Value + ");\n";
                        } else if (templateData.DisplayParameters[i].UserParameter != "" && templateData.DisplayParameters[i].UserParameter != undefined) {
                        	jsCode += "\t\t\t\t\t\tchart_" + cellID + ".getChartObject().set" + templateData.DisplayParameters[i].Name + "(\"" + templateData.DisplayParameters[i].Value + "\");\n";
                        } else if (templateData.DisplayParameters[i].DataType == 2 && (templateData.DisplayParameters[i].isChanged)) {
                            jsCode += "\t\t\t\t\t\tchart_" + cellID + ".getChartObject().set" + templateData.DisplayParameters[i].Name + "(" + templateData.DisplayParameters[i].Value + ");\n";
                        } else if (templateData.DisplayParameters[i].isChanged && templateData.DisplayParameters[i].Name == "ValueColumns" && templateData.DisplayParameters[i].Value != templateData.TagAlias) {
                        	jsCode += "\t\t\t\t\t\tchart_" + cellID + ".getChartObject().set" + templateData.DisplayParameters[i].Name + "(\"" + templateData.DisplayParameters[i].Value + "\");\n";
                        }else if (templateData.DisplayParameters[i].isChanged && templateData.DisplayParameters[i].Name != "ValueColumns" && (templateData.DisplayParameters[i].Name.indexOf(".")!=-1)){
                        	jsCode += "\t\t\t\t\t\tchart_" + cellID + ".getChartObject().chartPropertyConfig.setProperty(\"" + templateData.DisplayParameters[i].Name + "\",\"" + templateData.DisplayParameters[i].Value + "\");\n";
                        }else if(templateData.DisplayParameters[i].isChanged && templateData.DisplayParameters[i].Name != "ValueColumns"){
                        	jsCode += "\t\t\t\t\t\tchart_" + cellID + ".getChartObject().set" + templateData.DisplayParameters[i].Name + "(\"" + templateData.DisplayParameters[i].Value + "\");\n";
                        }
                    }
                }

                //add the Query Parameters if configured 
                if (templateData.QueryParameters != null) {
                    for (var i = 0; i < templateData.QueryParameters.length; i++) {
                        if (templateData.QueryParameters[i].UserParameter != "" && templateData.QueryParameters[i].UserParameter != undefined) {
                        	
                        	if(templateData.QueryParameters[i].GroupId == 62){
                        		var sysParam = "trxparam." + templateData.QueryParameters[i].Name;
                        		jsCode += "\t\t\t\t\t\tchart_" + cellID + ".getQueryObject().setParameter(\"" + sysParam + "\"," + templateData.QueryParameters[i].UserParameter + ");\n";
                        	} else {
                        		jsCode += "\t\t\t\t\t\tchart_" + cellID + ".getQueryObject().setParameter(\"" + templateData.QueryParameters[i].Name + "\"," + templateData.QueryParameters[i].UserParameter + ");\n";
                        	}
                        } else if (templateData.QueryParameters[i].isChanged){
                        	if(templateData.QueryParameters[i].GroupId == 62){
                        		var sysParam = "trxparam." + templateData.QueryParameters[i].Name;
                        		jsCode += "\t\t\t\t\t\tchart_" + cellID + ".getQueryObject().setParameter(\"" + sysParam + "\",\"" + templateData.QueryParameters[i].Value + "\");\n";
                        	} else if(templateData.QueryParameters[i].Name != "SelectedTags"){
                        		jsCode += "\t\t\t\t\t\tchart_" + cellID + ".getQueryObject().setParameter(\"" + templateData.QueryParameters[i].Name + "\",\"" + templateData.QueryParameters[i].Value + "\");\n";
                        	}
                        	
                        }
                    }
                }

                jsCode += "\t\t\t\t\t\tchart_" + cellID + ".registerCreationEventHandler(ceController.addObject(\"" + cellID + "\",chart_" + cellID + "));\n";


                jsCode += "\t\t\t\t\t\tchart_" + cellID + ".draw(\"chart" + cellID + "\");\n";
                jsCode += '\t\t\t\t\t\t}catch(err){\n';
                jsCode += '\t\t\t\t\t\t\tsap.ui.core.BusyIndicator.hide();\n';
                jsCode += '\t\t\t\t\t\t\tconsole.log("An error has occured: " + err.name + "-" + err.message);\n';
                jsCode += '\t\t\t\t\t\t\tif(err instanceof com.sap.xmii.common.exception.MIIi5Exception){\n';
                jsCode += '\t\t\t\t\t\t\t\tvar oTextView = new sap.ui.commons.TextView();\n' +
                    '\t\t\t\t\t\t\t\toTextView.setText(err.message);\n' +
                    '\t\t\t\t\t\t\t\toTextView.placeAt("chart' + cellID + '","only");\n';
                jsCode += '\t\t\t\t\t\t\t}\n';
                jsCode += '\t\t\t\t\t\t}\n';
            } else if (templateData.Visualization == 'Grid') {
                LoadModules.i5Grid = true;
                var gridType = determineGridType(templateData.GridType);

                var hQueryTemplate = templateData.Path + "/" + removeExtension(templateData.Name);
                var fileType = determineFileType(templateData.FileType);

                //set the flag to display 'Configure Display Template Properties' button in Menu Bar
                templateData.EnableDisplayTempPropertiesGridMenu = true;
                var cellStyle = "position:relative;top:0px;bottom:0px;left:0px;right:0px;overflow:auto;display:inline-block;height:100%;width:100%;";

                if (style !== undefined) {
                    cellStyle = style;
                } else if (cellHeight !== undefined) {
                    //replacing the cell height if the call is not from Mobile
                    cellStyle = cellStyle.replace("height:100%", "height:" + cellHeight + "vh");
                }

                //style for title
                cellStyle = titleStyle(templateData, cellStyle);
                htmlScript += '\t\t\t\t\t<div id=\"grid' + cellID + '\" style=\"' + cellStyle + '\">\n';
                //                htmlScript += '\t\t\t\t\tjQuery.sap.require("sap.viz.library");\n' +
                jsCode += '\t\t\t\t\ttry{\n';
                //Grid rendering Constructor
                jsCode += "\t\t\t\t\t\tvar grid_" + cellID + " = " + "new com.sap.xmii.grid.init.i5Grid(" + gridType + ",\"Predefined/DefaultCatalogHistoryQuery\",true);\n";
                jsCode += "\t\t\t\t\t\t\tgrid_" + cellID + ".getQueryObject().setParameter(\"SelectedObjects\", \"" + delimitedData.selectedObjects + "\");\n";
                jsCode += "\t\t\t\t\t\t\tgrid_" + cellID + ".getQueryObject().setMode(\"History\");\n";
                jsCode += "\t\t\t\t\t\t\tgrid_" + cellID + ".getQueryObject().setParameter(\"NamespaceDelimeter\",\"" + delimitedData.delimiter + "\");\n";
                if(virtualTagID != undefined || virtualTagID != null)
                	jsCode += "\t\t\t\t\t\t\tgrid_" + cellID + ".getQueryObject().setParameter(\"VirtualTagID\",\"" + virtualTagID + "\");\n";
                if (templateData.Title != null) {
                    jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getChartTemplateObject().setProperty(\"Title\",\"" + templateData.Title + "\");\n";
                }
                //add the parameters if Configured

                //add the Display Parameters
                if (templateData.DisplayParameters != null) {
                    for (var i = 0; i < templateData.DisplayParameters.length; i++) {
                        if (templateData.DisplayParameters[i].DataType == 2 && templateData.DisplayParameters[i].UserParameter !== "" && templateData.DisplayParameters[i].UserParameter !== undefined) {
                            jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.DisplayParameters[i].Name + "\"," + templateData.DisplayParameters[i].UserParameter + ");\n";
                        } else if (templateData.DisplayParameters[i].UserParameter != "" && templateData.DisplayParameters[i].UserParameter !== undefined) {
                            if (templateData.DisplayParameters[i].DataType == 1 || templateData.DisplayParameters[i].DataType == 3) {
                                jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.DisplayParameters[i].Name + "\"," + templateData.DisplayParameters[i].UserParameter + ");\n";
                            } else {
                                jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.DisplayParameters[i].Name + "\"," + templateData.DisplayParameters[i].UserParameter + ");\n";
                            }
                        } else if (templateData.DisplayParameters[i].DataType == 2 && (templateData.DisplayParameters[i].isChanged)) {
                            jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.DisplayParameters[i].Name + "\"," + templateData.DisplayParameters[i].Value + ");\n";

                        } else if (templateData.DisplayParameters[i].isChanged) {
                            //if(isNaN(templateData.Parameters[i].Value)) {
                            if (templateData.DisplayParameters[i].DataType == 1 || templateData.DisplayParameters[i].DataType == 3) {
                                if (templateData.DisplayParameters[i].Name == "DisplayColumns") {
                                    if (templateData.DisplayParameters[i].Value == "NA")
                                        jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getChartTemplateObject().setProperty" + "( \"" + templateData.DisplayParameters[i].Name + "\" , \"" + templateData.SelectedColumns.join(",") + "\");\n";
                                    else
                                        jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.DisplayParameters[i].Name + "\",\"" + templateData.DisplayParameters[i].Value + "\");\n";
                                } else
                                    jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.DisplayParameters[i].Name + "\",\"" + templateData.DisplayParameters[i].Value + "\");\n";
                            } else {
                                jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.DisplayParameters[i].Name + "\"," + templateData.DisplayParameters[i].Value + ");\n";
                            }
                        }
                    }
                }
                //Add Query Parameters
                if (templateData.QueryParameters != null) {
                    for (var i = 0; i < templateData.QueryParameters.length; i++) {
                        if (templateData.QueryParameters[i].UserParameter != "" && templateData.QueryParameters[i].UserParameter != undefined) {
                        	
                        	if(templateData.QueryParameters[i].GroupId == 62){
                        		var sysParam = "trxparam."+templateData.QueryParameters[i].Name;
                        		jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getQueryObject().setParameter(\"" + sysParam + "\"," + templateData.QueryParameters[i].UserParameter + ");\n";
                        	} else {
                        		jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getQueryObject().setParameter(\"" + templateData.QueryParameters[i].Name + "\"," + templateData.QueryParameters[i].UserParameter + ");\n";
                        	}
                        } else if (templateData.QueryParameters[i].isChanged){
                        	if(templateData.QueryParameters[i].GroupId == 62){
                        		var sysParam = "trxparam."+templateData.QueryParameters[i].Name;
                        		jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getQueryObject().setParameter(\"" + sysParam + "\",\"" + templateData.QueryParameters[i].Value + "\");\n";
                        	} else if(templateData.QueryParameters[i].Name != "SelectedTags") {
                        		jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getQueryObject().setParameter(\"" + templateData.QueryParameters[i].Name + "\",\"" + templateData.QueryParameters[i].Value + "\");\n";
                        	}
                        	
                        }
                    }
                }
                
                jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".registerCreationEventHandler(ceController.addObject(\"" + cellID + "\",grid_" + cellID + "));\n";
                
                jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".draw(\"grid" + cellID + "\");\n";
                jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".getGridObject().setDisplayColumns(\"" + templateData.SelectedColumns.join(",") + "\");\n";

               
          
                jsCode += "\t\t\t\t\t\tgrid_" + cellID + ".refresh();\n";
                jsCode += '\t\t\t\t\t\t}catch(err){\n';
                jsCode += '\t\t\t\t\t\t\tsap.ui.core.BusyIndicator.hide();\n';
                jsCode += '\t\t\t\t\t\t\tconsole.log("An error has occured: " + err.name + "-" + err.message);\n';
                jsCode += '\t\t\t\t\t\t\tif(err instanceof com.sap.xmii.common.exception.MIIi5Exception){\n';
                jsCode += '\t\t\t\t\t\t\t\tvar oTextView = new sap.ui.commons.TextView();\n' +
                    '\t\t\t\t\t\t\t\toTextView.setText(err.message);\n' +
                    '\t\t\t\t\t\t\t\toTextView.placeAt("grid' + cellID + '","only");\n';
                jsCode += '\t\t\t\t\t\t\t}\n';
                jsCode += '\t\t\t\t\t\t}\n';
            } else {
                LoadModules.queryTable = true;
                //reset the flag to show dipslay param menu if Visualization type is 'table'
                templateData.EnableDisplayTempPropertiesMenu = false;
                templateData.EnableDisplayTempPropertiesGridMenu = false;
                if (fileType == FILE_TYPE_QUERY) {
                    fileType = templateData.FileType;
                }
                //if not Chart , then it is a Table
                var cellStyle = "position:relative;top:0px;bottom:0px;left:0px;right:0px;overflow:auto;display:inline-block;height:100%;width:100%";

                if (style !== undefined) {
                    cellStyle = style;
                } else if (cellHeight !== undefined) {
                    //replacing the cell height if the call is not from Mobile
                    cellStyle = cellStyle.replace("height:100%", "height:" + cellHeight + "vh");
                }
                cellStyle = titleStyle(templateData, cellStyle);
                htmlScript = '\t\t\t\t\t<div id=\"query' + cellID + '\" style=\"' + cellStyle + '\">\n';
                jsCode += '\t\t\t\t\ttry{\n';
                
                jsCode += "\t\t\t\t\t\t\tvar query_" + cellID + " =new QueryTable(\"Predefined/DefaultCatalogHistoryQuery\", \"Tags\",\""+delimitedData.selectedObjects+"\",\""+delimitedData.delimiter+"\");\n";

                //add the Title if customised 
                if (templateData.Title != null) {
                    jsCode += "\t\t\t\t\t\tquery_" + cellID + ".setTitle(\"" + templateData.Title + "\");\n";
                }
                if (templateData.AutoRefresh != null) {
                    jsCode += "\t\t\t\t\t\tquery_" + cellID + ".setAutoRefresh(\"" + templateData.AutoRefresh + "\");\n";
                }
                if (templateData.RefreshRate != null) {
                    jsCode += "\t\t\t\t\t\tquery_" + cellID + ".setRefreshRate(\"" + templateData.RefreshRate + "\");\n";
                }
                if (templateData.SelectedColumns != null) {
                    jsCode += "\t\t\t\t\t\tquery_" + cellID + ".setColumns(\"" + templateData.SelectedColumns.join(",") + "\");\n";
                }
                
                var selectedTags = null;
                var selectedAliases = null;
                
                //add the Query Parameters if configured
                if (templateData.QueryParameters != null) {
                    for (var i = 0; i < templateData.QueryParameters.length; i++) {
                        if (templateData.QueryParameters[i].UserParameter != "" && templateData.QueryParameters[i].UserParameter != undefined) {
                        	
                        	if(templateData.QueryParameters[i].GroupId == 62){
                        		var sysParam = "trxparam." + templateData.QueryParameters[i].Name;
                        		jsCode += "\t\t\t\t\t\tquery_" + cellID + ".setParameter(\"" + sysParam + "\"," + templateData.QueryParameters[i].UserParameter + ");\n";
                        	} else {
                        		jsCode += "\t\t\t\t\t\tquery_" + cellID + ".setParameter(\"" + templateData.QueryParameters[i].Name + "\"," + templateData.QueryParameters[i].UserParameter + ");\n";
                        	}
                        } else if (templateData.QueryParameters[i].isChanged){
                        	if(templateData.QueryParameters[i].GroupId == 62){
                        		var sysParam = "trxparam." + templateData.QueryParameters[i].Name;
                        		jsCode += "\t\t\t\t\t\tquery_" + cellID + ".setParameter(\"" + sysParam + "\",\"" + templateData.QueryParameters[i].Value + "\");\n";
                        	}else if (templateData.QueryParameters[i].Name == "SelectedTags" && templateData.QueryParameters[i].Value != "") {
                                selectedTags = templateData.QueryParameters[i].Value;
                                jsCode += "\t\t\t\t\t\t\tquery_" + cellID + ".setParameter(\"" + templateData.QueryParameters[i].Name + "\",\"" + selectedTags + "\");\n";
                            }else if (templateData.QueryParameters[i].Name == "SelectedAliases") {
                                selectedAliases = templateData.QueryParameters[i].Value;
                                jsCode += "\t\t\t\t\t\t\tquery_" + cellID + ".setParameter(\"" + templateData.QueryParameters[i].Name + "\",\"" + templateData.QueryParameters[i].Value + "\");\n";
                                templateData.TagAlias = templateData.QueryParameters[i].Value;
                            }else{
                            	jsCode += "\t\t\t\t\t\t\tquery_" + cellID + ".setParameter(\"" + templateData.QueryParameters[i].Name + "\",\"" + templateData.QueryParameters[i].Value + "\");\n";
                            }
                        }
                    }
                }
                jsCode += "\t\t\t\t\t\tquery_" + cellID + ".draw(\"query" + cellID + "\");\n";
                jsCode += '\t\t\t\t\t}catch(err){\n';
                jsCode += '\t\t\t\t\t\tconsole.log("An error has occured: " + err.name + "-" + err.message);\n';
                jsCode += '\t\t\t\t\t}\n';
            }
            if (separateJsCode) {
                var cellHtml = {};
                cellHtml.html = htmlScript + '\t\t\t\t\t\t</div>\n';
                cellHtml.js = jsCode;
            } else {
                var cellHtml = htmlScript + startScript + jsCode + endScript + '\t\t\t\t\t\t</div>\n';
            }
        } else{
        	LoadModules.queryTable = true;
    		var jsScript = "";
            divCellId = "tags" + cellID;
            var cellStyle = "width:100%;height:100%;";

            if (style !== undefined) {
            	cellStyle = style;
            } else if (cellHeight !== undefined) {
            //replacing the cell height if the call is not from Mobile
              cellStyle = cellStyle.replace("height:100%", "height:" + cellHeight + "vh");
            }
            //title style
            cellStyle = titleStyle(objectData, cellStyle);
            var htmlScript = "\t\t\t\t\t<div id=\"" + divCellId + "\"  style=\"" + cellStyle + "\">\n";
           
            jsScript += '\t\t\t\t\ttry{\n';
        
            jsScript += "\t\t\t\t\t\t\tvar query_" + divCellId + " =new QueryTable(\"Predefined/DefaultCatalogHistoryQuery\", \"Tags\",\""+delimitedData.selectedObjects+"\",\""+delimitedData.delimiter+"\");\n";
 
            var isSelectedTagParamChanged = false;
            var selectedTags = null;
            var selectedAliases = null;
            
            if (templateData.QueryParameters != null) {
                for (var i = 0; i < templateData.QueryParameters.length; i++) {
                    if (templateData.QueryParameters[i].UserParameter != "" && templateData.QueryParameters[i].UserParameter != undefined) {
                    	if(templateData.QueryParameters[i].GroupId == 62){
                    		var sysParam = "trxparam." + templateData.QueryParameters[i].Name;
                    		jsScript += "\t\t\t\t\t\tquery_" + divCellId + ".setParameter(\"" + sysParam + "\"," + templateData.QueryParameters[i].UserParameter + ");\n";
                    	} else {
                    		jsScript += "\t\t\t\t\t\tquery_" + divCellId + ".setParameter(\"" + templateData.QueryParameters[i].Name + "\"," + templateData.QueryParameters[i].UserParameter + ");\n";
                    	}
                    } else if (templateData.QueryParameters[i].isChanged){
                    	if(templateData.QueryParameters[i].GroupId == 62){
                    		var sysParam = "trxparam." + templateData.QueryParameters[i].Name;
                    		jsScript += "\t\t\t\t\t\tquery_" + divCellId + ".setParameter(\"" + sysParam + "\",\"" + templateData.QueryParameters[i].Value + "\");\n";
                    	}else if (templateData.QueryParameters[i].Name == "SelectedTags" && templateData.QueryParameters[i].Value != "") {
                            isSelectedTagParamChanged = true;
                            selectedTags = templateData.QueryParameters[i].Value;
                            jsScript += "\t\t\t\t\t\t\tquery_" + divCellId + ".setParameter(\"" + templateData.QueryParameters[i].Name + "\",\"" + selectedTags + "\");\n";
                        }else if (templateData.QueryParameters[i].Name == "SelectedAliases") {
                            selectedAliases = templateData.QueryParameters[i].Value;
                            jsScript += "\t\t\t\t\t\t\tquery_" + divCellId + ".setParameter(\"" + templateData.QueryParameters[i].Name + "\",\"" + templateData.QueryParameters[i].Value + "\");\n";
                            templateData.TagAlias = templateData.QueryParameters[i].Value;
                        }else{
                        	jsScript += "\t\t\t\t\t\t\tquery_" + divCellId + ".setParameter(\"" + templateData.QueryParameters[i].Name + "\",\"" + templateData.QueryParameters[i].Value + "\");\n";
                        }
                    }
                }
            }
            //this condition is for the tag when it is dropped for the first time 
            // We need to set the all the tags with alias as the tag name( not namespace like CatalogConnector~root~CylTemp1 then set CylTemp1 to it alias) 
            if(!isSelectedTagParamChanged) {
                selectedTags = delimitedData.selectedObjects;
                selectedAliases = selectedTags.substring(selectedTags.lastIndexOf(delimitedData.delimiter) + 1);
                templateData.TagAlias = selectedAliases;
                
                if (templateData.QueryParameters == undefined) templateData.QueryParameters = [];

                var currentIndex = findIndexOfParameterAndInitialize(templateData.QueryParameters, "SelectedTags", 12, 1, 10, selectedTags);
                templateData.QueryParameters[currentIndex].Value = selectedTags;
                templateData.QueryParameters[currentIndex].DefaultValue = selectedTags;

                var currentIndex = findIndexOfParameterAndInitialize(templateData.QueryParameters, "SelectedAliases", 0, 1, 10, selectedAliases);
                templateData.QueryParameters[currentIndex].Value = selectedAliases;
                valueColumns = selectedAliases;
                jsScript += "\t\t\t\t\t\t\tquery_" + divCellId + ".setParameter(\"SelectedTags\",\"" + selectedTags + "\");\n";
                jsScript += "\t\t\t\t\t\t\tquery_" + divCellId + ".setParameter(\"SelectedAliases\",\"" + selectedAliases + "\");\n";
            }
            jsScript += "\t\t\t\t\t\t\t query_"+divCellId + ".draw(\"" + divCellId + "\");\n";
            
            jsScript += '\t\t\t\t\t}catch(err){\n';
            jsScript += '\t\t\t\t\t\tsap.ui.core.BusyIndicator.hide();\n';
            jsScript += '\t\t\t\t\t\tconsole.log("An error has occured: " + err.name + "-" + err.message);\n';
            jsScript += '\t\t\t\t\t\tvar oTextView = new sap.ui.commons.TextView();\n' +
                '\t\t\t\t\t\toTextView.setText(err.message);\n' +
                '\t\t\t\t\t\toTextView.placeAt("' + divCellId + '","only");\n';
            jsScript += '\t\t\t\t\t}\n';
            if (separateJsCode) {
                cellHtml.html = cellHtml.html + htmlScript;
                cellHtml.js = cellHtml.js + jsScript;
            } else {
            	htmlScript = htmlScript + startScript + jsScript + endScript;
                cellHtml += htmlScript;
            }
        }
    }
    else if (runtime) {
        //adding source code addition for PIC Tags
        if (tagArray != null && typeof(tagArray) != 'undefined' && tagArray.length > 0) {
            LoadModules.plantView = true;
            LoadModules.queryTable = true;
            var htmlScript = "";
            var jsScript = "";
            if (cellHtml == "" || (cellHtml.html && cellHtml.html == "")) {
                divCellId = "tags:" + cellID;
                var cellStyle = "width:100%;height:100%;";

                if (style !== undefined) {
                    cellStyle = style + "position:relative;";
                } else if (cellHeight !== undefined) {
                    //replacing the cell height if the call is not from Mobile
                    cellStyle = cellStyle.replace("height:100%", "height:" + cellHeight + "vh");
                }
                htmlScript = "\t\t\t\t\t<div id=\"" + divCellId + "\" style=\"" + cellStyle + "\">\n\t\t\t\t\t</div>\n";
            }
            jsScript += '\t\t\t\t\ttry{\n';
            for (i = 0; i < tagArray.length; i++) {
                //This situation occurs with previous dashboard where tagArray is saved as array sometimes instead of object
                //So first check for an array, if the tagarray has an array do not execute further code
                if (jQuery.isArray(tagArray[i]))
                    continue;

                var display = "Value";
                var callbackMethod = null;
                var onClickFunctionName = null;
                var size = "";
                //checking for display as Value or Graphics
                if (tagArray[i].DisplayData != null && tagArray[i].DisplayData !== undefined) {
                    if (tagArray[i].DisplayData.Value) {
                        display = "Value";
                    } else {
                        display = "";
                    }
                    if (tagArray[i].DisplayData.Size && tagArray[i].DisplayData.Size.length > 0) {
                        size = tagArray[i].DisplayData.Size;
                    }
                }
                if (tagArray[i].EventsData != null && tagArray[i].EventsData !== undefined) {
                    if (tagArray[i].EventsData.CallBack != null && tagArray[i].EventsData.CallBack != undefined && tagArray[i].EventsData.CallBack) {
                        if (tagArray[i].EventsData.MethodName != null && tagArray[i].EventsData.MethodName != undefined) {
                            callbackMethod = tagArray[i].EventsData.MethodName;
                            if (globalUserScript.search("function " + callbackMethod) == -1) {
                                var javadoc = '\n/**' +
                                    '\n' + oBundle.getText("TAG_VALUE_CHANGE_CALLBACK") +
                                    '\nParameters:' +
                                    '\n\ttagData : ' + oBundle.getText("TAG_VALUE_CHANGE_PARAMETERS") +
                                    '\n\ttagName:\t' + oBundle.getText("TAG_NAME_PARAM") +
                                    '\n\talternateTagName:\t' + oBundle.getText("ALT_TAG_NAME_PARAM") +
                                    '\n\ttagValue:\t' + oBundle.getText("TAG_VALUE_PARAM") +
                                    '\n\tcolor:\t' + oBundle.getText("COLOR_PARAM") +
                                    '\n\ticonPath:\t' + oBundle.getText("ICON_PATH_PARAM") +
                                    '\n\tunitOfMeasure:\t' + oBundle.getText("UNIT_OF_MEASURE_PARAM") +
                                    '\n**/';
                                globalUserScript += javadoc;
                                globalUserScript += '\n' + 'function ' + callbackMethod + '(tagData){\n//TODO\n}\n';
                            }
                        }
                    }

                    if (tagArray[i].EventsData.OnClickFunction !== undefined && tagArray[i].EventsData.OnClickFunction != null && tagArray[i].EventsData.OnClickFunction) {
                        if (tagArray[i].EventsData.OnClickFunctionName !== undefined && tagArray[i].EventsData.OnClickFunctionName != null &&
                            tagArray[i].EventsData.OnClickFunctionName != "") {
                            onClickFunctionName = tagArray[i].EventsData.OnClickFunctionName;
                            if (globalUserScript.search("function " + onClickFunctionName) == -1) {
                                var javadoc = '\n/**' +
                                    '\n' + oBundle.getText("TAG_ON_CLICK_CALLBACK") +
                                    '\nParameters:' +
                                    '\n\ttagName:\t' + oBundle.getText("TAG_NAME_PARAM") +
                                    '\n\tcurrentValue:\t' + oBundle.getText("TAG_VALUE_PARAM") +
                                    '\n**/';
                                globalUserScript += javadoc;
                                globalUserScript += '\n' + 'function ' + onClickFunctionName + '(tagName, currentValue){\n//TODO\n}\n';
                            }
                        }

                    }
                }
                jsScript += "\t\t\t\t\t\t\tvar tagData" + i + " = {}\n";
                jsScript += "\t\t\t\t\t\t\ttagData" + i + ".tagNamespace = \"" + tagArray[i].Namespace + "\";\n";
                jsScript += "\t\t\t\t\t\t\ttagData" + i + ".tagName = \"" + tagArray[i].Name + "\";\n";
                jsScript += "\t\t\t\t\t\t\ttagData" + i + ".tagAlias = \"" + tagArray[i].TagAlias + "\";\n";
                jsScript += "\t\t\t\t\t\t\ttagData" + i + ".percentX = \"" + tagArray[i].xPos + "\";\n";
                jsScript += "\t\t\t\t\t\t\ttagData" + i + ".percentY = \"" + tagArray[i].yPos + "\";\n";
                jsScript += "\t\t\t\t\t\t\ttagData" + i + ".virtualTag = \"" + tagArray[i].VirtualTag + "\";\n";
                if (tagArray[i].SettingsData) {
                	jsScript += "\t\t\t\t\t\t\ttagData" + i + ".ValueColumn = \"" + tagArray[i].SettingsData.ValueColumn + "\";\n";
                	jsScript += "\t\t\t\t\t\t\ttagData" + i + ".ValueColumnDataType = \"" + tagArray[i].SettingsData.ValueColumnDataType + "\";\n";
                }
                //adding ValueColumns for displaying as a trend of OnClick function on the Extended Button
                if(tagArray[i].SettingsData != undefined && tagArray[i].SettingsData.QueryColumns != undefined){
	                var valueColumnsLength = tagArray[i].SettingsData.QueryColumns.length;
	                var valueColumnArray = [];
	                for( var k=0; k <valueColumnsLength; k++){
	                	var SQLDataType = tagArray[i].SettingsData.QueryColumns[k].SQLDataType;
	                	//Only numeric columns will be shown in Trend Display
	                	if(SQLDataType == 8 || SQLDataType == 4 || SQLDataType == 6 || SQLDataType ==7){
	                		valueColumnArray.push(tagArray[i].SettingsData.QueryColumns[k].Name);
	                	}
	                }
	                jsScript += "\t\t\t\t\t\t\ttagData" + i + ".valueColumns = \"" + valueColumnArray.join(",") + "\";\n";
                }
                if (tagArray[i].NewCalculatedPos != undefined && tagArray[i].NewCalculatedPos)
                	jsScript += "\t\t\t\t\t\t\ttagData" + i + ".changedPercentY = true;\n";
                jsScript += "\t\t\t\t\t\t\ttagData" + i + ".cellId = \"" + divCellId + "\";\n";
                if (tagArray[i].TagDisplay == "Gauge") {
                    display = "Gauge";
                }
                jsScript += "\t\t\t\t\t\t\ttagData" + i + ".display = \"" + display + "\";\n";
                if (tagArray[i].TagDisplay == "Gauge") {
                    if (tagArray[i].HeightPercentage != null || tagArray[i].WidthPercentage != null ||
                        tagArray[i].DesignTimeCellWidth != null || tagArray[i].DesignTimeCellHeight != null) {

                    	jsScript += "\t\t\t\t\t\t\ttagData" + i + ".heightPercentage = " + tagArray[i].HeightPercentage + ";\n";
                    	jsScript += "\t\t\t\t\t\t\ttagData" + i + ".widthPercentage = " + tagArray[i].WidthPercentage + ";\n";
                    	jsScript += "\t\t\t\t\t\t\ttagData" + i + ".designTimeCellWidth = " + tagArray[i].DesignTimeCellWidth + ";\n";
                        jsScript += "\t\t\t\t\t\t\ttagData" + i + ".designTimeCellHeight = " + tagArray[i].DesignTimeCellHeight + ";\n";
                    } else {
                    	jsScript += "\t\t\t\t\t\t\ttagData" + i + ".height = " + tagArray[i].Height + ";\n";
                    	jsScript += "\t\t\t\t\t\t\ttagData" + i + ".width = " + tagArray[i].Width + ";\n";
                    }
                    jsScript += "\t\t\t\t\t\t\ttagData" + i + ".parentCellId = \"" + cellID + "\";\n";
                }

                jsScript += "\t\t\t\t\t\t\ttagData" + i + ".size = \"" + size + "px\";\n";
                if (tagArray[i].Area)
                	jsScript += "\t\t\t\t\t\t\ttagData" + i + ".areaName = \"" + tagArray[i].Area + "\";\n";
                if (tagArray[i].DisplayData) {
                	jsScript += "\t\t\t\t\t\t\ttagData" + i + ".showTagName = " + tagArray[i].DisplayData.ShowTagName + ";\n";
                	jsScript += "\t\t\t\t\t\t\ttagData" + i + ".tagNameDisplay = \"" + tagArray[i].DisplayData.AltTagName + "\";\n";
                	jsScript += "\t\t\t\t\t\t\ttagData" + i + ".showUnit  = " + tagArray[i].DisplayData.ShowUnit + ";\n";
                	jsScript += "\t\t\t\t\t\t\ttagData" + i + ".unitPropertySet  = \"" + tagArray[i].DisplayData.UnitPropertySet + "\";\n";
                    jsScript += "\t\t\t\t\t\t\ttagData" + i + ".isUnitValueHelp  = " + tagArray[i].DisplayData.IsUnitValueHelp + ";\n";
                    jsScript += "\t\t\t\t\t\t\ttagData" + i + ".altUnit = \"" + tagArray[i].DisplayData.AltUnit + "\";\n";
                    jsScript += "\t\t\t\t\t\t\ttagData" + i + ".decimalPlaces = \"" + tagArray[i].DisplayData.Decimals + "\";\n";
                    jsScript += "\t\t\t\t\t\t\ttagData" + i + ".DisplayColumn = \"" + tagArray[i].DisplayData.DisplayColumn + "\";\n";
                    jsScript += "\t\t\t\t\t\t\ttagData" + i + ".DisplayColumnDataType = \"" + tagArray[i].DisplayData.DisplayColumnDataType + "\";\n";
                }
                jsScript += "\t\t\t\t\t\t\ttagData" + i + ".callbackMethod = \"" + callbackMethod + "\";\n";
                if (tagArray[i].EventsData) {
                	jsScript += "\t\t\t\t\t\t\ttagData" + i + ".ShowTagTrend = \"" + tagArray[i].EventsData.ShowTagTrend + "\";\n";
                	jsScript += "\t\t\t\t\t\t\ttagData" + i + ".OnClickFunctionName = \"" + onClickFunctionName + "\";\n";
                	jsScript += "\t\t\t\t\t\t\ttagData" + i + ".AreaEvent = \"" + tagArray[i].EventsData.AreaEvent + "\";\n";
                	jsScript += "\t\t\t\t\t\t\ttagData" + i + ".ShowAs = \"" + tagArray[i].EventsData.ShowAs + "\";\n";
                	jsScript += "\t\t\t\t\t\t\ttagData" + i + ".ShowAsTagTable = \"" + tagArray[i].EventsData.ShowAsTagTable + "\";\n";
                	jsScript += "\t\t\t\t\t\t\ttagData" + i + ".ShowAsTagTrend = \"" + tagArray[i].EventsData.ShowAsTagTrend + "\";\n";
                }
                jsScript += "\t\t\t\t\t\t\tvar tagObject_" + i + " = new com.sap.xmii.ssce.PICTag(tagData" + i + ");\n";
                
              //checking for any Custom Query Parameters if present (means if the Value is not empty)
                if (tagArray[i].QueryParameters != null && tagArray[i].QueryParameters != undefined) {
                    for (var k = 0; k < tagArray[i].QueryParameters.length; k++) {
                        if (tagArray[i].QueryParameters[k].UserParameter != "" && tagArray[i].QueryParameters[k].UserParameter != undefined){
                        	jsScript += "\t\t\t\t\t\t\ttagObject_" + i + ".addQueryParameter(\"" + tagArray[i].QueryParameters[k].Name + "\", \"" + tagArray[i].QueryParameters[k].UserParameter + "\");\n";
                        }else if (tagArray[i].QueryParameters[k].isChanged){
                        	if(tagArray[i].QueryParameters[k].GroupId == 62){
                        		var sysParam = "trxparam." + tagArray[i].QueryParameters[k].Name;
                        		jsScript += "\t\t\t\t\t\t\ttagObject_" + i + ".addQueryParameter(\"" + sysParam + "\", \"" + tagArray[i].QueryParameters[k].Value + "\");\n";
                        	}else{
                        		jsScript += "\t\t\t\t\t\t\ttagObject_" + i + ".addQueryParameter(\"" + tagArray[i].QueryParameters[k].Name + "\", \"" + tagArray[i].QueryParameters[k].Value + "\");\n";
                        	}
                        }
                    }
                }
                
                //if tag is set its display as gauge
                //add the Parameters if configured
                if (tagArray[i].DisplayParameters != null) {
                    for (var j = 0; j < tagArray[i].DisplayParameters.length; j++) {

                        if (tagArray[i].DisplayParameters[j].DataType == 2 && tagArray[i].DisplayParameters[j].UserParameter !== undefined && tagArray[i].DisplayParameters[j].UserParameter !== "") {
                            if (tagArray[i].DisplayParameters[j].Name == "ValueColumns") {
                            	jsScript += "\t\t\t\t\t\t\ttagObject_" + i + ".setParameter(\"" + tagArray[i].DisplayParameters[j].Name + "\"," + tagArray[i].DisplayParameters[j].UserParameter + ");\n";
                            } else {
                            	jsScript += "\t\t\t\t\t\t\ttagObject_" + i + ".setParameter(\"" + tagArray[i].DisplayParameters[j].Name + "\"," + tagArray[i].DisplayParameters[j].UserParameter + ");\n";
                            }
                        } else if (tagArray[i].DisplayParameters[j].UserParameter != "" && tagArray[i].DisplayParameters[j].UserParameter != undefined) {

                        	jsScript += "\t\t\t\t\t\t\ttagObject_" + i + ".setParameter(\"" + tagArray[i].DisplayParameters[j].Name + "\"," + tagArray[i].DisplayParameters[j].UserParameter + ");\n";
                        } else if (tagArray[i].DisplayParameters[j].DataType == 2 && (tagArray[i].DisplayParameters[j].isChanged)) {
                            if (tagArray[i].DisplayParameters[j].Name == "ValueColumns") {
                            	jsScript += "\t\t\t\t\t\t\ttagObject_" + i + ".setParameter(\"" + tagArray[i].DisplayParameters[j].Name + "\",\"" + tagArray[i].DisplayParameters[j].Value + "\");\n";
                            } else {
                            	jsScript += "\t\t\t\t\t\t\ttagObject_" + i + ".setParameter(\"" + tagArray[i].DisplayParameters[j].Name + "\"," + tagArray[i].DisplayParameters[j].Value + ");\n";
                            }
                        } else if (tagArray[i].DisplayParameters[j].isChanged) {
                            if (isNaN(tagArray[i].DisplayParameters[j].Value) || tagArray[i].DisplayParameters[j].Value == "") {
                            	jsScript += "\t\t\t\t\t\t\ttagObject_" + i + ".setParameter(\"" + tagArray[i].DisplayParameters[j].Name + "\",\"" + tagArray[i].DisplayParameters[j].Value + "\");\n";
                            } else {
                            	jsScript += "\t\t\t\t\t\t\ttagObject_" + i + ".setParameter(\"" + tagArray[i].DisplayParameters[j].Name + "\"," + tagArray[i].DisplayParameters[j].Value + ");\n";
                            }
                        }
                    }
                }

                jsScript += "\t\t\t\t\t\t\ttagObject_" + i + ".draw();\n";
                //checking for the display configuration of the tags
                if (tagArray[i].SettingsData != null && tagArray[i].SettingsData !== undefined) {
                	var rulesData = tagArray[i].SettingsData.Rules;
                	var virtualTag = tagArray[i].VirtualTag;
                   if(rulesData!=null || rulesData != undefined){
                    for (var j = 0; j < rulesData.length; j++) {
                    	if(virtualTag){
	                        if (rulesData[j].Operator == "Between") {
	                        	jsScript += "\t\t\t\t\t\t\ttagObject_" + i + ".addConditionforVirtualTag(\"" + rulesData[j].Operator + "\", \"" + rulesData[j].Value + ":" + rulesData[j].ToValue + "\", \"" + rulesData[j].Hexcode + "\",  \"" + rulesData[j].GraphicsType + "\", \"" + rulesData[j].IconPath + "\" , \"" + rulesData[j].RuntimeValue + "\" ,\"" + rulesData[j].Size + "\",\"" + rulesData[j].ConditionColumnName + "\" ,\"" + rulesData[j].ToValueConditionColumnName + "\" );\n";
	                        } else {
	                        	jsScript += "\t\t\t\t\t\t\ttagObject_" + i + ".addConditionforVirtualTag(\"" + rulesData[j].Operator + "\", \"" + rulesData[j].Value + "\", \"" + rulesData[j].Hexcode + "\", \"" + rulesData[j].GraphicsType + "\", \"" + rulesData[j].IconPath + "\" , \"" + rulesData[j].RuntimeValue + "\" ,\"" + rulesData[j].Size + "\",\"" + rulesData[j].ConditionColumnName + "\");\n";
	                        }
                    	}else{
	                    	if (rulesData[j].Operator == "Between") {
	                        	jsScript += "\t\t\t\t\t\t\ttagObject_" + i + ".addCondition(\"" + rulesData[j].Operator + "\", \"" + rulesData[j].Value + ":" + rulesData[j].ToValue + "\", \"" + rulesData[j].Hexcode + "\",  \"" + rulesData[j].GraphicsType + "\", \"" + rulesData[j].IconPath + "\" , \"" + rulesData[j].RuntimeValue + "\" ,\"" + rulesData[j].PropertyName + "\",\"" + rulesData[j].PropertySetName + "\" ,\"" + rulesData[j].Size + "\" );\n";
	                        } else {
	                        	jsScript += "\t\t\t\t\t\t\ttagObject_" + i + ".addCondition(\"" + rulesData[j].Operator + "\", \"" + rulesData[j].Value + "\", \"" + rulesData[j].Hexcode + "\", \"" + rulesData[j].GraphicsType + "\", \"" + rulesData[j].IconPath + "\" , \"" + rulesData[j].RuntimeValue + "\" ,\"" + rulesData[j].PropertyName + "\",\"" + rulesData[j].PropertySetName + "\" ,\"" + rulesData[j].Size + "\");\n";
	                        }
                    	}
                    }
                   }
                }
            }
            jsScript += '\t\t\t\t\t}catch(err){\n';
            jsScript += '\t\t\t\t\t\tconsole.log("An error has occured: " + err.name + "-" + err.message);\n';
            jsScript += '\t\t\t\t\t}\n';
            
            if (separateJsCode) {
                cellHtml.html = cellHtml.html + htmlScript;
                cellHtml.js = cellHtml.js + jsScript;
            } else {
            	htmlScript = htmlScript + startScript + jsScript + endScript;
                cellHtml += htmlScript;
            }
        }
        //generating source code for dropped queries on Image
        if (queryArray != null && typeof(queryArray) != 'undefined' && queryArray.length > 0) {
            //if cell html is blank it means that the there are only queries button on the layout and need to create the div here
            LoadModules.queryObject = true;
            LoadModules.queryTable = true;
            var htmlScript = "";
            var jsScript = "";
            if (cellHtml == "" || (cellHtml.html && cellHtml.html == "")) {
                divCellId = "queries:" + cellID;
                var cellStyle = "width:100%;height:100%;";

                if (style !== undefined) {
                    cellStyle = style;
                } else if (cellHeight !== undefined) {
                    //replacing the cell height if the call is not from Mobile
                    cellStyle = cellStyle.replace("height:100%", "height:" + cellHeight + "vh");
                }
                //title style
                cellStyle = titleStyle(objectData, cellStyle);
                htmlScript = "\t\t\t\t\t<div id=\"" + divCellId + "\" style=\"" + cellStyle + "\">\n\t\t\t\t\t</div>\n";
            }
            jsScript += '\t\t\t\t\ttry{\n';
            //need to each and every query object on the layout
            for (i = 0; i < queryArray.length; i++) {
                var queryObj = queryArray[i];
                var display = "Value";
                var valueChangeFunction = null;
                var onClickFunctionName = null;
                var size = "";
                //first checking if any events are regestered against a query object, if yes, then need to generate the source code for them as well
                if (queryObj.EventsData !== undefined && queryObj.EventsData != null) {
                    //checking if the value change function is registered
                    if (queryObj.EventsData.CallBack !== undefined && queryObj.EventsData.CallBack != null && queryObj.EventsData.CallBack) {
                        if (queryObj.EventsData.MethodName !== undefined && queryObj.EventsData.MethodName != null && queryObj.EventsData.MethodName != "") {
                            valueChangeFunction = queryObj.EventsData.MethodName;
                            if (globalUserScript.search("function " + valueChangeFunction) == -1) {
                                var javadoc = '\n/**' +
                                    '\n' + oBundle.getText("QUERY_VALUE_CHANGE_CALLBACK") +
                                    '\nParameters:' +
                                    '\n\tqueryData : ' + oBundle.getText("QUERY_VALUE_CHANGE_PARAMETERS") +
                                    '\n\t\tColumnName:\t' + oBundle.getText("QUERY_COLUMN_NAME_PARAM") +
                                    '\n\t\tColumnValue:\t' + oBundle.getText("QUERY_COLUMN_VALUE_PARAM") +
                                    '\n\t\ttColor:\t' + oBundle.getText("COLOR_PARAM") +
                                    '\n\t\tIconPath:\t' + oBundle.getText("ICON_PATH_PARAM") +
                                    '\n\t\tUnitOfMeasure:\t' + oBundle.getText("UNIT_OF_MEASURE_PARAM") +
                                    '\n**/';
                                globalUserScript += javadoc;
                                globalUserScript += '\n' + 'function ' + valueChangeFunction + '(queryData){\n//TODO\n}\n';
                            }
                        }
                    }
                    //checking if the on click function is registered
                    if (queryObj.EventsData.OnClickFunction !== undefined && queryObj.EventsData.OnClickFunction != null && queryObj.EventsData.OnClickFunction) {
                        if (queryObj.EventsData.OnClickFunctionName !== undefined && queryObj.EventsData.OnClickFunctionName != null &&
                            queryObj.EventsData.OnClickFunctionName != "") {
                            onClickFunctionName = queryObj.EventsData.OnClickFunctionName;
                            if (globalUserScript.search("function " + onClickFunctionName) == -1) {
                                var javadoc = '\n/**' +
                                    '\n' + oBundle.getText("TAG_ON_CLICK_CALLBACK") +
                                    '\nParameters:' +
                                    '\n\tcolumnName:\t' + oBundle.getText("QUERY_COLUMN_NAME_PARAM") +
                                    '\n\tcurrentValue:\t' + oBundle.getText("QUERY_COLUMN_VALUE_PARAM") +
                                    '\n**/';
                                globalUserScript += javadoc;
                                globalUserScript += '\n' + 'function ' + onClickFunctionName + '(columnName, currentValue){\n//TODO\n}\n';
                            }
                        }
                    }
                }
                //checking for display as Value or Graphics
                if (queryObj.DisplayData != null && queryObj.DisplayData !== undefined) {
                    if (queryObj.DisplayData.Value) {
                        display = "Value";
                    } else {
                        display = "";
                    }
                    if (isObjectNotNull(queryObj.DisplayData.Size) && queryObj.DisplayData.Size != "") {
                        size = queryObj.DisplayData.Size;
                    } else {
                        size = 15;
                    }
                }
                jsScript += "\t\t\t\t\t\t\tvar queryData" + i + " = {}\n";
                jsScript += "\t\t\t\t\t\t\tqueryData" + i + ".Path = \"" + queryObj.Path + "\";\n";
                jsScript += "\t\t\t\t\t\t\tqueryData" + i + ".Name = \"" + queryObj.Name + "\";\n";
                if (queryObj.RulesData) {
                	jsScript += "\t\t\t\t\t\t\tqueryData" + i + ".ValueColumn = \"" + queryObj.RulesData.ValueColumn + "\";\n";
                	jsScript += "\t\t\t\t\t\t\tqueryData" + i + ".ValueColumnDataType = \"" + queryObj.RulesData.ValueColumnDataType + "\";\n";
                }
                jsScript += "\t\t\t\t\t\t\tqueryData" + i + ".percentX = \"" + queryObj.xPos + "\";\n";
                jsScript += "\t\t\t\t\t\t\tqueryData" + i + ".percentY = \"" + queryObj.yPos + "\";\n";
                if (queryObj.NewCalculatedPos != undefined && queryObj.NewCalculatedPos)
                	jsScript += "\t\t\t\t\t\t\tqueryData" + i + ".changedPercentY = true;\n";
                jsScript += "\t\t\t\t\t\t\tqueryData" + i + ".cellId = \"" + divCellId + "\";\n";
                if (queryObj.TagDisplay == "Gauge") {
                    display = "Gauge";
                    jsScript += "\t\t\t\t\t\t\tqueryData" + i + ".heightPercentage = " + queryObj.HeightPercentage + ";\n";
                    jsScript += "\t\t\t\t\t\t\tqueryData" + i + ".widthPercentage = " + queryObj.WidthPercentage + ";\n";

                    jsScript += "\t\t\t\t\t\t\tqueryData" + i + ".ParentCellId = \"" + cellID + "\";\n";
                    jsScript += "\t\t\t\t\t\t\tqueryData" + i + ".designTimeCellWidth = " + queryObj.DesignTimeCellWidth + ";\n";
                    jsScript += "\t\t\t\t\t\t\tqueryData" + i + ".designTimeCellHeight = " + queryObj.DesignTimeCellHeight + ";\n";

                }
                jsScript += "\t\t\t\t\t\t\tqueryData" + i + ".DisplayType = \"" + display + "\";\n";
                jsScript += "\t\t\t\t\t\t\tqueryData" + i + ".Size = \"" + size + "px\";\n";
                if (queryObj.Area !== undefined && queryObj.Area != null && queryObj.Area != "") {
                	jsScript += "\t\t\t\t\t\t\tqueryData" + i + ".AreaName = \"" + queryObj.Area + "\";\n";
                }
                if (queryObj.DisplayData) {
                	jsScript += "\t\t\t\t\t\t\tqueryData" + i + ".ShowColumnName = " + queryObj.DisplayData.ShowColumnName + ";\n";
                	jsScript += "\t\t\t\t\t\t\tqueryData" + i + ".DisplayColumn = \"" + queryObj.DisplayData.DisplayColumn + "\";\n";
                	jsScript += "\t\t\t\t\t\t\tqueryData" + i + ".DisplayColumnDataType = \"" + queryObj.DisplayData.DisplayColumnDataType + "\";\n";
                	jsScript += "\t\t\t\t\t\t\tqueryData" + i + ".AltColumnName = \"" + queryObj.DisplayData.AltColumnName + "\";\n";
                	jsScript += "\t\t\t\t\t\t\tqueryData" + i + ".ShowUnit  = " + queryObj.DisplayData.ShowUnit + ";\n";
                    if (queryObj.DisplayData.UnitColumnName !== undefined && queryObj.DisplayData.UnitColumnName != null && queryObj.DisplayData.UnitColumnName != "") {
                    	jsScript += "\t\t\t\t\t\t\tqueryData" + i + ".UnitColumnName  = \"" + queryObj.DisplayData.UnitColumnName + "\";\n";
                    }
                    jsScript += "\t\t\t\t\t\t\tqueryData" + i + ".AltUnit = \"" + queryObj.DisplayData.AltUnit + "\";\n";
                    jsScript += "\t\t\t\t\t\t\tqueryData" + i + ".DecimalPlaces = \"" + queryObj.DisplayData.Decimals + "\";\n";
                }
                if (queryObj.EventsData) {
                	jsScript += "\t\t\t\t\t\t\tqueryData" + i + ".ValueChangeFunctionName = \"" + valueChangeFunction + "\";\n";
                	jsScript += "\t\t\t\t\t\t\tqueryData" + i + ".OnClickFunctionName = \"" + onClickFunctionName + "\";\n";
                    if (isObjectNotNull(queryObj.EventsData.ShowQueryData) && queryObj.EventsData.ShowQueryData)
                        LoadModules.queryTable = true;
                    jsScript += "\t\t\t\t\t\t\tqueryData" + i + ".ShowQueryData = \"" + queryObj.EventsData.ShowQueryData + "\";\n";
                    jsScript += "\t\t\t\t\t\t\tqueryData" + i + ".ShowKPITrend = \"" + queryObj.EventsData.ShowKPITrend + "\";\n";
                    jsScript += "\t\t\t\t\t\t\tqueryData" + i + ".AreaEvent = \"" + queryObj.EventsData.AreaEvent + "\";\n";

                }
                jsScript += "\t\t\t\t\t\t\tvar queryObject_" + i + " = new com.sap.xmii.ssce.QueryObject(queryData" + i + ");\n";
                //checking for any Custom Query Parameters if present (means if the Value is not empty)
                if (queryObj.Parameters !== undefined && queryObj.Parameters !== undefined && queryObj.Parameters.length > 0) {
                    for (var k = 0; k < queryObj.Parameters.length; k++) {
                        if (queryObj.Parameters[k].UserParameter != "" && queryObj.Parameters[k].UserParameter != undefined)
                        	jsScript += "\t\t\t\t\t\t\tqueryObject_" + i + ".addParameter(\"" + queryObj.Parameters[k].Name + "\", " + queryObj.Parameters[k].UserParameter + ");\n";
                        else if (queryObj.Parameters[k].isChanged)
                        	jsScript += "\t\t\t\t\t\t\tqueryObject_" + i + ".addParameter(\"" + queryObj.Parameters[k].Name + "\", \"" + queryObj.Parameters[k].Value + "\");\n";
                    }
                }
                if (queryObj.DisplayParameters !== undefined && queryObj.DisplayParameters !== undefined && queryObj.DisplayParameters.length > 0) {
                    for (var k = 0; k < queryObj.DisplayParameters.length; k++) {
                        if (queryObj.DisplayParameters[k].UserParameter != "" && queryObj.DisplayParameters[k].UserParameter != undefined)
                        	jsScript += "\t\t\t\t\t\t\tqueryObject_" + i + ".addDisplayParameter(\"" + queryObj.DisplayParameters[k].Name + "\", " + queryObj.DisplayParameters[k].UserParameter + ");\n";
                        else if (queryObj.DisplayParameters[k].isChanged)
                        	jsScript += "\t\t\t\t\t\t\tqueryObject_" + i + ".addDisplayParameter(\"" + queryObj.DisplayParameters[k].Name + "\", \"" + queryObj.DisplayParameters[k].Value + "\");\n";
                    }
                }

                if (queryObj.EventsData && queryObj.EventsData.ShowKPITrend) {
                	jsScript += "\t\t\t\t\t\t\tqueryObject_" + i + ".addParameter(\"Granularity\", \"" + queryObj.EventsData.Granularity + "\");\n";
                    if (queryObj.EventsData.TimePeriod != "Custom") {
                    	jsScript += "\t\t\t\t\t\t\tqueryObject_" + i + ".addParameter(\"TimePeriod\", \"" + queryObj.EventsData.TimePeriod + "\");\n";
                    	jsScript += "\t\t\t\t\t\t\tqueryObject_" + i + ".addParameter(\"Schedule\", \"" + queryObj.EventsData.Schedule + "\");\n";
                    } else {
                    	jsScript += "\t\t\t\t\t\t\tqueryObject_" + i + ".addParameter(\"Start_ISO8601\", \"" + queryObj.EventsData.StartDate +'T'+ queryObj.EventsData.StartTime +"\");\n";
                    	jsScript += "\t\t\t\t\t\t\tqueryObject_" + i + ".addParameter(\"End_ISO8601\", \"" + queryObj.EventsData.EndDate + 'T' +queryObj.EventsData.EndTime+ "\");\n";
                    	jsScript += "\t\t\t\t\t\t\tqueryObject_" + i + ".addParameter(\"DateFormat\",\"yyyy-MM-dd\'T\'HH:mm:ss\");\n";
                    }
                }

                jsScript += "\t\t\t\t\t\t\tqueryObject_" + i + ".draw();\n";
                //checking for the display configuration of the query objects
                if (queryObj.RulesData != null && queryObj.RulesData !== undefined) {
                    for (var j = 0; j < queryObj.RulesData.Rules.length; j++) {
                        var rule = queryObj.RulesData.Rules[j];
                        if (rule.Operator == "Between") {
                        	jsScript += "\t\t\t\t\t\t\tqueryObject_" + i + ".addCondition(\"" + rule.Operator + "\", \"" + rule.Value + ":" + rule.ToValue + "\", \"" + rule.Hexcode + "\",  \"" + rule.GraphicsType + "\", \"" + rule.IconPath + "\" , \"" + rule.RuntimeValue + "\",\"" + rule.ConditionColumnName + "\", \"" + rule.Size + "\", \"" + rule.ToValueConditionColumnName + "\");\n";
                        } else {
                        	jsScript += "\t\t\t\t\t\t\tqueryObject_" + i + ".addCondition(\"" + rule.Operator + "\", \"" + rule.Value + "\",\"" + rule.Hexcode + "\", \"" + rule.GraphicsType + "\", \"" + rule.IconPath + "\" , \"" + rule.RuntimeValue + "\",\"" + rule.ConditionColumnName + "\" , \"" + rule.Size + "\");\n";
                        }
                    }
                }
            }
            jsScript += '\t\t\t\t\t}catch(err){\n';
            jsScript += '\t\t\t\t\t\tconsole.log("An error has occured: " + err.name + "-" + err.message);\n';
            jsScript += '\t\t\t\t\t}\n';
            
            
            if (separateJsCode) {
                cellHtml.html = cellHtml.html + htmlScript;
                cellHtml.js = cellHtml.js + jsScript;
            } else {
            	htmlScript = htmlScript + startScript + jsScript + endScript + '\t\t\t\t\t\t</div>\n';
                cellHtml += htmlScript;
            }
        }

        //generating source code for dropped svg on Image
        if (SVGArray != null && typeof(SVGArray) != 'undefined' && SVGArray.length > 0) {
        	
        	if (cellHtml == "" || (cellHtml.html && cellHtml.html == "")) {
                divCellId = "svg:" + cellID;
                var cellStyle = "width:100%;height:100%;";

                if (style !== undefined) {
                    cellStyle = style;
                } else if (cellHeight !== undefined) {
                    //replacing the cell height if the call is not from Mobile
                    cellStyle = cellStyle.replace("height:100%", "height:" + cellHeight + "vh");
                }
                //title style
                cellStyle = titleStyle(objectData, cellStyle);
                cellHtml = "\t\t\t\t\t<div id=\"" + divCellId + "\" style=\"" + cellStyle + "\">\n\t\t\t\t\t</div>\n";
            }
        	var jsScript = createHtmlCodeForSVG(cellID, SVGArray, runtime, divCellId);
        	
        	 if (separateJsCode) {
                 cellHtml.html = cellHtml.html + htmlScript;
                 cellHtml.js = cellHtml.js + jsScript;
             } else {
             	htmlScript = htmlScript + startScript + jsScript + endScript;
                 cellHtml += htmlScript;
             }
        }

    } else if (templateData != null && (templateData.FileType == "Content" || templateData.FileType == "Tags") &&
        SVGArray || tagArray || queryArray && SVGArray.length > 0 || tagArray.length > 0 || queryArray.length > 0) {

        if (SVGArray.length > 0) {
            //generating source code for dropped svg on Image
        	var htmlScript = "";
        	if (cellHtml == "" || (cellHtml.html && cellHtml.html == "")) {
                divCellId = "svg:" + cellID;
                var cellStyle = "width:100%;height:100%;";

                if (style !== undefined) {
                    cellStyle = style;
                } else if (cellHeight !== undefined) {
                    //replacing the cell height if the call is not from Mobile
                    cellStyle = cellStyle.replace("height:100%", "height:" + cellHeight + "vh");
                }
                //title style
                cellStyle = titleStyle(objectData, cellStyle);
                htmlScript = "\t\t\t\t\t<div id=\"" + divCellId + "\" style=\"" + cellStyle + "\">\n\t\t\t\t\t</div>\n";
            }
        	var jsScript = createHtmlCodeForSVG(cellID, SVGArray, runtime, divCellId);
            if (separateJsCode) {
                cellHtml.html = cellHtml.html + htmlScript;
                cellHtml.js = cellHtml.js + jsScript;
            } else {
            	htmlScript = htmlScript + startScript + jsScript + endScript;
                cellHtml += htmlScript;
            }
        }
        if (tagArray.length > 0 || queryArray.length > 0) {
            //generating source code for tag converted to gauge chart on Image
        	var htmlScript = "";
        	var jsScript = "";
        	if (cellHtml == "" || (cellHtml.html && cellHtml.html == "")) {
                divCellId = "gauge:" + cellID;
                var cellStyle = "width:100%;height:100%;";

                if (style !== undefined) {
                    cellStyle = style;
                } else if (cellHeight !== undefined) {
                    //replacing the cell height if the call is not from Mobile
                    cellStyle = cellStyle.replace("height:100%", "height:" + cellHeight + "vh");
                }
                //title style
                cellStyle = titleStyle(objectData, cellStyle);
                htmlScript = "\t\t\t\t\t<div id=\"" + divCellId + "\" style=\"" + cellStyle + "\">\n\t\t\t\t\t</div>\n";
            }
            for (var i = 0; i < tagArray.length; i++) {
                if (tagArray[i].TagDisplay == "Gauge") {
                	jsScript += createHtmlScriptForGauge(cellID, tagArray[i], runtime, divCellId, i);
                }
            }
            for (var i = 0; i < queryArray.length; i++) {
                if (queryArray[i].TagDisplay == "Gauge") {
                    jsScript += createHtmlScriptForQueryConvertedToGauge(cellID, queryArray[i], runtime, divCellId, i);
                }
            }
            if (separateJsCode) {
                cellHtml.html = cellHtml.html + htmlScript;
                cellHtml.js = cellHtml.js + jsScript;
            } else {
            	htmlScript = htmlScript + startScript + jsScript + endScript;
                cellHtml += htmlScript;
            }
        }
    }
    return cellHtml;
}

function getChartConstantString(chartString) {
    if (chartString == com.sap.xmii.common.util.i5ChartTypes.CHART_TYPE_DONUT) {
        return "com.sap.xmii.common.util.ChartTypes.DONUT";
    } else if (chartString == com.sap.xmii.common.util.i5ChartTypes.CHART_TYPE_LINE) {
        return "com.sap.xmii.common.util.ChartTypes.LINE";
    } else if (chartString == com.sap.xmii.common.util.i5ChartTypes.CHART_TYPE_BAR) {
        return "com.sap.xmii.common.util.ChartTypes.BAR";
    } else if (chartString == com.sap.xmii.common.util.i5ChartTypes.CHART_TYPE_PIE) {
        return "com.sap.xmii.common.util.ChartTypes.PIE";
    } else if (chartString == com.sap.xmii.common.util.i5ChartTypes.CHART_TYPE_STACKED_BAR) {
        return "com.sap.xmii.common.util.ChartTypes.STACKED";
    } else if (chartString == com.sap.xmii.common.util.i5ChartTypes.CHART_TYPE_GROUP_BAR) {
        return "com.sap.xmii.common.util.ChartTypes.GROUP_BAR";
    } else if (chartString == com.sap.xmii.common.util.i5ChartTypes.CHART_TYPE_HORIZONTAL_BAR) {
        return "com.sap.xmii.common.util.ChartTypes.HORIZONTAL_BAR";
    } else if (chartString == com.sap.xmii.common.util.i5ChartTypes.CHART_TYPE_HORIZONTAL_GROUP_BAR) {
        return "com.sap.xmii.common.util.ChartTypes.HORIZONTAL_GROUP_BAR";
    } else if (chartString == com.sap.xmii.common.util.i5ChartTypes.CHART_TYPE_SCATTER) {
        return "com.sap.xmii.common.util.ChartTypes.SCATTER";
    } else if (chartString == com.sap.xmii.common.util.i5ChartTypes.CHART_TYPE_BUBBLE) {
        return "com.sap.xmii.common.util.ChartTypes.BUBBLE";
    } else if (chartString == com.sap.xmii.common.util.i5ChartTypes.CHART_TYPE_GAUGE) {
        return "com.sap.xmii.common.util.ChartTypes.GAUGE";
    } else {
        return "\"" + chartString + "\"";
    }
}

/*function checkForExpression(configuredPartsArray){
    var isExpressionPresent = false;
    for(var k= 0; k<configuredPartsArray.length; k++){
        if(configuredPartsArray[k].rules.length >0){
            isExpressionPresent = true;
            break;
        }
    }
    return isExpressionPresent;
}*/

function getChartConstant(chartString) {

    if (chartString == com.sap.xmii.common.util.i5ChartTypes.CHART_TYPE_DONUT) {
        return com.sap.xmii.common.util.ChartTypes.DONUT;
    } else if (chartString == com.sap.xmii.common.util.i5ChartTypes.CHART_TYPE_LINE) {
        return com.sap.xmii.common.util.ChartTypes.LINE;
    } else if (chartString == com.sap.xmii.common.util.i5ChartTypes.CHART_TYPE_BAR) {
        return com.sap.xmii.common.util.ChartTypes.BAR;
    } else if (chartString == com.sap.xmii.common.util.i5ChartTypes.CHART_TYPE_PIE) {
        return com.sap.xmii.common.util.ChartTypes.PIE;
    } else if (chartString == com.sap.xmii.common.util.i5ChartTypes.CHART_TYPE_STACKED_BAR) {
        return com.sap.xmii.common.util.ChartTypes.STACKED;
    } else if (chartString == com.sap.xmii.common.util.i5ChartTypes.CHART_TYPE_GROUP_BAR) {
        return com.sap.xmii.common.util.ChartTypes.GROUP_BAR;
    } else if (chartString == com.sap.xmii.common.util.i5ChartTypes.CHART_TYPE_HORIZONTAL_BAR) {
        return com.sap.xmii.common.util.ChartTypes.HORIZONTAL_BAR;
    } else if (chartString == com.sap.xmii.common.util.i5ChartTypes.CHART_TYPE_HORIZONTAL_GROUP_BAR) {
        return com.sap.xmii.common.util.ChartTypes.HORIZONTAL_GROUP_BAR;
    } else if (chartString == com.sap.xmii.common.util.i5ChartTypes.CHART_TYPE_SCATTER) {
        return com.sap.xmii.common.util.ChartTypes.SCATTER;
    } else if (chartString == com.sap.xmii.common.util.i5ChartTypes.CHART_TYPE_BUBBLE) {
        return com.sap.xmii.common.util.ChartTypes.BUBBLE;
    } else if (chartString == com.sap.xmii.common.util.i5ChartTypes.CHART_TYPE_GAUGE) {
        return com.sap.xmii.common.util.ChartTypes.GAUGE;
    } else {
        return "\"" + chartString + "\"";
    }

}


/**
 * This function creates the source code for any KPI visualization
 * 
 * @param templateData
 * @param cellID
 * @return
 */
function addKPIContentHTML(templateData, cellID, style, cellHeight, separateJsCode) {
    LoadModules.KPI = true;
    var htmlScript = "";
    var jsCode = "";
    var startScript = '\t\t\t\t\t<script>\n';
    var endScript = "\t\t\t\t\t</script>\n";
    var selectedDimensions = "";
    if (templateData != undefined && (templateData.Config != undefined && templateData.Config.type == "Table")) {
    	cellHtml = addContentScript(templateData, cellID, "KPI");
    } else {
        var oPanel, oModel, oModelData, chartType, refershRate, autoRefresh, enableTileColor;
        if (templateData.Config != undefined) {
            oPanel = sap.ui.getCore().byId(cellID.replace("c", "p").replace("c", "p"));
            oModel = new sap.ui.model.json.JSONModel($.extend(true, {}, templateData));
            oModelData = oModel.getData();
            chartType = oModelData.Config.chartType;
            refershRate = oModelData.Config.refreshRate;
            autoRefresh = oModelData.Config.autoRefresh;
            chartType = getChartConstantString(chartType);
            enableTileColor = oModelData.Config.enableTileColor;


            var first = true;
            $.each(templateData.Config.dimensions, function(i, e) {
                if (e.selected) {
                    if (!first) {
                        selectedDimensions = selectedDimensions + "," + e.dimension;
                    } else {
                        selectedDimensions = e.dimension;
                        first = false;
                    }
                }

            });

        } else {
            chartType = "com.sap.xmii.common.util.ChartTypes.LINE";
        }
        var cellStyle = "width:100%;height:100%;";

        if (style !== undefined) {
            cellStyle = style;
        } else if (cellHeight !== undefined) {
            //replacing the cell height if the call is not from Mobile
            cellStyle = cellStyle.replace("height:100%", "height:" + cellHeight + "vh");
        }
        //title style
        cellStyle = titleStyle(templateData, cellStyle);
        htmlScript = '\t\t\t\t\t<div id=\"kpi' + cellID + '"  style=\"' + cellStyle + '\">\n';
        if (templateData.FileType == "CatalogQuery" && templateData.Mode == "PICAnalysis") {
            jsCode += '\t\t\t\t\t\ttry{\n' +
                '\t\t\t\t\t\t\tvar kpi_' + cellID + ' = new com.sap.xmii.ssce.KPIView (' + chartType + ', "' + removeExtension(templateData.Name) + '",  "' + templateData.Path + '", "' + templateData.FileType + '", "' + templateData.Mode + '", "' +
                com.sap.xmii.common.util.MIIi5Util.stringReplaceAll(JSON.stringify(templateData.Config).replace(/\\/g, "\\\\"), "\"", "\\\"") + '" );\n';
        } else {
        	if(templateData.Mode != undefined){
        		jsCode += '\t\t\t\t\t\ttry{\n' +
                	'\t\t\t\t\t\t\tvar kpi_' + cellID + ' = new com.sap.xmii.ssce.KPIView (' + chartType + ', "' + removeExtension(templateData.Name) + '",  "' + templateData.Path + '", "' + templateData.FileType + '", "' + templateData.Mode + '" );\n';
        	 }
        	else{
        		jsCode += '\t\t\t\t\t\ttry{\n' +
            	'\t\t\t\t\t\t\tvar kpi_' + cellID + ' = new com.sap.xmii.ssce.KPIView (' + chartType + ', "' + removeExtension(templateData.Name) + '",  "' + templateData.Path + '", "' + templateData.FileType + '" );\n';
        	}
        }
        //Adding query parameters
        //add the Parameters if configured
        if (templateData.Parameters != null) {
            for (var i = 0; i < templateData.Parameters.length; i++) {

                if (templateData.Parameters[i].DataType == 2 && templateData.Parameters[i].UserParameter !== "" && templateData.Parameters[i].UserParameter !== undefined) {
                    jsCode += "\t\t\t\t\t\t\tkpi_" + cellID + ".setQueryParameters(\"" + templateData.Parameters[i].Name + "\"," + templateData.Parameters[i].UserParameter + ");\n";
                } else if (templateData.Parameters[i].UserParameter != "" && templateData.Parameters[i].UserParameter != undefined) {
                    jsCode += "\t\t\t\t\t\t\tkpi_" + cellID + ".setQueryParameters(\"" + templateData.Parameters[i].Name + "\"," + templateData.Parameters[i].UserParameter + ");\n";
                } else if (templateData.Parameters[i].DataType == 2 && (templateData.Parameters[i].isChanged)) {
                    jsCode += "\t\t\t\t\t\t\tkpi_" + cellID + ".setQueryParameters(\"" + templateData.Parameters[i].Name + "\"," + templateData.Parameters[i].Value + ");\n";
                } else if (templateData.Parameters[i].isChanged) {
                    if (isNaN(templateData.Parameters[i].Value) || templateData.Parameters[i].Value == "") {
                        jsCode += "\t\t\t\t\t\t\tkpi_" + cellID + ".setQueryParameters(\"" + templateData.Parameters[i].Name + "\",\"" + templateData.Parameters[i].Value + "\");\n";
                    } else {
                        jsCode += "\t\t\t\t\t\t\tkpi_" + cellID + ".setQueryParameters(\"" + templateData.Parameters[i].Name + "\"," + templateData.Parameters[i].Value + ");\n";
                    }
                }
                //The parameters in queryParameters configurations needs to be set to KPIConfig dialog
                /*
                 * selectedDimensions
                 * selectedCategories
                 * aggregationModes
                 * granularity
                 * additionalDimension based on granularity
                 */
                if (templateData.Parameters[i].Name == "Granularity" && templateData.Parameters[i].isChanged == true) {
                    if (checkToAddParameterForKPIView(templateData.Config, "duration.granularity", templateData.Parameters[i].Value)) {
                        jsCode += '\t\t\t\t\t\t\tkpi_' + cellID + '.setGranularity("' + templateData.Parameters[i].Value + '");\n';
                        if (templateData.Parameters[i].Value != null && templateData.Parameters[i].Value != "" && templateData.Parameters[i].Value != "None") {
                            var name = templateData.Parameters[i].Value.toLowerCase();
                            if (name.match(/minute/) != null)
                                name = "minute";
                            var paramName = name + "Display";
                            var setterName = 'set' + paramName.substring(0, 1).toUpperCase() + paramName.substring(1);
                            jsCode += '\t\t\t\t\t\t\tkpi_' + cellID + '.' + setterName + '("' + true + '");\n';
                        }
                    }
                } else if (templateData.Parameters[i].Name == "SelectedTagCategories" && templateData.Parameters[i].isChanged == true) {
                    if (checkToAddParameterForKPIView(templateData.Config, "selectedCategories", templateData.Parameters[i].Value)) {
                        jsCode += '\t\t\t\t\t\t\tkpi_' + cellID + '.setSelectedCategories("' + templateData.Parameters[i].Value + '");\n';
                    }
                    if (checkToAddParameterForKPIView(templateData.Config, "candidateCategories", templateData.Parameters[i].Value)) {
                        jsCode += '\t\t\t\t\t\t\tkpi_' + cellID + '.setCandidateCategories("' + templateData.Parameters[i].Value + '");\n';
                    }
                } else if (templateData.Parameters[i].Name == "SelectedTagCategoryAliases" && templateData.Parameters[i].isChanged == true) {
                    if (checkToAddParameterForKPIView(templateData.Config, "selectedCategoriesAliases", templateData.Parameters[i].Value)) {
                        jsCode += '\t\t\t\t\t\t\tkpi_' + cellID + '.setSelectedCategoriesAliases("' + templateData.Parameters[i].Value + '");\n';
                    }
                    if (checkToAddParameterForKPIView(templateData.Config, "candidateCategoriesAliases", templateData.Parameters[i].Value)) {
                        jsCode += '\t\t\t\t\t\t\tkpi_' + cellID + '.setCandidateCategoriesAliases("' + templateData.Parameters[i].Value + '");\n';
                    }
                } else if (templateData.Parameters[i].Name == "AnalysisAggregationModes" && templateData.Parameters[i].isChanged == true) {
                    if (checkToAddParameterForKPIView(templateData.Config, "aggregationModes", templateData.Parameters[i].Value)) {
                        jsCode += '\t\t\t\t\t\t\tkpi_' + cellID + '.setAggregationModes("' + templateData.Parameters[i].Value + '");\n';
                    }
                } else if (templateData.Parameters[i].Name == 'Schedule' && templateData.Parameters[i].isChanged == true) {
                    if (checkToAddParameterForKPIView(templateData.Config, "duration.selectedSchedule", templateData.Parameters[i].Value)) {
                        jsCode += '\t\t\t\t\t\t\tkpi_' + cellID + '.setSelectedSchedule("' + templateData.Parameters[i].Value + '");\n';
                    }
                }
            }
        }

        //add the Parameters if configured
        if (templateData.DisplayParameters != null) {
            for (var i = 0; i < templateData.DisplayParameters.length; i++) {
                // The chart type can only be changed from KPI visualization , not from display parameters
                if (templateData.DisplayParameters[i].Name != "ChartType") {
                    if (templateData.DisplayParameters[i].DataType == 2 && templateData.DisplayParameters[i].UserParameter !== "" && templateData.DisplayParameters[i].UserParameter !== undefined) {
                        if (templateData.DisplayParameters[i].Name == "ValueColumns") {
                            jsCode += "\t\t\t\t\t\t\tkpi_" + cellID + ".setDisplayProperties(\"" + templateData.DisplayParameters[i].Name + "\"," + templateData.DisplayParameters[i].UserParameter + ");\n";
                        } else {
                            jsCode += "\t\t\t\t\t\t\tkpi_" + cellID + ".setDisplayProperties(\"" + templateData.DisplayParameters[i].Name + "\"," + templateData.DisplayParameters[i].UserParameter + ");\n";
                        }
                    } else if (templateData.DisplayParameters[i].UserParameter != "" && templateData.DisplayParameters[i].UserParameter != undefined) {
                        if (isNaN(templateData.DisplayParameters[i].Value)) {
                            jsCode += "\t\t\t\t\t\t\tkpi_" + cellID + ".setDisplayProperties(\"" + templateData.DisplayParameters[i].Name + "\"," + templateData.DisplayParameters[i].UserParameter + ");\n";
                        } else {
                            jsCode += "\t\t\t\t\t\t\tkpi_" + cellID + ".setDisplayProperties(\"" + templateData.DisplayParameters[i].Name + "\"," + templateData.DisplayParameters[i].UserParameter + ");\n";
                        }
                    } else if (templateData.DisplayParameters[i].DataType == 2 && (templateData.DisplayParameters[i].isChanged)) {
                        if (templateData.DisplayParameters[i].Name == "ValueColumns") {
                            jsCode += "\t\t\t\t\t\t\tkpi_" + cellID + ".setDisplayProperties(\"" + templateData.DisplayParameters[i].Name + "\",\"" + templateData.DisplayParameters[i].Value + "\");\n";
                        } else {
                            jsCode += "\t\t\t\t\t\t\tkpi_" + cellID + ".setDisplayProperties(\"" + templateData.DisplayParameters[i].Name + "\"," + templateData.DisplayParameters[i].Value + ");\n";
                        }
                    } else if (templateData.DisplayParameters[i].isChanged) {
                        if (isNaN(templateData.DisplayParameters[i].Value) || templateData.DisplayParameters[i].Value == "") {
                            jsCode += "\t\t\t\t\t\t\tkpi_" + cellID + ".setDisplayProperties(\"" + templateData.DisplayParameters[i].Name + "\",\"" + templateData.DisplayParameters[i].Value + "\");\n";
                        } else {
                            jsCode += "\t\t\t\t\t\t\tkpi_" + cellID + ".setDisplayProperties(\"" + templateData.DisplayParameters[i].Name + "\"," + templateData.DisplayParameters[i].Value + ");\n";
                        }
                    }
                }
            }
        }
        jsCode += '\t\t\t\t\t\t\tkpi_' + cellID + '.setSelectedDimensions("' + selectedDimensions + '");\n';
        if (refershRate != undefined && refershRate != "undefined") {
            jsCode += '\t\t\t\t\t\t\tkpi_' + cellID + '.setRefreshRate("' + refershRate + '");\n';
        }
        if (autoRefresh != undefined && autoRefresh != "undefined") {
            jsCode += '\t\t\t\t\t\t\tkpi_' + cellID + '.setAutoRefresh(' + autoRefresh + ');\n';
        }
        //Add onclick function if defined for tile and gauge.
        if (isObjectNotNull(templateData.Config)) {
            var callBackData = templateData.Config.CallbackData;
            if (isObjectNotNull(callBackData) && isObjectNotNull(callBackData.SelectCallback) && callBackData.SelectCallback && isObjectNotNull(callBackData.SelectFunctionName) && callBackData.SelectFunctionName != "") {
                if (templateData.Config.chartType == 'Gauge' || templateData.Config.chartType == 'Tile') {
                    var selectFunctionName = callBackData.SelectFunctionName;
                    if (globalUserScript.search("function " + selectFunctionName) == -1) {
                        var objectName = "TILE_SELECT_CALLBACK_OBJECT";
                        var functionName = "TILE_SELECT_CALLBACK";
                        if (templateData.Config.chartType == 'Gauge') {
                            objectName = "GAUGE_SELECT_CALLBACK_OBJECT";
                            functionName = "GAUGE_SELECT_CALLBACK";
                        }
                        var javadoc = '\n/**' +
                            '\n' + oBundle.getText(functionName) +
                            '\nParameters:' +
                            '\n\tkpiData :\t' + oBundle.getText(objectName) +
                            '\n\t\tkpiData.kpiName :\t' + oBundle.getText("KPI_NAME") +
                            '\n\t\tkpiData.dimensions :\t' + oBundle.getText("KPI_SELECTED_DIMENSIONS") +
                            '\n\t\tkpiData.currentValue :\t' + oBundle.getText("KPI_CURRENT_VALUE") +
                            '\n**/';
                        globalUserScript += javadoc;
                        globalUserScript += '\n' + 'function ' + selectFunctionName + '(kpiData){\n//TODO\n}\n';
                    }
                }
            }
        }

        if (isObjectNotNull(templateData.Config) && templateData.Config.chartType == "Tile") {
            jsCode += '\t\t\t\t\t\t\tkpi_' + cellID + '.setTileColor(' + enableTileColor + ');\n';
        }

        if (isObjectNotNull(templateData.Config) && (templateData.Config.chartType == 'Gauge' || templateData.Config.chartType == 'Tile') 
        		&& templateData.Config.CallbackData != undefined) {
            jsCode += '\t\t\t\t\t\t\tkpi_' + cellID + '.setCallBackData(' + JSON.stringify(templateData.Config.CallbackData) + ');\n';
        }

        if (templateData.Config != undefined) {
            for (var i = 0; i < templateData.Config.changedProperties.length; i++) {
                var currentPropName = templateData.Config.changedProperties[i];
                var currPropValue;
                if (currentPropName == "selectedDuration") {
                    currPropValue = templateData.Config.duration.selectedDuration;
                } else if (currentPropName == "startDate") {
                    currPropValue = templateData.Config.duration.startDate;
                } else if (currentPropName == "startTime") {
                    currPropValue = templateData.Config.duration.startTime;
                } else if (currentPropName == "start_ISO8601") {
                    currPropValue = templateData.Config.duration.start_ISO8601;
                } else if (currentPropName == "endDate") {
                    currPropValue = templateData.Config.duration.endDate;
                } else if (currentPropName == "endTime") {
                    currPropValue = templateData.Config.duration.endTime;
                } else if (currentPropName == "end_ISO8601") {
                    currPropValue = templateData.Config.duration.end_ISO8601;
                } else if (currentPropName == "granularity") {
                    currPropValue = templateData.Config.duration.granularity;
                } else if (currentPropName == "minuteDisplay") {
                    currPropValue = templateData.Config.duration.minuteDisplay;
                } else if (currentPropName == "hourDisplay") {
                    currPropValue = templateData.Config.duration.hourDisplay;
                } else if (currentPropName == "shiftDisplay") {
                    currPropValue = templateData.Config.duration.shiftDisplay;
                } else if (currentPropName == "dayDisplay") {
                    currPropValue = templateData.Config.duration.dayDisplay;
                } else if (currentPropName == "weekDisplay") {
                    currPropValue = templateData.Config.duration.weekDisplay;
                } else if (currentPropName == "monthDisplay") {
                    currPropValue = templateData.Config.duration.monthDisplay;
                } else if (currentPropName == "quarterDisplay") {
                    currPropValue = templateData.Config.duration.quarterDisplay;
                } else if (currentPropName == "yearDisplay") {
                    currPropValue = templateData.Config.duration.yearDisplay;
                } else if (currentPropName == "chartType") {
                    continue;
                } else if (currentPropName == "selectedSchedule") {
                    currPropValue = templateData.Config.duration.selectedSchedule;
                } else {
                    currPropValue = templateData.Config[currentPropName];
                }
                var setterName = 'set' + currentPropName.substring(0, 1).toUpperCase() + currentPropName.substring(1);
                jsCode += '\t\t\t\t\t\t\tkpi_' + cellID + '.' + setterName + '("' + currPropValue + '");\n';
            }

            // Set the filter value for KPI
            for (var i = 0; i < templateData.Config.dimensions.length; i++) {
                if (templateData.Config.dimensions[i].selected == false || (templateData.Config.dimensions[i].filterSelected == "" && templateData.Config.dimensions[i].inputParam == "")) {
                    continue;
                }

                var sDimName = templateData.Config.dimensions[i].dimension;
                if (templateData.Config.dimensions[i].groupByName != undefined)
                    sDimName = templateData.Config.dimensions[i].groupByName;
                if (isObjectNotNull(templateData.Config.dimensions[i].inputParam)) {
                    var sFilterValue = templateData.Config.dimensions[i].inputParam;
                    jsCode += '\t\t\t\t\t\t\tkpi_' + cellID + '.setKpiDimensionParamFilter ("' + sDimName + '","' + sFilterValue + '" );\n';
                } else {
                    var sFilterValue = templateData.Config.dimensions[i].filterSelected;
                    jsCode += '\t\t\t\t\t\t\tkpi_' + cellID + '.setKpiDimensionFilter ("' + sDimName + '","' + sFilterValue + '" );\n';
                }
            }
        }
        jsCode += '\t\t\t\t\t\t\tkpi_' + cellID + '.draw("kpi' + cellID + '");\n';
        jsCode += '\t\t\t\t\t\t}catch(err){\n';
        jsCode += '\t\t\t\t\t\t\tsap.ui.core.BusyIndicator.hide();\n';
        jsCode += '\t\t\t\t\t\t\tconsole.log("An error has occured: " + err.name + "-" + err.message);\n';
        jsCode += '\t\t\t\t\t\t\tif(err instanceof com.sap.xmii.common.exception.MIIi5Exception){\n';
        jsCode += '\t\t\t\t\t\t\t\tvar oTextView = new sap.ui.commons.TextView();\n' +
            '\t\t\t\t\t\t\t\toTextView.setText(err.message);\n' +
            '\t\t\t\t\t\t\t\toTextView.placeAt("' + 'kpi' + cellID + '","only");\n' +
            '\t\t\t\t\t\t\t\tkpi_' + cellID +'.destroy();\n';
        jsCode += '\t\t\t\t\t\t\t}\n';
        jsCode += '\t\t\t\t\t\t}\n';
        
        if (separateJsCode) {
        	var cellHtml = {};
        	cellHtml.html = htmlScript + '\t\t\t\t\t\t</div>\n';
        	cellHtml.js = jsCode;
        } else {
        	var cellHtml = htmlScript + startScript + jsCode + endScript + '\t\t\t\t\t\t</div>\n';
        }
    }


    return cellHtml;
}

function checkToAddParameterForKPIView(kpiConfig, paramName, paramValue) {
    if (kpiConfig != null) {
        if (kpiConfig.changedProperties.length > 0) {
            var found = false;
            $.each(kpiConfig.changedProperties, function(index, element) {
                if (found != true)
                    found == element.Name == paramName;
            });
            if (found)
                return false;
            else {
                return true;
            }
        }
    }

}

/**
 * this function is responsible for adding the script for creating the UI5 Chart
 * @param templateData
 * @param cellID
 * @return
 */
function addi5ChartContentScript(templateData, cellID) {
    if (templateData != null) {
        var hDisplayTemplate = templateData.Path + "/" + removeExtension(templateData.Name);
        var hQueryTemplate = templateData.MappedQueryTemplate;
        var script = "var chart_" + cellID + " = " + "new com.sap.xmii.chart.hchart.i5Chart(\"" + hDisplayTemplate + "\",\"" + hQueryTemplate + "\");\n";


        //add the Title if customised 
        if (templateData.Title != null) {
            script += "\t\t\t\t\t\t\tchart_" + cellID + ".getChartTemplateObject().setProperty(\"Title\",\"" + templateData.Title + "\");\n";
        }

        //add the Parameters if configured
        if (templateData.QueryParameters != null) {
            for (var i = 0; i < templateData.QueryParameters.length; i++) {
                if (templateData.QueryParameters[i].UserParameter != "" && templateData.QueryParameters[i].UserParameter !== undefined) {
                    script += "\t\t\t\t\t\tchart_" + cellID + ".getQueryObject().setParameter(\"" + templateData.QueryParameters[i].Name + "\"," + templateData.QueryParameters[i].UserParameter + ");\n";
                    var isCatalogQuery = checkForQueryType("CatalogQuery", templateData);
                    /* if (templateData.QueryParameters[i].Name == "SelectedTags" && !isCatalogQuery) {
                         //have to add the Value Columns as this is there in SelectedTags in Query Parameters
                         var currentIndex = findIndexOfParameterAndInitialize(templateData.Parameters, "ValueColumns", 12, 1, 17, templateData.QueryParameters[i].UserParameter);
                         templateData.Parameters[currentIndex].Value = templateData.QueryParameters[i].UserParameter;
                     }*/
                } else if (templateData.QueryParameters[i].isChanged) {
                    script += "\t\t\t\t\t\tchart_" + cellID + ".getQueryObject().setParameter(\"" + templateData.QueryParameters[i].Name + "\",\"" + templateData.QueryParameters[i].Value + "\");\n";
                    var isCatalogQuery = checkForQueryType("CatalogQuery", templateData);
                    /* if (templateData.QueryParameters[i].Name == "SelectedTags" && !isCatalogQuery) {
                         //have to add the Value Columns as this is there in SelectedTags in Query Parameters
                         var currentIndex = findIndexOfParameterAndInitialize(templateData.Parameters, "ValueColumns", 12, 1, 17, templateData.QueryParameters[i].Value);
                         templateData.Parameters[currentIndex].Value = templateData.QueryParameters[i].Value;
                     }*/
                }
            }
        }
        //add the Parameters if configured
        if (templateData.Parameters != null) {
            for (var i = 0; i < templateData.Parameters.length; i++) {

                if (templateData.Parameters[i].DataType == 2 && templateData.Parameters[i].UserParameter !== undefined && templateData.Parameters[i].UserParameter !== "") {
                    if (templateData.Parameters[i].Name == "ValueColumns") {
                        script += "\t\t\t\t\t\t\tchart_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.Parameters[i].Name + "\"," + templateData.Parameters[i].UserParameter + ");\n";
                    } else {
                        script += "\t\t\t\t\t\t\tchart_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.Parameters[i].Name + "\"," + templateData.Parameters[i].UserParameter + ");\n";
                    }
                } else if (templateData.Parameters[i].UserParameter != "" && templateData.Parameters[i].UserParameter != undefined) {
                    /*if(isNaN(templateData.Parameters[i].Value)) {
                        script += "\t\t\t\t\t\t\tchart_" + cellID + ".getChartTemplateObject().setProperty(\""+templateData.Parameters[i].Name+"\",\""+templateData.Parameters[i].Value+"\");\n";
                    } else {*/
                    script += "\t\t\t\t\t\t\tchart_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.Parameters[i].Name + "\"," + templateData.Parameters[i].UserParameter + ");\n";
                    //}
                } else if (templateData.Parameters[i].DataType == 2 && (templateData.Parameters[i].isChanged)) {
                    if (templateData.Parameters[i].Name == "ValueColumns") {
                        script += "\t\t\t\t\t\t\tchart_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.Parameters[i].Name + "\",\"" + templateData.Parameters[i].Value + "\");\n";
                    } else {
                        script += "\t\t\t\t\t\t\tchart_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.Parameters[i].Name + "\"," + templateData.Parameters[i].Value + ");\n";
                    }
                } else if (templateData.Parameters[i].isChanged) {
                    if (isNaN(templateData.Parameters[i].Value) || templateData.Parameters[i].Value == "") {
                        script += "\t\t\t\t\t\t\tchart_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.Parameters[i].Name + "\",\"" + templateData.Parameters[i].Value + "\");\n";
                    } else {
                        script += "\t\t\t\t\t\t\tchart_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.Parameters[i].Name + "\"," + templateData.Parameters[i].Value + ");\n";
                    }
                }
            }
        }


        //script = script +  "\t\t\t\t\t\tchart_" + cellID + ".useParentDimensions(true);\n";
        var height = jQuery("#" + cellID).height();
        //if(height != null && height != undefined)
        //script += "\t\t\t\t\t\tchart_" + cellID + ".setChartHeight(\""+height+"\");\n";
        script += "\t\t\t\t\t\t\tchart_" + cellID + ".registerCreationEventHandler(ceController.addObject(\"" + cellID + "\",chart_" + cellID + "));\n";
        script = script + "\t\t\t\t\t\t\tchart_" + cellID + ".draw(\"chart" + cellID + "\");\n";
        return script;
    }
}



/**
 * This function is responsible for finding the index of a parameter, if the parameter is not found then the 
 * parameters object length is increased to accomodate this parameter
 * @param parameters
 * @param paramName
 * @return
 */
function findIndexOfParameterAndInitialize(parameters, paramName, context, dataType, groupId, defaultValue, isChanged) {
    var paramIndex = 0;
    var paramFound = false;
    for (var i = 0; i < parameters.length; i++) {
        if (parameters[i].Name == paramName) {
            paramFound = true;
            parameters[i].isChanged = true;
            paramIndex = i;
            break;
        }
    }
    if (paramFound) {
        return paramIndex;
    } else {
        paramIndex = parameters.length;
        parameters[paramIndex] = {};
        parameters[paramIndex].Name = paramName;
        parameters[paramIndex].Context = context;
        parameters[paramIndex].DataType = dataType;
        parameters[paramIndex].GroupId = groupId;
        parameters[paramIndex].DefaultValue = defaultValue;
        parameters[paramIndex].isSelected = "Checked";
        parameters[paramIndex].isChanged = true;
        if (isChanged != undefined && isChanged == false)
            parameters[paramIndex].isChanged = false;
        else
            parameters[paramIndex].isChanged = true;
        return paramIndex;
    }
}


/**
 * This function is responsible for finding the index of a parameter
 * @param parameters
 * @param paramName
 * @return
 */
function findIndexOfParameter(parameters, paramName) {
    var paramIndex = -1;
    var paramFound = false;
    for (var i = 0; i < parameters.length; i++) {
        if (parameters[i].Name == paramName) {
            paramIndex = i;
            break;
        }
    }
    return paramIndex;
}


/**
/**
 * this function is responsible for adding the script for creating the i5Grid
 * @param templateData
 * @param cellID
 * @return
 */
function addi5GridContentScript(templateData, cellID) {
    if (templateData != null) {
        var hDisplayTemplate = templateData.Path + "/" + removeExtension(templateData.Name);
        var hQueryTemplate = templateData.MappedQueryTemplate;
        var script = "var grid_" + cellID + " = " + "new com.sap.xmii.grid.init.i5Grid(\"" + hDisplayTemplate + "\",\"" + hQueryTemplate + "\"," + "true);\n";


        //add the Title if customised 
        /*  if(templateData.Title != null){
                script += "\t\t\t\t\t\tgrid_" + cellID + ".getChartTemplateObject().setProperty(\"Title\",\""+templateData.Title+"\");\n";
            }
        */
        //add the Parameters if configured
        if (templateData.Parameters != null) {
            for (var i = 0; i < templateData.Parameters.length; i++) {
                if (templateData.Parameters[i].DataType == 2 && templateData.Parameters[i].UserParameter !== "" && templateData.Parameters[i].UserParameter !== undefined) {
                    script += "\t\t\t\t\t\t\tgrid_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.Parameters[i].Name + "\"," + templateData.Parameters[i].UserParameter + ");\n";
                } else if (templateData.Parameters[i].UserParameter != "" && templateData.Parameters[i].UserParameter !== undefined) {
                    if (templateData.Parameters[i].DataType == 1 || templateData.Parameters[i].DataType == 3) {
                        script += "\t\t\t\t\t\t\tgrid_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.Parameters[i].Name + "\"," + templateData.Parameters[i].UserParameter + ");\n";
                    } else {
                        script += "\t\t\t\t\t\t\tgrid_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.Parameters[i].Name + "\"," + templateData.Parameters[i].UserParameter + ");\n";
                    }
                } else if (templateData.Parameters[i].DataType == 2 && (templateData.Parameters[i].isChanged)) {
                    script += "\t\t\t\t\t\t\tgrid_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.Parameters[i].Name + "\"," + templateData.Parameters[i].Value + ");\n";
                } else if (templateData.Parameters[i].isChanged) {
                    //if(isNaN(templateData.Parameters[i].Value)) {
                    if (templateData.Parameters[i].DataType == 1 || templateData.Parameters[i].DataType == 3) {
                        script += "\t\t\t\t\t\t\tgrid_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.Parameters[i].Name + "\",\"" + templateData.Parameters[i].Value + "\");\n";
                    } else {
                        script += "\t\t\t\t\t\t\tgrid_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.Parameters[i].Name + "\"," + templateData.Parameters[i].Value + ");\n";
                    }
                }
            }
        }
        //add the Parameters if configured
        if (templateData.QueryParameters != null) {
            for (var i = 0; i < templateData.QueryParameters.length; i++) {
                if (templateData.QueryParameters[i].UserParameter != "" && templateData.QueryParameters[i].UserParameter !== undefined) {
                    script += "\t\t\t\t\t\t\tgrid_" + cellID + ".getQueryObject().setParameter(\"" + templateData.QueryParameters[i].Name + "\"," + templateData.QueryParameters[i].UserParameter + ");\n";
                } else if (templateData.QueryParameters[i].isChanged) {
                    script += "\t\t\t\t\t\t\tgrid_" + cellID + ".getQueryObject().setParameter(\"" + templateData.QueryParameters[i].Name + "\",\"" + templateData.QueryParameters[i].Value + "\");\n";
                }
            }
        }
        script += "\t\t\t\t\t\tgrid_" + cellID + ".registerCreationEventHandler(ceController.addObject(\"" + cellID + "\",grid_" + cellID + "));\n";
        script = script + "\t\t\t\t\t\t\tgrid_" + cellID + ".draw(\"grid" + cellID + "\");\n";
        return script;
    }
}

/**
 * this function is responsible for adding the script for creating the i5SPCChart
 * @param templateData
 * @param cellID
 * @return
 */
function addi5SPCChartContentScript(templateData, cellID) {
    if (templateData != null) {
        var hDisplayTemplate = templateData.Path + "/" + removeExtension(templateData.Name);
        var hQueryTemplate = templateData.MappedQueryTemplate;
        var script = "var chart_" + cellID + " = " + "new com.sap.xmii.chart.hchart.i5SPCChart(\"" + hDisplayTemplate + "\",\"" + hQueryTemplate + "\");\n";


        //add the Title if customised 
        if (templateData.Title != null) {
            script += "\t\t\t\t\t\t\tchart_" + cellID + ".getChartTemplateObject().setProperty(\"Title\",\"" + templateData.Title + "\");\n";
        }

        //add the Parameters if configured
        if (templateData.Parameters != null) {
            for (var i = 0; i < templateData.Parameters.length; i++) {
                if (templateData.Parameters[i].DataType == 2 && templateData.Parameters[i].UserParameter !== "" && templateData.Parameters[i].UserParameter !== undefined) {
                    script += "\t\t\t\t\t\t\tchart_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.Parameters[i].Name + "\"," + templateData.Parameters[i].UserParameter + ");\n";
                } else if (templateData.Parameters[i].UserParameter != "" && templateData.Parameters[i].UserParameter != undefined) {
                    if (templateData.Parameters[i].DataType == 1 || templateData.Parameters[i].DataType == 3) {
                        script += "\t\t\t\t\t\t\tchart_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.Parameters[i].Name + "\"," + templateData.Parameters[i].UserParameter + ");\n";
                    } else {
                        script += "\t\t\t\t\t\t\tchart_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.Parameters[i].Name + "\"," + templateData.Parameters[i].UserParameter + ");\n";
                    }
                } else if (templateData.Parameters[i].DataType == 2 && (templateData.Parameters[i].isChanged)) {
                    script += "\t\t\t\t\t\t\tchart_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.Parameters[i].Name + "\"," + templateData.Parameters[i].Value + ");\n";
                } else if (templateData.Parameters[i].isChanged) {

                    if (templateData.Parameters[i].DataType == 1 || templateData.Parameters[i].DataType == 3) {
                        script += "\t\t\t\t\t\t\tchart_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.Parameters[i].Name + "\",\"" + templateData.Parameters[i].Value + "\");\n";
                    } else {
                        script += "\t\t\t\t\t\t\tchart_" + cellID + ".getChartTemplateObject().setProperty(\"" + templateData.Parameters[i].Name + "\"," + templateData.Parameters[i].Value + ");\n";
                    }
                }
                /*if(templateData.Parameters[i].Value != "")
                    script += "\t\t\t\t\t\t\tchart_" + cellID + ".getChartTemplateObject().setProperty(\""+templateData.Parameters[i].Name+"\",\""+templateData.Parameters[i].Value+"\");\n";*/
            }
        }
        //add the Parameters if configured
        if (templateData.QueryParameters != null) {
            for (var i = 0; i < templateData.QueryParameters.length; i++) {
                if (templateData.QueryParameters[i].UserParameter != "" && templateData.QueryParameters[i].UserParameter != undefined) {
                    script += "\t\t\t\t\t\tchart_" + cellID + ".getQueryObject().setParameter(\"" + templateData.QueryParameters[i].Name + "\"," + templateData.QueryParameters[i].UserParameter + ");\n";
                } else if (templateData.QueryParameters[i].isChanged) {
                    script += "\t\t\t\t\t\tchart_" + cellID + ".getQueryObject().setParameter(\"" + templateData.QueryParameters[i].Name + "\",\"" + templateData.QueryParameters[i].Value + "\");\n";
                }
            }
        }
        //script = script +  "\t\t\t\t\t\tchart_" + cellID + ".useParentDimensions(true);\n";
        var height = jQuery("#" + cellID).height();
        //if(height != null && height != undefined)
        //script += "\t\t\t\t\t\tchart_" + cellID + ".setChartHeight(\""+height+"\");\n";
        script += "\t\t\t\t\t\t\tchart_" + cellID + ".registerCreationEventHandler(ceController.addObject(\"" + cellID + "\",chart_" + cellID + "));\n";
        script = script + "\t\t\t\t\t\t\tchart_" + cellID + ".draw(\"chart" + cellID + "\");\n";
        return script;
    }
}

function addUIElementContentScript(templateData, cellID, runtime) {
    var html = 'jQuery.sap.registerModulePath("CECustomControls", "/XMII/CompositionEnvironment/js/customControls");\n' +
        '\t\t\t\t\t\t\tjQuery.sap.require("CECustomControls.UIElementTextField");\n' +
        '\t\t\t\t\t\t\tjQuery.sap.require("CECustomControls.UIElementTextView");\n' +
        '\t\t\t\t\t\t\tjQuery.sap.require("CECustomControls.UIElementDropDown");\n' +
        '\t\t\t\t\t\t\tjQuery.sap.require("CECustomControls.UIElementButton");\n' +
        '\t\t\t\t\t\t\tjQuery.sap.require("CECustomControls.UIElementTextFieldM");\n' +
        '\t\t\t\t\t\t\tjQuery.sap.require("CECustomControls.UIElementTextViewM");\n' +
        '\t\t\t\t\t\t\tjQuery.sap.require("CECustomControls.UIElementLabelM");\n' +
        '\t\t\t\t\t\t\tjQuery.sap.require("CECustomControls.UIElementDropDownM");\n' +
        '\t\t\t\t\t\t\tjQuery.sap.require("CECustomControls.UIElementButtonM");\n' +
        '\t\t\t\t\t\t\tjQuery.sap.require("CECustomControls.UIElementTextAreaM");\n' +
        '\t\t\t\t\t\t\tjQuery.sap.require("CECustomControls.UIElementRadioButtonM");\n' +
        '\t\t\t\t\t\t\tjQuery.sap.require("CECustomControls.UIElementCheckBoxM");\n' +
        '\t\t\t\t\t\t\tjQuery.sap.require("CECustomControls.SSCEValueHelpDialog");\n' +
        '\t\t\t\t\t\t\tjQuery.sap.require("CECustomControls.IconComboBox");\n' +
        //add listbox
        '\t\t\t\t\t\t\tjQuery.sap.require("CECustomControls.UIElementList");\n';
    //Flag to know whether the dashbaord is in design time
    ssceLayout.isDesign = !runtime;
    //With New enhancement the number of columns and rows will remain constant
    if (isObjectNotNull(templateData.TotalNoOfColumns) && isObjectNotNull(templateData.TotalNoOfRows)) {
        html += '\n\t\t\t\t\t\t\tvar form_' + cellID + ' = new com.sap.xmii.ssce.Form(({Columns:' + templateData.TotalNoOfColumns + ',Rows:' + templateData.TotalNoOfRows + '}));\n';
    } else {
        html += '\n\t\t\t\t\t\t\tvar form_' + cellID + ' = new com.sap.xmii.ssce.Form(' + templateData.CellHeight + ', ' + templateData.CellWidth + ' ,' + templateData.BackgroundCellHeight + ' ,' + templateData.BackgroundCellWidth + ');\n';
    }
    for (var i = 0; i < templateData.Controls.length; i++) {
        var controlMetaData = templateData.Controls[i];
        var controlType = controlMetaData.ControlType;

        //Following code checks for the previous dashboard having no col,row,top and left span
        //and converts the width , height , top and left into respective span
        if (controlMetaData.ColSpan == undefined && controlMetaData.RowSpan == undefined && controlMetaData.TopPosition == undefined && controlMetaData.LeftPosition == undefined) {
            //if BackgroundCellHeight is not present meaning we have to take 20 by 50
            if (templateData.BackgroundCellHeight != undefined && templateData.BackgroundCellWidth != undefined) {
                var rowSpan = parseInt(controlMetaData.Height.substring(0, controlMetaData.Height.lastIndexOf("px")) / templateData.BackgroundCellHeight);
                if (rowSpan < 1) rowSpan = 1;
                var colSpan = parseInt(controlMetaData.Width.substring(0, controlMetaData.Width.lastIndexOf("px")) / templateData.BackgroundCellWidth);
                if (colSpan < 1) colSpan = 1;
                var topPosition = parseInt(controlMetaData.Top.substring(0, controlMetaData.Top.lastIndexOf("px")) / templateData.BackgroundCellHeight);
                if (topPosition < 0) topPosition = 0;
                var leftPosition = parseInt(controlMetaData.Left.substring(0, controlMetaData.Left.lastIndexOf("px")) / templateData.BackgroundCellWidth);
                if (leftPosition < 0) leftPosition = 0;
            } else {
                var rowSpan = parseInt(controlMetaData.Height.substring(0, controlMetaData.Height.lastIndexOf("px")) / 50);
                if (rowSpan < 1) rowSpan = 1;
                var colSpan = parseInt(controlMetaData.Width.substring(0, controlMetaData.Width.lastIndexOf("px")) / 20);
                if (colSpan < 1) colSpan = 1;
                var topPosition = parseInt(controlMetaData.Top.substring(0, controlMetaData.Top.lastIndexOf("px")) / 20);
                if (topPosition < 0) topPosition = 0;
                var leftPosition = parseInt(controlMetaData.Left.substring(0, controlMetaData.Left.lastIndexOf("px")) / 50);
                if (leftPosition < 0) leftPosition = 0;
            }

            controlMetaData.ColSpan = colSpan;
            controlMetaData.RowSpan = rowSpan;
            controlMetaData.TopPosition = topPosition;
            controlMetaData.LeftPosition = leftPosition;
        }

        var uiElementId = controlMetaData.Id + '_' + cellID;

        if (controlType == "sap.ui.commons.TextView") {

            html += '\n\t\t\t\t\t\t\tvar ' + uiElementId + ' = new com.sap.xmii.ui.UIElementTextView({\n' +
                '\t\t\t\t\t\t\t\ttext:"' + controlMetaData.Text + '",\n' +
                '\t\t\t\t\t\t\t\ttextSize:"' + controlMetaData.TextSize + '",\n' +
                '\t\t\t\t\t\t\t\tcolSpan :"' + controlMetaData.ColSpan + '",\n' +
                '\t\t\t\t\t\t\t\trowSpan :"' + controlMetaData.RowSpan + '",\n' +
                '\t\t\t\t\t\t\t\ttopPosition :"' + controlMetaData.TopPosition + '",\n' +
                '\t\t\t\t\t\t\t\tleftPosition :"' + controlMetaData.LeftPosition + '",\n' +
                '\t\t\t\t\t\t\t\tvisible :"' + controlMetaData.Visible + '",\n' +
                '\t\t\t\t\t\t\t\tcontrolId: ' + controlMetaData.controlId +
                '});\n';
        } else if (controlType == "sap.m.Text") {
            var textAlignChoose = sap.ui.core.TextAlign.Begin;
            if (controlMetaData.TextAlignment == oBundle.getText("XLBL_BEGIN")) {
                textAlignChoose = sap.ui.core.TextAlign.Begin;
            } else if (controlMetaData.TextAlignment == oBundle.getText("XLBL_END")) {
                textAlignChoose = sap.ui.core.TextAlign.End;
            } else if (controlMetaData.TextAlignment == oBundle.getText("XLBL_LEFT")) {
                textAlignChoose = sap.ui.core.TextAlign.Left;
            } else if (controlMetaData.TextAlignment == oBundle.getText("XLBL_RIGHT")) {
                textAlignChoose = sap.ui.core.TextAlign.Right;
            }

            html += '\n\t\t\t\t\t\t\tvar ' + uiElementId + ' = new com.sap.xmii.ui.UIElementTextViewM({\n' +
                '\t\t\t\t\t\t\t\ttext:"' + controlMetaData.Text + '",\n' +
                '\t\t\t\t\t\t\t\ttextSize:"' + controlMetaData.TextSize + '",\n' +
                '\t\t\t\t\t\t\t\ttextAlign:"' + textAlignChoose + '",\n' +
                '\t\t\t\t\t\t\t\trequired:"' + controlMetaData.Required + '",\n' +
                '\t\t\t\t\t\t\t\tcolSpan :"' + controlMetaData.ColSpan + '",\n' +
                '\t\t\t\t\t\t\t\trowSpan :"' + controlMetaData.RowSpan + '",\n' +
                '\t\t\t\t\t\t\t\ttopPosition :"' + controlMetaData.TopPosition + '",\n' +
                '\t\t\t\t\t\t\t\tleftPosition :"' + controlMetaData.LeftPosition + '",\n' +
                '\t\t\t\t\t\t\t\tcontrolVisible :"' + controlMetaData.Visible + '",\n' +
                '\t\t\t\t\t\t\t\tcontrolId: ' + controlMetaData.controlId +
                '});\n';
        } else if (controlType == "sap.m.Label") {

            var textAlignChoose = sap.ui.core.TextAlign.Begin;
            if (controlMetaData.TextAlignment == oBundle.getText("XLBL_BEGIN")) {
                textAlignChoose = sap.ui.core.TextAlign.Begin;
            } else if (controlMetaData.TextAlignment == oBundle.getText("XLBL_END")) {
                textAlignChoose = sap.ui.core.TextAlign.End;
            } else if (controlMetaData.TextAlignment == oBundle.getText("XLBL_LEFT")) {
                textAlignChoose = sap.ui.core.TextAlign.Left;
            } else if (controlMetaData.TextAlignment == oBundle.getText("XLBL_RIGHT")) {
                textAlignChoose = sap.ui.core.TextAlign.Right;
            }
            html += '\n\t\t\t\t\t\t\tvar ' + uiElementId + ' = new com.sap.xmii.ui.UIElementLabelM({\n' +
                '\t\t\t\t\t\t\t\ttext:"' + controlMetaData.Text + '",\n' +
                '\t\t\t\t\t\t\t\ttextSize:"' + controlMetaData.TextSize + '",\n' +
                '\t\t\t\t\t\t\t\trequired:"' + controlMetaData.Required + '",\n' +
                '\t\t\t\t\t\t\t\ttextAlign:"' + textAlignChoose + '",\n' +
                '\t\t\t\t\t\t\t\tcolSpan :"' + controlMetaData.ColSpan + '",\n' +
                '\t\t\t\t\t\t\t\trowSpan :"' + controlMetaData.RowSpan + '",\n' +
                '\t\t\t\t\t\t\t\ttopPosition :"' + controlMetaData.TopPosition + '",\n' +
                '\t\t\t\t\t\t\t\tleftPosition :"' + controlMetaData.LeftPosition + '",\n' +
                '\t\t\t\t\t\t\t\tcontrolVisible :"' + controlMetaData.Visible + '",\n' +
                '\t\t\t\t\t\t\t\tcontrolId: ' + controlMetaData.controlId +
                '});\n';
        } else if (controlType == "sap.ui.commons.TextField") {

            html += '\n\t\t\t\t\t\t\tvar ' + uiElementId + ' = new com.sap.xmii.ui.UIElementTextField({\n' +
                '\t\t\t\t\t\t\t\ttext:"' + controlMetaData.Text + '",\n' +
                '\t\t\t\t\t\t\t\ttextSize:"' + controlMetaData.TextSize + '",\n' +
                '\t\t\t\t\t\t\t\tcolSpan :"' + controlMetaData.ColSpan + '",\n' +
                '\t\t\t\t\t\t\t\trowSpan :"' + controlMetaData.RowSpan + '",\n' +
                '\t\t\t\t\t\t\t\ttopPosition :"' + controlMetaData.TopPosition + '",\n' +
                '\t\t\t\t\t\t\t\tleftPosition :"' + controlMetaData.LeftPosition + '",\n' +
                '\t\t\t\t\t\t\t\tvisible :"' + controlMetaData.Visible + '",\n' +
                '\t\t\t\t\t\t\t\tdateTimeFormat :"' + controlMetaData.DateTimeFormat + '",\n' +
                '\t\t\t\t\t\t\t\ttype:"' + controlMetaData.Type + '",\n' +
                '\t\t\t\t\t\t\t\ttooltip :"' + controlMetaData.Tooltip + '",\n' +
                '\t\t\t\t\t\t\t\tenabled :"' + controlMetaData.Enabled + '",\n' +
                '\t\t\t\t\t\t\t\tcontrolId: ' + controlMetaData.controlId + ',\n' +
                '\t\t\t\t\t\t\t\tonLiveChange :"' + controlMetaData.onLiveChange + '",\n' +
                '\t\t\t\t\t\t\t\tonEnter :"' + controlMetaData.onEnter + '"' +
                '});\n';
        } else if (controlType == "sap.m.Input") {

            html += '\n\t\t\t\t\t\t\tvar ' + uiElementId + ' = new com.sap.xmii.ui.UIElementTextFieldM({\n' +
                '\t\t\t\t\t\t\t\tplaceHolder:"' + controlMetaData.PlaceHolder + '",\n' +
                '\t\t\t\t\t\t\t\ttextSize:"' + controlMetaData.TextSize + '",\n' +
                '\t\t\t\t\t\t\t\tcolSpan :"' + controlMetaData.ColSpan + '",\n' +
                '\t\t\t\t\t\t\t\trowSpan :"' + controlMetaData.RowSpan + '",\n' +
                '\t\t\t\t\t\t\t\ttopPosition :"' + controlMetaData.TopPosition + '",\n' +
                '\t\t\t\t\t\t\t\tleftPosition :"' + controlMetaData.LeftPosition + '",\n' +
                '\t\t\t\t\t\t\t\tcontrolVisible :"' + controlMetaData.Visible + '",\n' +
                '\t\t\t\t\t\t\t\tdateTimeFormat :"' + controlMetaData.DateTimeFormat + '",\n' +
                '\t\t\t\t\t\t\t\tinputParameter:"' + controlMetaData.InputParameter + '",\n' +
                '\t\t\t\t\t\t\t\tdefaultValue:"' + controlMetaData.DefaultValue + '",\n' +
                '\t\t\t\t\t\t\t\ttype:"' + controlMetaData.Type + '",\n' +
                '\t\t\t\t\t\t\t\ttooltip :"' + controlMetaData.Tooltip + '",\n' +
                '\t\t\t\t\t\t\t\tcontrolEnabled :"' + controlMetaData.Enabled + '",\n' +
                '\t\t\t\t\t\t\t\tcontrolId: ' + controlMetaData.controlId + ',\n' +
                '\t\t\t\t\t\t\t\tshowValueHelp: "' + controlMetaData.ShowValueHelp + '",\n' +
                '\t\t\t\t\t\t\t\ti5ValueHelp: "' + controlMetaData.I5ValueHelp + '",\n' +
                '\t\t\t\t\t\t\t\tparameters: ' + JSON.stringify(controlMetaData.Parameters) + ',\n' +
                '\t\t\t\t\t\t\t\tradioButtonGroup: ' + JSON.stringify(controlMetaData.RadioButtonGroup) + ',\n' +
                '\t\t\t\t\t\t\t\tonLiveChange :"' + controlMetaData.onLiveChange + '",\n' +
                '\t\t\t\t\t\t\t\tonValueHelp :"' + controlMetaData.onValueHelp + '",\n' +
                '\t\t\t\t\t\t\t\tonEnter :"' + controlMetaData.onEnter + '"' +
                '});\n';
        } else if (controlType == "sap.ui.commons.Button") {

            html += '\n\t\t\t\t\t\t\tvar ' + uiElementId + ' = new com.sap.xmii.ui.UIElementButton({\n' +
                '\t\t\t\t\t\t\t\ttext:"' + controlMetaData.Text + '",\n' +
                '\t\t\t\t\t\t\t\ttextSize:"' + controlMetaData.TextSize + '",\n' +
                '\t\t\t\t\t\t\t\tparameters: ' + JSON.stringify(controlMetaData.Parameters) + ',\n' +
                '\t\t\t\t\t\t\t\tcolSpan :"' + controlMetaData.ColSpan + '",\n' +
                '\t\t\t\t\t\t\t\trowSpan :"' + controlMetaData.RowSpan + '",\n' +
                '\t\t\t\t\t\t\t\ttopPosition :"' + controlMetaData.TopPosition + '",\n' +
                '\t\t\t\t\t\t\t\tleftPosition :"' + controlMetaData.LeftPosition + '",\n' +
                '\t\t\t\t\t\t\t\tvisible :"' + controlMetaData.Visible + '",\n' +
                '\t\t\t\t\t\t\t\ttooltip :"' + controlMetaData.Tooltip + '",\n' +
                '\t\t\t\t\t\t\t\tenabled :"' + controlMetaData.Enabled + '",\n' +
                '\t\t\t\t\t\t\t\tcontrolId: ' + controlMetaData.controlId + ',\n' +
                '\t\t\t\t\t\t\t\tonClick :"' + controlMetaData.onClick + '"' +

                '});\n';
        } else if (controlType == "sap.m.Button") {

            html += '\n\t\t\t\t\t\t\tvar ' + uiElementId + ' = new com.sap.xmii.ui.UIElementButtonM({\n' +
                '\t\t\t\t\t\t\t\ttext:"' + controlMetaData.Text + '",\n' +
                '\t\t\t\t\t\t\t\ttextSize:"' + controlMetaData.TextSize + '",\n' +
                '\t\t\t\t\t\t\t\tcolSpan :"' + controlMetaData.ColSpan + '",\n' +
                '\t\t\t\t\t\t\t\trowSpan :"' + controlMetaData.RowSpan + '",\n' +
                '\t\t\t\t\t\t\t\ttopPosition :"' + controlMetaData.TopPosition + '",\n' +
                '\t\t\t\t\t\t\t\tleftPosition :"' + controlMetaData.LeftPosition + '",\n' +
                '\t\t\t\t\t\t\t\tparameters: ' + JSON.stringify(controlMetaData.Parameters) + ',\n' +
                '\t\t\t\t\t\t\t\tcontrolVisible :"' + controlMetaData.Visible + '",\n' +
                '\t\t\t\t\t\t\t\ttooltip :"' + controlMetaData.Tooltip + '",\n' +
                '\t\t\t\t\t\t\t\tcontrolEnabled :"' + controlMetaData.Enabled + '",\n' +
                '\t\t\t\t\t\t\t\tcontrolId: ' + controlMetaData.controlId + ',\n' +
                '\t\t\t\t\t\t\t\tfeature :"' + controlMetaData.Feature + '",\n' +
                '\t\t\t\t\t\t\t\ti5Command: ' + JSON.stringify(controlMetaData.I5Command) + ',\n' +
                '\t\t\t\t\t\t\t\tonClick :"' + controlMetaData.onClick + '"' +

                '});\n';
        } else if (controlType == "sap.ui.commons.DropdownBox") {

            html += '\n\t\t\t\t\t\t\tvar ' + uiElementId + ' = new com.sap.xmii.ui.UIElementDropdownBox({\n' +
                '\t\t\t\t\t\t\t\tdataStatic:"' + controlMetaData.Static + '",\n' +
                '\t\t\t\t\t\t\t\tdataDynamic :"' + controlMetaData.Dynamic + '",\n' +
                '\t\t\t\t\t\t\t\tkeyValueList :' + JSON.stringify(controlMetaData.KeyVal) + ',\n' +
                '\t\t\t\t\t\t\t\tqueryPath:"' + controlMetaData.QueryPath + '",\n' +
                '\t\t\t\t\t\t\t\tkeyColumn:"' + controlMetaData.Key + '",\n' +
                '\t\t\t\t\t\t\t\tvalueColumn:"' + controlMetaData.Value + '",\n' +
                '\t\t\t\t\t\t\t\tdefaultValue:"' + controlMetaData.DefaultValue + '",\n' +
                '\t\t\t\t\t\t\t\tcolSpan :"' + controlMetaData.ColSpan + '",\n' +
                '\t\t\t\t\t\t\t\trowSpan :"' + controlMetaData.RowSpan + '",\n' +
                '\t\t\t\t\t\t\t\ttopPosition :"' + controlMetaData.TopPosition + '",\n' +
                '\t\t\t\t\t\t\t\tleftPosition :"' + controlMetaData.LeftPosition + '",\n' +
                '\t\t\t\t\t\t\t\tvisible :"' + controlMetaData.Visible + '",\n' +
                '\t\t\t\t\t\t\t\tenabled :"' + controlMetaData.Enabled + '",\n' +
                '\t\t\t\t\t\t\t\ttextSize:"' + controlMetaData.TextSize + '",\n' +
                '\t\t\t\t\t\t\t\tcontrolId: ' + controlMetaData.controlId + ',\n' +
                '\t\t\t\t\t\t\t\tonSelect :"' + controlMetaData.onSelect + '",\n' +
                '\t\t\t\t\t\t\t\tonInitialize :"' + controlMetaData.onInitialize + '"' +
                '});\n';
        } else if (controlType == "sap.m.Select") {

            //add the Parameters if configured
            var paramValueArray = [];
            if (isObjectNotNull(controlMetaData.QueryPath) && isObjectNotNull(controlMetaData.QueryObjectData) && isObjectNotNull(controlMetaData.QueryObjectData.Parameters)) {
                var parameters = controlMetaData.QueryObjectData.Parameters;
                for (var pIndex = 0; pIndex < parameters.length; pIndex++) {
                    if (isObjectNotNull(parameters[pIndex].UserParameter)) {
                        paramValueArray.push({
                            "ParamName": parameters[pIndex].Name,
                            "ParamValue": parameters[pIndex].UserParameter,
                            "inputParam": true
                        });
                    } else {
                        paramValueArray.push({
                            "ParamName": parameters[pIndex].Name,
                            "ParamValue": parameters[pIndex].Value,
                            "inputParam": false
                        });
                    }
                }
            }

            html += '\n\t\t\t\t\t\t\tvar ' + uiElementId + ' = new com.sap.xmii.ui.UIElementDropdownM({\n' +
                '\t\t\t\t\t\t\t\tdataStatic:"' + controlMetaData.Static + '",\n' +
                '\t\t\t\t\t\t\t\tdataDynamic :"' + controlMetaData.Dynamic + '",\n' +
                '\t\t\t\t\t\t\t\tkeyValueList :' + JSON.stringify(controlMetaData.KeyVal) + ',\n' +
                '\t\t\t\t\t\t\t\tqueryPath:"' + controlMetaData.QueryPath + '",\n' +
                '\t\t\t\t\t\t\t\tparameters:' + JSON.stringify(paramValueArray) + ',\n' +
                '\t\t\t\t\t\t\t\tisTimePeriod:"' + controlMetaData.IsTimePeriod + '",\n' +
                '\t\t\t\t\t\t\t\tstartTimeControl:"' + controlMetaData.StartTimeControl + '",\n' +
                '\t\t\t\t\t\t\t\tendTimeControl:"' + controlMetaData.EndTimeControl + '",\n' +
                '\t\t\t\t\t\t\t\tkeyColumn:"' + controlMetaData.Key + '",\n' +
                '\t\t\t\t\t\t\t\tvalueColumn:"' + controlMetaData.Value + '",\n' +
                '\t\t\t\t\t\t\t\tsortOrder:"' + controlMetaData.sortOrder + '",\n' +
                '\t\t\t\t\t\t\t\tretainSorting:"' + controlMetaData.retainSorting + '",\n' +
                '\t\t\t\t\t\t\t\tdefaultValue:"' + controlMetaData.DefaultValue + '",\n' +
                '\t\t\t\t\t\t\t\tcolSpan :"' + controlMetaData.ColSpan + '",\n' +
                '\t\t\t\t\t\t\t\trowSpan :"' + controlMetaData.RowSpan + '",\n' +
                '\t\t\t\t\t\t\t\ttopPosition :"' + controlMetaData.TopPosition + '",\n' +
                '\t\t\t\t\t\t\t\tleftPosition :"' + controlMetaData.LeftPosition + '",\n' +
                '\t\t\t\t\t\t\t\tcontrolVisible :"' + controlMetaData.Visible + '",\n' +
                '\t\t\t\t\t\t\t\tcontrolEnabled :"' + controlMetaData.Enabled + '",\n' +
                '\t\t\t\t\t\t\t\ttextSize:"' + controlMetaData.TextSize + '",\n' +
                '\t\t\t\t\t\t\t\tcontrolId: ' + controlMetaData.controlId + ',\n' +
                '\t\t\t\t\t\t\t\tonSelect :"' + controlMetaData.onSelect + '",\n' +
                '\t\t\t\t\t\t\t\tfeature :"' + controlMetaData.Feature + '",\n' +
                '\t\t\t\t\t\t\t\tonInitialize :"' + controlMetaData.onInitialize + '"' +
                '});\n';
        } else if (controlType == "sap.m.TextArea") {

            html += '\n\t\t\t\t\t\t\tvar ' + uiElementId + ' = new com.sap.xmii.ui.UIElementTextAreaM({\n' +
                '\t\t\t\t\t\t\t\tplaceHolder:"' + controlMetaData.PlaceHolder + '",\n' +
                '\t\t\t\t\t\t\t\ttextSize:"' + controlMetaData.TextSize + '",\n' +
                '\t\t\t\t\t\t\t\tcolSpan :"' + controlMetaData.ColSpan + '",\n' +
                '\t\t\t\t\t\t\t\trowSpan :"' + controlMetaData.RowSpan + '",\n' +
                '\t\t\t\t\t\t\t\ttopPosition :"' + controlMetaData.TopPosition + '",\n' +
                '\t\t\t\t\t\t\t\tleftPosition :"' + controlMetaData.LeftPosition + '",\n' +
                '\t\t\t\t\t\t\t\tcontrolVisible :"' + controlMetaData.Visible + '",\n' +
                '\t\t\t\t\t\t\t\ttooltip :"' + controlMetaData.Tooltip + '",\n' +
                '\t\t\t\t\t\t\t\tinputParameter:"' + controlMetaData.InputParameter + '",\n' +
                '\t\t\t\t\t\t\t\tdefaultValue:"' + controlMetaData.DefaultValue + '",\n' +
                '\t\t\t\t\t\t\t\tcontrolEnabled :"' + controlMetaData.Enabled + '",\n' +
                '\t\t\t\t\t\t\t\tcontrolId: ' + controlMetaData.controlId + ',\n' +
                '\t\t\t\t\t\t\t\tonLiveChange :"' + controlMetaData.onLiveChange + '",\n' +
                '\t\t\t\t\t\t\t\tonEnter :"' + controlMetaData.onEnter + '"' +
                '});\n';
        } else if (controlType == "sap.m.RadioButton") {

            html += '\n\t\t\t\t\t\t\tvar ' + uiElementId + ' = new com.sap.xmii.ui.UIElementRadioButtonM({\n' +
                '\t\t\t\t\t\t\t\ttext:"' + controlMetaData.Text + '",\n' +
                '\t\t\t\t\t\t\t\ttextSize:"' + controlMetaData.TextSize + '",\n' +
                '\t\t\t\t\t\t\t\tradioGroupName:"' + controlMetaData.GroupName + '",\n' +
                '\t\t\t\t\t\t\t\tcolSpan :"' + controlMetaData.ColSpan + '",\n' +
                '\t\t\t\t\t\t\t\trowSpan :"' + controlMetaData.RowSpan + '",\n' +
                '\t\t\t\t\t\t\t\ttopPosition :"' + controlMetaData.TopPosition + '",\n' +
                '\t\t\t\t\t\t\t\tleftPosition :"' + controlMetaData.LeftPosition + '",\n' +
                '\t\t\t\t\t\t\t\tcontrolVisible :"' + controlMetaData.Visible + '",\n' +
                '\t\t\t\t\t\t\t\ttooltip :"' + controlMetaData.Tooltip + '",\n' +
                '\t\t\t\t\t\t\t\tcontrolEnabled :"' + controlMetaData.Enabled + '",\n' +
                '\t\t\t\t\t\t\t\tcontrolId: ' + controlMetaData.controlId + ',\n' +
                '\t\t\t\t\t\t\t\tonSelect :"' + controlMetaData.onSelect + '"' +
                '});\n';
        } else if (controlType == "sap.m.CheckBox") {

            html += '\n\t\t\t\t\t\t\tvar ' + uiElementId + ' = new com.sap.xmii.ui.UIElementCheckBoxM({\n' +
                '\t\t\t\t\t\t\t\ttext:"' + controlMetaData.Text + '",\n' +
                '\t\t\t\t\t\t\t\ttextSize:"' + controlMetaData.TextSize + '",\n' +
                '\t\t\t\t\t\t\t\tcontrolChecked:"' + controlMetaData.Selected + '",\n' +
                '\t\t\t\t\t\t\t\tcolSpan :"' + controlMetaData.ColSpan + '",\n' +
                '\t\t\t\t\t\t\t\trowSpan :"' + controlMetaData.RowSpan + '",\n' +
                '\t\t\t\t\t\t\t\ttopPosition :"' + controlMetaData.TopPosition + '",\n' +
                '\t\t\t\t\t\t\t\tleftPosition :"' + controlMetaData.LeftPosition + '",\n' +
                '\t\t\t\t\t\t\t\tcontrolVisible :"' + controlMetaData.Visible + '",\n' +
                '\t\t\t\t\t\t\t\ttooltip :"' + controlMetaData.Tooltip + '",\n' +
                '\t\t\t\t\t\t\t\tcontrolEnabled :"' + controlMetaData.Enabled + '",\n' +
                '\t\t\t\t\t\t\t\tcontrolId: ' + controlMetaData.controlId + ',\n' +
                '\t\t\t\t\t\t\t\tonSelect :"' + controlMetaData.onSelect + '"' +
                '});\n';
            //add listbox
        } else if (controlType == "sap.ui.commons.ListBox") {
            //format the query object
            var queryObject = {};
            if (controlMetaData.QueryPath) {
                queryObject = {
                    queryName: controlMetaData.QueryPath,
                    keyColumnName: controlMetaData.Key,
                    valueColumnName: controlMetaData.Value,
                    parameters: []
                };

                if (controlMetaData.QueryObjectData && controlMetaData.QueryObjectData.Parameters) {
                    var queryParameters = controlMetaData.QueryObjectData.Parameters;
                    for (var pIndex in queryParameters) {
                    	if (isObjectNotNull(queryParameters[pIndex].UserParameter)) {
                    		queryObject.parameters.push({
                                "Name": queryParameters[pIndex].Name,
                                "Value": queryParameters[pIndex].UserParameter,
                                "inputParam": true
                            });
                        } else {
                        	queryObject.parameters.push({
                                "Name": queryParameters[pIndex].Name,
                                "Value": queryParameters[pIndex].Value,
                                "inputParam": false
                            });
                       /* if (isObjectNotNull(queryParameters[pIndex].Value)) {
                            queryObject.parameters.push({
                                "Name": queryParameters[pIndex].Name,
                                "Value": queryParameters[pIndex].Value
                            });*/
                        }
                    }
                }
            }

            html += '\n\t\t\t\t\t\t\tvar ' + uiElementId + ' = new com.sap.xmii.ui.UIElementList({\n' +
                '\t\t\t\t\t\t\t\ttextSize:"' + controlMetaData.TextSize + '",\n' +
                '\t\t\t\t\t\t\t\tcolSpan :' + controlMetaData.ColSpan + ',\n' +
                '\t\t\t\t\t\t\t\trowSpan :' + controlMetaData.RowSpan + ',\n' +
                '\t\t\t\t\t\t\t\twidth :"' + controlMetaData.Width + '",\n' +
                '\t\t\t\t\t\t\t\theight :"' + controlMetaData.Height + '",\n' +
                '\t\t\t\t\t\t\t\ttopPosition :"' + controlMetaData.TopPosition + '",\n' +
                '\t\t\t\t\t\t\t\tleftPosition :"' + controlMetaData.LeftPosition + '",\n' +
                '\t\t\t\t\t\t\t\tvisible :' + controlMetaData.Visible + ',\n' +
                '\t\t\t\t\t\t\t\tenabled :' + controlMetaData.Enabled + ',\n' +
                '\t\t\t\t\t\t\t\tcontrolId: ' + controlMetaData.controlId + ',\n' +
                '\t\t\t\t\t\t\t\tfeature :"' + controlMetaData.Feature + '",\n' +
                '\t\t\t\t\t\t\t\tstaticDataSource: ' + JSON.stringify(controlMetaData.StaticConfig) + ',\n' +
                '\t\t\t\t\t\t\t\tdynamicDataSource: ' + JSON.stringify(queryObject) + ',\n' +
                '\t\t\t\t\t\t\t\ttype: "' + controlMetaData.Type + '"\n' +
                '\t\t\t\t\t\t\t\t});\n';
        }

        html += '\t\t\t\t\t\t\tform_' + cellID + '.add(' + uiElementId + ');\n';
    }

    html += '\n\t\t\t\t\t\t\tform_' + cellID + '.draw("' + cellID + '");\n';
    return html;
}



/****
 * this method creates a JSON model containg all the objects present in the layout. 
 * this model looks like
 * { "Layout" : {
        "Pattern" : "Pattern2", "Rows" : "", "Columns" : "", "Grid" : [{
                "p0p0" : {
                    "Object" : {
                        "Name" : "iChart", "ParentFolderName" : "", "Path" : "Default/Folder1/ABC", "ParentPath" : "",
                        "" : "iChart", "MappedQueryTemplate" : "NA"
                    ]},
                    "Tag" : [{
                        "Name" : "AssetUtil1", "Description" : "AssetUtil1", "Namespace" : "Root\AssetUtil1", "Datatype" : "String",
                        "XPos" : "125px", "YPos" : "-125px",
                    }]
}}]}}
 * @return json
 */
function getJSONFromLayout() {
    var json = {};
    if (sap.mii.ce.appdata.layout.layoutSelected == "Custom") {
        json['Layout'] = {
            "Pattern": sap.mii.ce.appdata.layout.layoutSelected,
            "DashboardTitle": sap.mii.ce.dashBoardTitle,
            "Rows": sap.mii.ce.appdata.layout.rows,
            "Columns": sap.mii.ce.appdata.layout.columns,
            "RowData": getLayoutRowData(),
            "Grid": getGridcontent(),
            "UsedTemplate": sap.mii.ce.appdata.layout.usedTemplate /*, "UsedObject" : sap.mii.ce.appdata.layout.usedObjects*/
        };
    } else {
        // If Dashboard Title has not been entered, set it to 'Title' by default, else set it title which User provides
        if (sap.mii.ce.dashBoardTitle == null || sap.mii.ce.dashBoardTitle == undefined || sap.mii.ce.dashBoardTitle.trim() == "") {
            json['Layout'] = {
                "Pattern": sap.mii.ce.appdata.layout.layoutSelected,
                "DashboardTitle": "Title",
                "Rows": sap.mii.ce.appdata.layout.rows,
                "Columns": sap.mii.ce.appdata.layout.columns,
                "Grid": getGridcontent(),
                "UsedTemplate": sap.mii.ce.appdata.layout.usedTemplate /*, "UsedObject" : sap.mii.ce.appdata.layout.usedObjects*/
            };
        } else {
            json['Layout'] = {
                "Pattern": sap.mii.ce.appdata.layout.layoutSelected,
                "DashboardTitle": sap.mii.ce.dashBoardTitle,
                "Rows": sap.mii.ce.appdata.layout.rows,
                "Columns": sap.mii.ce.appdata.layout.columns,
                "Grid": getGridcontent(),
                "UsedTemplate": sap.mii.ce.appdata.layout.usedTemplate,
                "UsedFiles": includeFileList.data /*, "UsedObject" : sap.mii.ce.appdata.layout.usedObjects*/
            };
        }
    }
    //adding Security Content
    json.Layout.Security = PageSettings.Security;
    json.PageSettings = PageSettings.General;

    //Pushing only PageSettings.General because following code is deleting Security from PageSetting 
    //delete json.PageSettings.Security;
    return json;
}

/****
 * this method creates a JSON model for the Layout and Setting created for a Template 
 * this model looks like
 * { "Layout" : {
        "Pattern" : "Pattern2", "Rows" : "", "Columns" : "", "
 *  }}]}}
 * @return json
 */
function getTemplateJSONFromLayout() {
    var json = {};
    if (sap.mii.ce.appdata.template.layoutSelected == "Custom") {
        json['Layout'] = {
            "Pattern": sap.mii.ce.appdata.template.layoutSelected,
            "Rows": sap.mii.ce.appdata.template.rows,
            "Columns": sap.mii.ce.appdata.template.columns,
            "RowData": getLayoutRowData(true),
            "Grid": getGridcontent(true)
        };
    } else {
        json['Layout'] = {
            "Pattern": sap.mii.ce.appdata.template.layoutSelected,
            "Rows": sap.mii.ce.appdata.template.rows,
            "Columns": sap.mii.ce.appdata.layout.columns,
            "Grid": getGridcontent(true)
        };
    }
    //adding Security Content
    json.Layout.Security = TemplatePageSettings.Security;
    json.PageSettings = TemplatePageSettings.General;
    return json;
}

function pushDataInUndoQueue(currentTab) {
    if (CURRENT_FILE_PATH != null && CURRENT_FILE_PATH != "") {
        if (lockAcquiredOnCurrentFileByUser != true) {
            //check for the lock on file
            var param = {
                "Mode": "FindLockForFile",
                "FilePath": CURRENT_FILE_PATH + '.cemd',
                "FileName": CURRENT_FILE_PATH.substring(CURRENT_FILE_PATH.lastIndexOf("/") + 1),
                "content-type": "text/json"
            };

            var data = getDataFromServer(XMII_CECATALOG_URL, param, null, null);
            //If we have the userName assigned to the file, then file is locked by some user and display the popup 
            //otherwise acquire lock to the file
            if (data.Rowsets.Rowset != undefined) {
                fileLockedBy = data.Rowsets.Rowset[0].Row[0].Name;
                //Session username
                var userName = document.getElementById("userUniqueID").value;
                if (fileLockedBy != "NA") {
                    if (userName == fileLockedBy) {
                        if (lockAcquiredOnCurrentFileByUser != true) {
                            //If user's own lock is not cleared due to some error, display the popup with unlock button
                            createDialogForFileUnlock(data.Rowsets.Rowset[0].Row[0]); //function in FileLockUtils.js
                            revertCurrentChanges = true; // revert all the changes, if the user tries to do without unlocking
                        } else {
                            revertCurrentChanges = false; // Current user session has acquired the lock, allow to do the changes
                        }
                    } else {
                        //If other user has acquired the lock, display the popup 
                        // And revert all the changes, if the user tries to do
                        createDialogForFileUnlock(data.Rowsets.Rowset[0].Row[0]); //function in FileLockUtils.js
                        revertCurrentChanges = true;
                    }
                } else {
                    //If the file is not locked
                    //acquire for the lock on file
                    var param = {
                        "Mode": "AcquireLockForFile",
                        "FilePath": CURRENT_FILE_PATH + '.cemd',
                        "FileName": CURRENT_FILE_PATH.substring(CURRENT_FILE_PATH.lastIndexOf("/") + 1),
                        "content-type": "text/json"
                    };

                    var data = getDataFromServer(XMII_CECATALOG_URL, param, null, null);
                    if (data.Rowsets.Rowset != undefined && data.Rowsets.Rowset[0].Row[0].Value != 0) {
                        //Allow the user to make changes
                        fileLockedBy = document.getElementById("userUniqueID").value; //Current user
                        revertCurrentChanges = false;
                        lockAcquiredOnCurrentFileByUser = true;
                    } else {
                        showNotificationBarMsg(3, oBundle.getText("XLBL_ACQUIRE_LOCK_ERROR"));
                    }
                }
            }
        }
    }
    //  var jsonData = JSON.stringify(getJSONFromLayout());
    var tabArray = new Array();
    //if current tab is design view, capture json of dashboard.
    if (currentTab == 'nav-Design-Layout') {
        var jsonData = getJSONFromLayout();
        var pushData = {};
        jQuery.extend(true, pushData, jsonData);
        tabArray[0] = currentTab;
        tabArray[1] = pushData;
        manageUndoQueue(tabArray);
        sap.ui.getCore().byId("layoutViewUndoButton").setEnabled(true);
        //Enable Change Layout button - 1570737955
        sap.ui.getCore().byId("layoutViewChangeLayoutButton").setEnabled(true);
    }
    //if current tab is Source code, copy script of edit area
    else if (currentTab == 'nav-Design-Code') {

        var scriptData = new String(globalUserScript);
        var pushScriptData = "";
        jQuery.extend(true, pushScriptData, scriptData);
        tabArray[0] = currentTab;
        tabArray[1] = scriptData;
        manageUndoQueue(tabArray);
        sap.ui.getCore().byId("codeViewUndoButton").setEnabled(true);

    }

}
/**
 * This method is called when user clicks undo button
 * @param currentTab
 * @return
 */
function undoLastOperation(currentTab) {
    if (isObjectNotNull(CURRENT_FILE_PATH)) {
        if (lockAcquiredOnCurrentFileByUser != true) {
            //check for the lock on file
            var param = {
                "Mode": "FindLockForFile",
                "FilePath": CURRENT_FILE_PATH + '.cemd',
                "FileName": CURRENT_FILE_PATH.substring(CURRENT_FILE_PATH.lastIndexOf("/") + 1),
                "content-type": "text/json"
            };

            var data = getDataFromServer(XMII_CECATALOG_URL, param, null, null);
            //If we have the userName assigned to the file, then file is locked by some user and display the popup 
            //otherwise acquire lock to the file
            if (data.Rowsets.Rowset != undefined) {
                fileLockedBy = data.Rowsets.Rowset[0].Row[0].Name;
                //Session username
                var userName = document.getElementById("userUniqueID").value;
                if (fileLockedBy != "NA") {
                    if (userName == fileLockedBy) {
                        if (lockAcquiredOnCurrentFileByUser != true) {
                            //If user's own lock is not cleared due to some error, display the popup with unlock button
                            createDialogForFileUnlock(data.Rowsets.Rowset[0].Row[0]); //function in FileLockUtils.js
                            revertCurrentChanges = true; // revert all the changes, if the user tries to do without unlocking
                        } else {
                            revertCurrentChanges = false; // Current user session has acquired the lock, allow to do the changes
                        }
                    } else {
                        //If other user has acquired the lock, display the popup 
                        // And revert all the changes, if the user tries to do
                        createDialogForFileUnlock(data.Rowsets.Rowset[0].Row[0]); //function in FileLockUtils.js
                        revertCurrentChanges = true;
                    }
                } else {
                    //If the file is not locked
                    //acquire for the lock on file
                    var param = {
                        "Mode": "AcquireLockForFile",
                        "FilePath": CURRENT_FILE_PATH + '.cemd',
                        "FileName": CURRENT_FILE_PATH.substring(CURRENT_FILE_PATH.lastIndexOf("/") + 1),
                        "content-type": "text/json"
                    };

                    var data = getDataFromServer(XMII_CECATALOG_URL, param, null, null);
                    if (data.Rowsets.Rowset != undefined && data.Rowsets.Rowset[0].Row[0].Value != 0) {
                        //Allow the user to make changes
                        fileLockedBy = document.getElementById("userUniqueID").value; //Current user
                        revertCurrentChanges = false;
                        lockAcquiredOnCurrentFileByUser = true;
                    } else {
                        showNotificationBarMsg(3, oBundle.getText("XLBL_ACQUIRE_LOCK_ERROR"));
                    }
                }
            }
        }
    }
    if (currentTab == "nav-Design-Code") {
        var editButton = sap.ui.getCore().byId("codeViewEditButton");
        //checking if the view has been created first
        if (editButton !== undefined && editButton != null) {
            var isEdited = editButton.getEnabled();
            //to set the content of global variable
            if (userEditCodeArea != null)
                globalUserScript = userEditCodeArea.getValue();
            else
                globalUserScript = "";
            if (!isEdited && globalUserScript != "" || !isEdited && globalUserFiles.trim() != "") {
                var message = oBundle.getText("XMSG_NAVIGATION_STOPPED");
                showNotificationBarMsg(3, message);
                return;
            }
        }
    }
    var tabArray = new Array();
    var undoArrayQueue = getUndoQueue();
    var lastViewArray = undoArrayQueue.pop();
    var lastTab = lastViewArray[0];

    //Closing the UIElement properties tab
    if (sap.ui.getCore().byId("main-shell")._sOpenPaneId == "PI_UI_Elements") {
        var uiElementPropTab = sap.ui.getCore().byId("uiElementPropTab");
        if (uiElementPropTab != undefined) {
            var uiElementTabStrip = sap.ui.getCore().byId("uiElementTabStrip");
            uiElementTabStrip.setSelectedIndex(0);
            uiElementPropTab.setEnabled(false);
        }
    }
    // First navigate to last view and then capture current view for redo
    // changes
    if (currentTab != lastTab) {
        if (lastTab == 'nav-Design-Layout') {
            jQuery.sap.byId("nav-Design-Layout").trigger("click");
        } else if (lastTab == 'nav-Design-Code') {
            jQuery.sap.byId("nav-Design-Code").trigger("click");
        }
        currentTab = lastTab;
    }
    //If current tab is design tab, capture json of dashboard.
    if (currentTab == 'nav-Design-Layout') {
        var jsonNewData = getJSONFromLayout();
        var currentData = {};
        jQuery.extend(true, currentData, jsonNewData);

        tabArray[0] = currentTab;
        tabArray[1] = currentData;
        manageRedoQueue(tabArray);

        var lastViewJson = {};
        lastViewJson = lastViewArray[1];
        //if lastview is deign view , replace json
        if (lastTab == 'nav-Design-Layout') {
            showBusyIndicator();
            //flag is set to false so no undo operation
            revertCurrentChanges = false;
            sap.ui.getCore().byId("Design-Layout").getController()
                .loadLayoutFromJSON(lastViewJson,
                    sap.ui.getCore().byId("FileName").getText());

            sap.ui.getCore().getEventBus().publish("mii.ui.ce.events",
                "change");
        }
        //if current tab is source code, capture script of edit area.
    } else if (currentTab == 'nav-Design-Code') {
        var scriptData = userEditCodeArea.getValue();
        /*var scriptData = sap.ui.getCore().byId("codeEditArea").getValue()
                + "\n";
        ;*/
        tabArray[0] = currentTab;
        tabArray[1] = scriptData;
        manageRedoQueue(tabArray);

        if (lastTab == 'nav-Design-Layout') {
            var lastViewScript = {};
        } else {
            var lastViewScript;
        }
        lastViewScript = lastViewArray[1];
        //if last view is design, replace json to dashboard
        if (lastTab == 'nav-Design-Layout') {
            showBusyIndicator();
            //flag is set to false so no undo operation
            revertCurrentChanges = false;
            sap.ui.getCore().byId("Design-Layout").getController()
                .loadLayoutFromJSON(lastViewScript,
                    sap.ui.getCore().byId("FileName").getText());
            sap.ui.getCore().getEventBus().publish("mii.ui.ce.events",
                "change");
            manageUndoRedoButton();
            //if last view is code, call applyhandle of code.view with previous script
        } else if (lastTab == 'nav-Design-Code') {
            // TODO need to put call for switching tabs

            //sap.ui.getCore().byId("codeEditArea").setValue(lastViewScript);
            userEditCodeArea.setValue(lastViewScript);
            PREVENT_PUSH_UNDO = true;
            //flag is set to false so no undo operation
            revertCurrentChanges = false;
            sap.ui.getCore().byId("shellView").getController().getView(
                "nav-Design-Code").handleApply();
            //sap.ui.getCore().byId("shellView").getController().getView("nav-Design-Code").handleEdit();
            manageUndoRedoButton();
        }
    } else if (currentTab == 'nav-Design-Settings') {
        //flag is set to false so no undo operation
        revertCurrentChanges = false;
    }
}


/**
 * This method will be called when user clicks Redo button on UI
 * @return
 */
function redoLastOperation(currentTab) {
    if (isObjectNotNull(CURRENT_FILE_PATH)) {
        if (lockAcquiredOnCurrentFileByUser != true) {
            //check for the lock on file
            var param = {
                "Mode": "FindLockForFile",
                "FilePath": CURRENT_FILE_PATH + '.cemd',
                "FileName": CURRENT_FILE_PATH.substring(CURRENT_FILE_PATH.lastIndexOf("/") + 1),
                "content-type": "text/json"
            };

            var data = getDataFromServer(XMII_CECATALOG_URL, param, null, null);
            //If we have the userName assigned to the file, then file is locked by some user and display the popup 
            //otherwise acquire lock to the file
            if (data.Rowsets.Rowset != undefined) {
                fileLockedBy = data.Rowsets.Rowset[0].Row[0].Name;
                //Session username
                var userName = document.getElementById("userUniqueID").value;
                if (fileLockedBy != "NA") {
                    if (userName == fileLockedBy) {
                        if (lockAcquiredOnCurrentFileByUser != true) {
                            //If user's own lock is not cleared due to some error, display the popup with unlock button
                            createDialogForFileUnlock(data.Rowsets.Rowset[0].Row[0]); //function in FileLockUtils.js
                            revertCurrentChanges = true; // revert all the changes, if the user tries to do without unlocking
                        } else {
                            revertCurrentChanges = false; // Current user session has acquired the lock, allow to do the changes
                        }
                    } else {
                        //If other user has acquired the lock, display the popup 
                        // And revert all the changes, if the user tries to do
                        createDialogForFileUnlock(data.Rowsets.Rowset[0].Row[0]); //function in FileLockUtils.js
                        revertCurrentChanges = true;
                    }
                } else {
                    //If the file is not locked
                    //acquire for the lock on file
                    var param = {
                        "Mode": "AcquireLockForFile",
                        "FilePath": CURRENT_FILE_PATH + '.cemd',
                        "FileName": CURRENT_FILE_PATH.substring(CURRENT_FILE_PATH.lastIndexOf("/") + 1),
                        "content-type": "text/json"
                    };

                    var data = getDataFromServer(XMII_CECATALOG_URL, param, null, null);
                    if (data.Rowsets.Rowset != undefined && data.Rowsets.Rowset[0].Row[0].Value != 0) {
                        //Allow the user to make changes
                        fileLockedBy = document.getElementById("userUniqueID").value; //Current user
                        revertCurrentChanges = false;
                        lockAcquiredOnCurrentFileByUser = true;
                    } else {
                        showNotificationBarMsg(3, oBundle.getText("XLBL_ACQUIRE_LOCK_ERROR"));
                    }
                }
            }
        }
    }
    var tabArray = new Array();
    var lastViewRedoArrayQueue = getRedoQueue();
    var lastViewJsonArray = lastViewRedoArrayQueue.pop();
    var lastTab = lastViewJsonArray[0];

    //Closing the UIElement properties tab
    if (sap.ui.getCore().byId("main-shell")._sOpenPaneId == "PI_UI_Elements") {
        var uiElementPropTab = sap.ui.getCore().byId("uiElementPropTab");
        if (uiElementPropTab != undefined) {
            var uiElementTabStrip = sap.ui.getCore().byId("uiElementTabStrip");
            uiElementTabStrip.setSelectedIndex(0);
            uiElementPropTab.setEnabled(false);
        }
    }
    // if current tab is not equal to last tab then navigate to last tab.
    if (currentTab != lastTab) {
        if (lastTab == 'nav-Design-Layout') {
            jQuery.sap.byId("nav-Design-Layout").trigger("click");
        } else if (lastTab == 'nav-Design-Code') {
            jQuery.sap.byId("nav-Design-Code").trigger("click");
        }
        currentTab = lastTab;
    }
    // if current tab is design tab , replace json to dashboard.
    if (currentTab == 'nav-Design-Layout') {
        // get current page json (before latest and put in undo)
        var jsonData = getJSONFromLayout();
        var pushData = {};
        jQuery.extend(true, pushData, jsonData);
        tabArray[0] = currentTab;
        tabArray[1] = pushData;
        manageUndoQueue(tabArray);

        var lastViewJson = {};
        lastViewJson = lastViewJsonArray[1];
        if (lastTab == 'nav-Design-Layout') {
            showBusyIndicator();
            sap.ui.getCore().byId("Design-Layout").getController()
                .loadLayoutFromJSON(lastViewJson,
                    sap.ui.getCore().byId("FileName").getText());
            sap.ui.getCore().getEventBus().publish("mii.ui.ce.events",
                "change");
        }
        // if current tab is Code , call handleApply method of Code.view with previous script.
    } else if (currentTab == 'nav-Design-Code') {
        var scriptData = globalUserScript;
        var pushScriptData = "";
        jQuery.extend(true, pushScriptData, scriptData);
        tabArray[0] = currentTab;
        tabArray[1] = scriptData;
        manageUndoQueue(tabArray);

        if (lastTab == 'nav-Design-Layout') {
            var lastViewJson = {};
        } else if (lastTab == 'nav-Design-Code') {
            var lastViewJson = "";
        }
        lastViewJson = lastViewJsonArray[1];
        if (lastTab == 'nav-Design-Layout') {
            showBusyIndicator();
            sap.ui.getCore().byId("Design-Layout").getController()
                .loadLayoutFromJSON(lastViewJson,
                    sap.ui.getCore().byId("FileName").getText());
            sap.ui.getCore().getEventBus().publish("mii.ui.ce.events",
                "change");
            manageUndoRedoButton();
        } else if (lastTab == 'nav-Design-Code') {
            //          sap.ui.getCore().byId("codeEditArea").setValue(lastViewJson);
            userEditCodeArea.setValue(lastViewJson);
            PREVENT_PUSH_UNDO = true;
            sap.ui.getCore().byId("shellView").getController().getView(
                "nav-Design-Code").handleApply();
            manageUndoRedoButton();
        }
    }
}
/**
 * This method enables and disables undo, redo button on design and code tab.
 * @return
 */
function manageUndoRedoButton() {
    var undo = getUndoQueue();
    var redo = getRedoQueue();
    if (undo.length > 0) {
        if (sap.ui.getCore().byId("codeViewUndoButton") != undefined) {
            sap.ui.getCore().byId("codeViewUndoButton").setEnabled(true);
        }
        if (sap.ui.getCore().byId("layoutViewUndoButton") != undefined) {
            sap.ui.getCore().byId("layoutViewUndoButton").setEnabled(true);
        }
    }
    if (redo.length > 0) {
        if (sap.ui.getCore().byId("codeViewRedoButton") != undefined) {
            sap.ui.getCore().byId("codeViewRedoButton").setEnabled(true);
        }
        if (sap.ui.getCore().byId("layoutViewRedoButton") != undefined) {
            sap.ui.getCore().byId("layoutViewRedoButton").setEnabled(true);
        }
    }
    if (redo.length == 0) {
        if (sap.ui.getCore().byId("codeViewRedoButton") != undefined) {
            sap.ui.getCore().byId("codeViewRedoButton").setEnabled(false);
        }
        if (sap.ui.getCore().byId("layoutViewRedoButton") != undefined) {
            sap.ui.getCore().byId("layoutViewRedoButton").setEnabled(false);
        }
    }
    if (undo.length == 0) {
        if (sap.ui.getCore().byId("codeViewUndoButton") != undefined) {
            sap.ui.getCore().byId("codeViewUndoButton").setEnabled(false);
        }
        if (sap.ui.getCore().byId("layoutViewUndoButton") != undefined) {
            sap.ui.getCore().byId("layoutViewUndoButton").setEnabled(false);
        }
    }
}

/**
 *  create the model by iterating the event list in the preference.
 *  @return PageSettings.General.Event
 */
function getEventList() {
    var oEventList = sap.ui.getCore().byId("EventListTree");
    eventsStruct = [];
    if (oEventList) {
        var p_nodes = oEventList.getNodes();
        if (p_nodes.length > 0) {
            for (var i in p_nodes) {
                var c_nodes = p_nodes[i].getNodes();
                var handlers = [];
                if (c_nodes.length > 0) {

                    for (var j in c_nodes) {
                        handlers.push(c_nodes[j].data("EventDetail"));
                    };

                };
                eventsStruct.push({
                    EventTrigger: p_nodes[i].getText(),
                    Handlers: handlers
                });
            }
        }
    }
    return eventsStruct;
}

/***
 * creates the model by iterating each cell in the layout.
 * @return Grid
 */

function getGridcontent(isTemplate) {
    var json = {};
    json.Grid = [];

    if (isTemplate)
        var layout = sap.ui.getCore().byId("matrix2");
    else
        var layout = sap.ui.getCore().byId("matrix1");

    var rows = layout.getRows();
    var boxCounter = 0;
    for (var k = 0; k < rows.length; k++) {
        var row = rows[k];
        var cells = row.getCells();

        for (var j = 0; j < cells.length; j++) {
            var cell = cells[j];
            var panel = cell.getContent()[0];
            var panelId = panel.getId();
            json.Grid[boxCounter] = {};

            //code for the plugin
            if (panel.data("IsPlugin") == "true" || panel.data("IsPlugin") == true || panel.data("IsPlugin") != null)
                json.Grid[boxCounter][panelId] = CEPluginHandler.getJSONFromPlugin(panel.data("CustomPluginExtension"));
            else
                json.Grid[boxCounter][panelId] = {
                    "Object": panel.data("Object")
                };

            //creating JSON model for dragged tags and queries and svg
            var tagArray = [];
            var queryArray = [];
            var svgArray = [];
            var spotArray = [];
            if (panel.data("Object") != null && panel.data("Object") !== undefined) {
                if (panel.data("Object").TagDisplay != null && panel.data("Object").TagDisplay !== undefined && (panel.data("Object").TagDisplay == "Tags" || panel.data("Object").TagDisplay == "Gauge")) {
                    tagArray = ObjectsDropUtils.createTagArrayForPanel(panel); //--> objectsDropUtils.js 
                    queryArray = ObjectsDropUtils.createQueryArrayForPanel(panel); //--> objectsDropUtils.js
                    svgArray = ObjectsDropUtils.createSVGArrayForPanel(panel); //--> objectsDropUtils.js
                } else if (panel.data("Object").TagDisplay != null && panel.data("Object").TagDisplay !== undefined && panel.data("Object").TagDisplay == "Graph" || panel.data("Object").TagDisplay == "QueryTable") {
                    tagArray = panel.data().TagArray;
                } else if (panel.data("Object").ObjectType == "TagGroup" && panel.data("Object").FileType == "PICGroup" && panel.data("Object").SpotData != undefined) {
                    spotArray = panel.data("Object").SpotData;
                }
            }
            if (tagArray.length > 0)
                json.Grid[boxCounter][panelId]["Tag"] = tagArray;
            if (queryArray.length > 0)
                json.Grid[boxCounter][panelId]["Query"] = queryArray;
            if (svgArray.length > 0)
                json.Grid[boxCounter][panelId]["SVG"] = svgArray;
            if (spotArray.length > 0)
                json.Grid[boxCounter][panelId]["SpotData"] = spotArray;

            json.Grid[boxCounter][panelId]["TitleInfo"] = panel.data().TitleInfo;

            boxCounter++;
        }

    }

    return json.Grid;
}

function saveVDSViewPortInfo() {
    var cells = getGridcontent();
    cells.forEach(function(cell) {
        var clickedCellId = Object.keys(cell);
        var cellObject = cell[clickedCellId].Object;
        if (cellObject) {
            var fileType = determineFileType(cellObject.FileType);
            if (fileType === FILE_TYPE_VDS) {
                var cellObject = getCellDataByCellId(clickedCellId);
                if (cellObject.RetainViewPort == true) {
                    var viewPortInfo = sap.ui.getCore().byId("viewer" + clickedCellId).getViewport().getViewInfo();
                    cellObject.ViewPortInfo = viewPortInfo;
                } else {
                    cellObject.ViewPortInfo = undefined;
                }

            }

        }
        //}
    });
}

function registerEventForTimeAwareComponents() {
    // deleteHiddenEventHandlers();
    var cells = getGridcontent();
    //Object.keys(cells[0]);

    cells.forEach(function(cell) {
        //  if(cell[clickedCellId] != undefined && cell[clickedCellId] != null){
        var clickedCellId = Object.keys(cell);
        var cellObject = cell[clickedCellId].Object;
        if (cellObject) {
            var fileType = determineFileType(cellObject.FileType);
            if (fileType === FILE_TYPE_I5CHART || fileType === FILE_TYPE_I5GRID || fileType === FILE_TYPE_QUERY || fileType === FILE_TYPE_I5SPCCHART || fileType === FILE_TYPE_KPI) {
                //var controlName = cellObject.Name.substring(0, cellObject.Name.indexOf("."));
                //var controlId = getControlNameByType(fileType);
                //  var controlId = getTypeByCellId(clickedCellId, controlName);
                var cellObject = getCellDataByCellId(clickedCellId);
                var controlName;
                if (cellObject.Name.indexOf(".") != -1) {
                    controlName = cellObject.Name.substring(0, cellObject.Name.indexOf("."));
                } else {
                    controlName = cellObject.Name;
                }
                var controlId = getControlNameByCell(cellObject);
                if (!controlId) {
                    controlId = controlName;
                }
                if (!controlId) {
                    controlId = controlName;
                }
                var controlItem = window[controlId + "_" + clickedCellId];
                if (cellObject.Visualization == "kpiChart") {
                    if (isObjectNotNull(cellObject.Config) && cellObject.Config.chartType == "Tile")
                        controlItem = window["kpi_" + clickedCellId];
                    else
                        controlItem = window["kpi_" + clickedCellId]["kpiChart"];
                }
                if (isObjectNotNull(controlItem) && controlItem.isTimeAware()) {

                    eventTrigger = "toolBar_runtimeToolBar.onTimeChange";
                    handlerName = "AutoGeneratedHandler" + "_" + controlId + "_" + clickedCellId;
                    isCustom = 0;
                    if (cellObject.Visualization == "kpiChart") {
                        eventHandler = "kpi_" + clickedCellId + ".refresh";
                    } else {
                        eventHandler = controlId + "_" + clickedCellId + ".refresh";
                    }
                    activeFlag = 1;
                    hidden = true;
                    origin = "TimeAware";
                    parameterMappings = [];
                    var dateFormatJson = {
                        "Target": "QueryParameters.DateFormat",
                        "Source": "toolBar_runtimeToolBar.getDateFormat()",
                        "Type": "UserDefined"
                    };
                    var endDateJson = {
                        "Target": "QueryParameters.EndDate",
                        "Source": "toolBar_runtimeToolBar.getEndDate()",
                        "Type": "UserDefined"
                    };
                    var startDateJson = {
                        "Target": "QueryParameters.StartDate",
                        "Source": "toolBar_runtimeToolBar.getStartDate()",
                        "Type": "UserDefined"
                    };
                    var TimePeriodJson = {
                        "Target": "QueryParameters.TimePeriod",
                        "Source": "toolBar_runtimeToolBar.getTimePeriod()",
                        "Type": "UserDefined"
                    };

                    parameterMappings.push(dateFormatJson);
                    parameterMappings.push(endDateJson);
                    parameterMappings.push(startDateJson);
                    parameterMappings.push(TimePeriodJson);

                    addEventHandler(eventTrigger, handlerName, isCustom, eventHandler, parameterMappings, activeFlag, hidden, origin);
                }

            }

        }
        //}
    });
}

function getQueryMode(templateData, cellID) {
    var queryTemplateName = templateData.Path + "/" + removeExtension(templateData.Name);
    var param = {
        "Mode": "loadParameters",
        "objectname": queryTemplateName,
        "content-type": "text/json",
        "GroupId": 1
    };
    var result = getDataFromServer(XMII_CECATALOG_URL, param);
    if (isObjectNotNull(result) && isObjectNotNull(result.Rowsets) && isObjectNotNull(result.Rowsets.Rowset) && isObjectNotNull(result.Rowsets.Rowset[0]) && isObjectNotNull(result.Rowsets.Rowset[0].Row)) {
        var rows = result.Rowsets.Rowset[0].Row;
        for (i = 0; i < rows.length; i++) {
            var row = rows[i];
            if (isObjectNotNull(row.Name) && row.Name == "Mode") {
                return row.DefaultValue;
            }
        }
    }
    return null;
}


function registerEventForPICAwareComponents() {
    // deleteHiddenEventHandlers();
    var cells = getGridcontent();

    cells.forEach(function(cell) {
        var clickedCellId = Object.keys(cell);
        var cellObject = cell[clickedCellId].Object;
        if (cellObject) {
            var fileType = determineFileType(cellObject.FileType);
            if (fileType === FILE_TYPE_I5CHART || fileType === FILE_TYPE_I5GRID || fileType === FILE_TYPE_QUERY || fileType === FILE_TYPE_I5SPCCHART) {
                var cellObject = getCellDataByCellId(clickedCellId);
                var queryMode = getQueryMode(cellObject, clickedCellId);
                var controlName;
                if (cellObject.Name.indexOf(".") != -1) {
                    controlName = cellObject.Name.substring(0, cellObject.Name.indexOf("."));
                } else {
                    controlName = cellObject.Name;
                }
                var controlId = getControlNameByCell(cellObject);
                if (!controlId) {
                    controlId = controlName;
                }
                if (!controlId) {
                    controlId = controlName;
                }

                if (queryMode == "PICAnalysis") {
                    if (cellObject.Visualization == "kpiChart") {
                        //var controlItem = window["kpi_"  + clickedCellId + ".kpiChart"];
                        handlerName = "AutoGeneratedHandler_PIC" + "_" + controlId + "_" + clickedCellId;
                        eventHandler = "kpi_" + clickedCellId + ".refresh";
                    } else {
                        //var controlItem = window[controlId + "_" + clickedCellId];
                        handlerName = "AutoGeneratedHandler_PIC" + "_" + controlId + "_" + clickedCellId;
                        eventHandler = controlId + "_" + clickedCellId + ".refresh";
                    }
                    eventTrigger = "toolBar_runtimeToolBar.onPicChange";
                    isCustom = 0;
                    activeFlag = 1;
                    hidden = true;
                    origin = "PicAware";
                    parameterMappings = [];
                    var selectedNodeJson = {
                        "Target": "QueryParameters.SelectedNodes",
                        "Source": "toolBar_runtimeToolBar.getNamespace()",
                        "Type": "UserDefined"
                    };
                    parameterMappings.push(selectedNodeJson);

                    addEventHandler(eventTrigger, handlerName, isCustom, eventHandler, parameterMappings, activeFlag, hidden, origin);
                }

            }

        }
    });
}

function getLayoutRowData(isTemplate) {
    var json = [];
    if (isTemplate)
        var layout = sap.ui.getCore().byId("matrix2");
    else
        var layout = sap.ui.getCore().byId("matrix1");

    var rows = layout.getRows();
    for (var i = 0; i < rows.length; i++) {
        var row = rows[i];
        json[i] = [];
        json[i] = {
            "CellData": []
        };
        var cells = row.getCells();
        for (var j = 0; j < cells.length; j++) {
            var cell = cells[j];
            var cellData = {
                "PanelId": cell.getContent()[0].getId(),
                "RowSpan": cell.getRowSpan(),
                "ColSpan": cell.getColSpan()
            };
            json[i].CellData[j] = cellData;
        }
    }
    return json;
}

/***
 * populates the content of each cell according to the data passed.  
 * @param onDropped
 * @param objectData
 * @return
 */
function populateCellContent(onDropped, objectData) {
    //If the flag is true, the changes should not get applied
    if (revertCurrentChanges) return;
    var tagArray = null;
    var queryArray = null;
    var SVGArray = null;
    //Flag to know whether the dashboard is in runtime
    ssceLayout.isDesign = true;
    if (objectData != null && objectData.Object != null && typeof(objectData.Object) !== "undefined") {
        tagArray = objectData.TagArray;
        queryArray = objectData.QueryArray;
        SVGArray = objectData.SVGArray;
        if (objectData.TitleInfo == null || typeof(objectData.TitleInfo) === "undefined") {
            objectData.TitleInfo = {
                ShowOrNot: false,
                Title: "Title",
                Height: 2,
                FontSize: 1.5,
                TextAlign: sap.ui.core.TextAlign.Begin,
                TextColor: "",
                BackgroundColor: "",
                UseSpecificSetting: false
            };
        }
        // it's not always present? - hotfixing
        //need to delete the object first then destroy the content
        if (typeof ceController !== 'undefined') {
            ceController.deleteObject(onDropped.getId());
            ceController.deleteObject(onDropped.getParent().getId());
        }
        onDropped.destroyContent();
        var contentTopMargin = null;
        if (!objectData.TitleInfo.ShowOrNot) {
            contentTopMargin = 31;
        } else {
            if (objectData.TitleInfo.Height != undefined && objectData.TitleInfo.Height != null && objectData.TitleInfo.Height != "") {
                contentTopMargin = 31 + ((parseFloat(objectData.TitleInfo.Height)) * window.innerHeight) / 100;
            } else {
                contentTopMargin = 31;
            }
        }

        var fileType = determineFileType(objectData.Object.FileType);
        if (objectData.Object.FileType == "Content") {
            if (objectData.Object.TagDisplay != "Gauge") {
                objectData.Object.TagDisplay = "Tags";
            }
        }
        if (!global_isDesignTimeMode && (fileType == FILE_TYPE_I5CHART || fileType == FILE_TYPE_QUERY ||
                fileType == FILE_TYPE_MDO || fileType == FILE_TYPE_I5GRID || fileType == FILE_TYPE_I5SPCCHART || (fileType == "Tags" &&
                    objectData.Object.FileType != "Content" && (objectData.Object.TagDisplay === undefined ||
                        objectData.Object.TagDisplay == null || objectData.Object.TagDisplay != "Tags")))) {
            sap.ui.core.BusyIndicator.show(0);
        }
        // it's not always present? - hotfixing
        if (typeof ceController !== 'undefined') {
            ceController.deleteObject(onDropped.getId());
            ceController.deleteObject(onDropped.getParent().getId());
        }
        // remove model which is set only when the menu is opened
        onDropped.setModel(undefined);
        //setting the custom data of the dropped object
        onDropped.data("Object", jQuery.extend(true, {}, objectData.Object));
        onDropped.data("TitleInfo", jQuery.extend(true, {}, objectData.TitleInfo));
        onDropped.data("TagArray", jQuery.extend(true, [], tagArray));
        onDropped.data("QueryArray", jQuery.extend(true, [], queryArray));
        onDropped.data("SVGArray", jQuery.extend(true, [], SVGArray));
    	//Following line added to copy script and userIncludedFiles for control's events  ---------------------------	
		if(objectData.globalUserScript!=undefined)
			onDropped.data("globalUserScript",objectData.globalUserScript );
		if(objectData.globalUserFiles!=undefined)
			onDropped.data("globalUserFiles",objectData.globalUserFiles );
		
        /*1. If its first user element, then objectData.Object will not contain BackgroundCellHeight & BackgroundCellWidth
        a) if layout is created before dropping the UI element, then 
           --> retrieve CellWidth & CellHeight using jQuery
        b) if a UI element is dropped directly, without creating layout, then 
           --> retrieve CellWidth using width of whole "Design-Layout" div
           --> retrieve CellHeiht from onDropped cell's height, which is predetermined
           --> Initialise DesignTimeCellHeight, DesignTimeCellWidth, HeightResizeFactor, WidthResizeFactor,  BackgroundCellHeight, BackgroundCellWidth
    
        2. If its not a first UI element, then we will first check if we are doing either Merge or Unmerge operation*/

        if (objectData.Object.FileType == FILE_TYPE_UIELEMENT) {

            if (objectData.Object.BackgroundCellHeight == undefined && objectData.Object.BackgroundCellWidth == undefined) {
                //This code is executed when no layout is created(Dropping the UIELement from UIControl or Opening the file having UIElement)
                if (onDropped.data("Object").CellHeight == undefined) {
                    //.size() defines no layout
                    if (jQuery.sap.byId(onDropped.getId()).size() == 0) {
                        onDropped.data("Object").CellHeight = parseInt((sap.ui.getCore().byId(onDropped.getId()).getHeight()).substring(0, sap.ui.getCore().byId(onDropped.getId()).getHeight().lastIndexOf("px")));
                    } else {
                        onDropped.data("Object").CellHeight = jQuery.sap.byId(onDropped.getId()).height();
                    }
                } else {
                    if ($('#' + onDropped.getId() + '').height() != null)
                        onDropped.data("Object").CellHeight = $('#' + onDropped.getId() + '').height();
                }
                if (onDropped.data("Object").CellWidth == undefined) {
                    //the div element "p0p0" will not be added to DOM structure when we directly drop the UIElement. Take the width of "Design-Layout" div
                    if (jQuery.sap.byId(onDropped.getId()).size() == 0) {
                        onDropped.data("Object").CellWidth = jQuery.sap.byId("Design-Layout").width();
                    } else {
                        onDropped.data("Object").CellWidth = jQuery.sap.byId(onDropped.getId()).width();
                    }
                } else {
                    if (onDropped.Width != undefined || onDropped.Width != null) {
                        onDropped.data("Object").CellWidth = parseInt(onDropped.Width);
                    }
                }

                //Initialise the screen design time parameters for UI Elements. These values will change when the user opens a pre saved dashboard, inside UIElementsView.view.js
                onDropped.data("Object").DesignTimeCellHeight = onDropped.data("Object").CellHeight;
                onDropped.data("Object").DesignTimeCellWidth = onDropped.data("Object").CellWidth;
                onDropped.data("Object").HeightResizeFactor = 1;
                onDropped.data("Object").WidthResizeFactor = 1;
                onDropped.data("Object").BackgroundCellHeight = 20; //considering reference grid height as 20px
                onDropped.data("Object").BackgroundCellWidth = 50; //considering reference grid width as 50px

            } else {
                //This code is executed when merge two or more cell( no resizing should happen to the cell)
                if (onDropped.Merge != undefined && onDropped.Merge == true) {

                    onDropped.data("Object").DesignTimeCellWidth = parseInt(onDropped.Width);
                    onDropped.data("Object").DesignTimeCellHeight = jQuery.sap.byId(onDropped.getId()).height();
                    onDropped.data("Object").HeightResizeFactor = 1;
                    onDropped.data("Object").WidthResizeFactor = 1;
                    onDropped.data("Object").BackgroundCellHeight = 20; //considering reference grid height as 20px
                    onDropped.data("Object").BackgroundCellWidth = 50; //considering reference grid width as 50px

                } else {
                    //Writing both the cases separately because onDropped.Merge will be holding value even after merge
                    if (onDropped.Merge != undefined && onDropped.Merge == false) {
                        onDropped.data("Object").DesignTimeCellWidth = parseInt(onDropped.Width);
                        onDropped.data("Object").DesignTimeCellHeight = jQuery.sap.byId(onDropped.getId()).height();
                        onDropped.data("Object").HeightResizeFactor = 1;
                        onDropped.data("Object").WidthResizeFactor = 1;
                        onDropped.data("Object").BackgroundCellHeight = 20; //considering reference grid height as 20px
                        onDropped.data("Object").BackgroundCellWidth = 50; //considering reference grid width as 50px

                    } else {
                        //Code is executed when the dropping of UIElement happens over layout
                        if (sap.ui.getCore().byId(onDropped.getId()).getHeight().lastIndexOf("px") != -1) {
                            onDropped.data("Object").CellHeight = parseInt((sap.ui.getCore().byId(onDropped.getId()).getHeight()).substring(0, sap.ui.getCore().byId(onDropped.getId()).getHeight().lastIndexOf("px")));
                        }
                        //If the height or width in %, we need to get actual height or width in pixel
                        if (sap.ui.getCore().byId(onDropped.getId()).getHeight().lastIndexOf("%") != -1) {
                            if (jQuery("#" + onDropped.getId() + "").height() != undefined)
                                onDropped.data("Object").CellHeight = jQuery("#" + onDropped.getId() + "").height();
                            else
                                onDropped.data("Object").CellHeight = parseInt((sap.ui.getCore().byId(onDropped.getId()).getHeight()).substring(0, sap.ui.getCore().byId(onDropped.getId()).getHeight().lastIndexOf("%")));
                        }
                        if (sap.ui.getCore().byId(onDropped.getId()).getWidth().lastIndexOf("%") != -1) {
                            if (jQuery("#" + onDropped.getId() + "").width() != undefined)
                                onDropped.data("Object").CellWidth = jQuery("#" + onDropped.getId() + "").width();
                            //                          else
                            //                          onDropped.data("Object").CellWidth = parseInt((sap.ui.getCore().byId(onDropped.getId()).getWidth()).substring(0, sap.ui.getCore().byId(onDropped.getId()).getWidth().lastIndexOf("%")));
                        }
                        //This takes care when the merged cell is dragged to some smaller cell
                        if (onDropped.MergeCellDragged != undefined && onDropped.MergeCellDragged == true)
                            onDropped.data("Object").DesignTimeCellWidth = onDropped.data("Object").CellWidth;
                        //This takes care of re-dragging or resizing of element out of the layout width
                        if (onDropped.data("Object").ElementRedragged == false || onDropped.data("Object").ElementResized == false) {
                            onDropped.data("Object").DesignTimeCellWidth = onDropped.data("Object").CellWidth;
                        }
                        //                      onDropped.data("Object").DesignTimeCellHeight = onDropped.data("Object").CellHeight ;
                    }
                }

            }

            var htmlScript = addContentHtmlCode(onDropped.data(), onDropped.sId, false);
            if (htmlScript != null && htmlScript != "") {
                var myHTML = new sap.ui.core.HTML();
                myHTML.setContent(htmlScript);
                myHTML.attachAfterRendering(function() {
                    var layoutId = this.getParent().getId();
                    $("#" + layoutId).css("bottom", "20px");
                }, myHTML);

                var layout = new sap.ui.commons.layout.AbsoluteLayout();
                layout.data("Object", objectData.Object);
                layout.addContent(myHTML);
                layout.setPositionOfChild(myHTML, {
                    top: contentTopMargin + "px",
                    bottom: "1px",
                    left: "1px",
                    right: "1px"
                });

                layout.addEventDelegate({
                    onAfterRendering: function(oEvent) {
                        var src = oEvent.srcControl;
                        $("#" + src.getId()).attr("aria-label", src.data().Object.Name);
                    }
                });

                onDropped.addContent(layout);
            }

            if (objectData.Object.Controls.length == 0) {
                var UIElementFlag = true;
                objectData.Object = undefined;
            }

        } else if (global_isDesignTimeMode) {
            //calculate the dimensions for the image
            var orgWidth = jQuery("#" + onDropped.getId()).width();
            var orgHeight = jQuery("#" + onDropped.getId()).height();
            orgWidth = Math.round(orgWidth * 100) / 100;
            orgHeight = Math.round(orgHeight * 100) / 100;
            var height = "70%";
            var width = "70%";
            var topPosition = orgHeight * 0.15;
            var leftPosition = orgWidth * 0.15;
            /*if (orgWidth < orgHeight) {
                width = "100%";
                if (256 < orgHeight) {
                    height = (orgWidth/orgHeight)*100 + "%"; 
                    }else{
                    height = "100%";
                    }
                topPosition = (orgHeight - orgWidth)/2;
            } else if (orgWidth > orgHeight){
                height = "100%";
                if (256 < orgWidth) {
                    width = (orgHeight/orgWidth)*100 + "%"; 
                } else {
                    width = "100%";
                }
                leftPosition = (orgWidth - orgHeight)/2;
            } else {
                width = "100%";
                height = "100%";
            }
            */
            //displaying tags as graph and their names
            if (objectData.Object.TagDisplay !== undefined && objectData.Object.TagDisplay != null && objectData.Object.TagDisplay == "Graph") {
                var tagList = new sap.ui.commons.layout.VerticalLayout();
                var imageTooltip = "";
                for (var i = 0; i < tagArray.length; i++) {
                    var tagNamespace = new sap.ui.commons.Label();
                    tagNamespace.setDesign(sap.ui.commons.LabelDesign.Bold);
                    tagNamespace.setTextAlign(sap.ui.core.TextAlign.Center);
                    tagNamespace.setText(tagArray[i].Namespace);
                    tagNamespace.addStyleClass("contentPath");
                    imageTooltip += tagArray[i].Namespace + ", ";
                    tagList.addContent(tagNamespace);
                }
                imageTooltip = imageTooltip.substr(0, imageTooltip.length - 2);
                var oImage = new sap.ui.commons.Image();
                oImage.setSrc("Images/CompositionEnvironment/DisplayTemplate_1.png");
                oImage.setTooltip(imageTooltip);
                oImage.setDecorative(false);
                oImage.setWidth(width);
                oImage.setHeight(height);

                onDropped.addContent(tagList, {
                    top: contentTopMargin + "px",
                    left: "0px"
                });
                onDropped.addContent(oImage, {
                    top: topPosition + "px",
                    left: leftPosition + "px"
                });

            } else if (objectData.Object.FileType == FILE_TYPE_VDS) {

                var imageTooltip = "";
                imageTooltip = removeExtension(objectData.Object.Name);
                var oImage = new sap.ui.commons.Image();
                oImage.setSrc("Images/CompositionEnvironment/visual_design_streaming_file_grey_256.png");
                oImage.setTooltip(imageTooltip);
                oImage.setDecorative(false);
                oImage.setWidth(width);
                oImage.setHeight(height);

                onDropped.addContent(tagList, {
                    top: contentTopMargin + "px",
                    left: "0px"
                });
                onDropped.addContent(oImage, {
                    top: topPosition + "px",
                    left: leftPosition + "px"
                });
            } else if (isImage(objectData.Object.Name)) {
                populateCellContentForLiveMode(onDropped, objectData);
                if (objectData.Object.FileType == "Content") {
                    var filePath = new sap.ui.commons.Label(generateGuid());
                    filePath.setDesign(sap.ui.commons.LabelDesign.Bold);
                    filePath.setTextAlign(sap.ui.core.TextAlign.Center);
                    filePath.setText(objectData.Object.Path + "/" + removeExtension(objectData.Object.Name));
                    filePath.addStyleClass("contentPath");
                    onDropped.addContent(filePath, {
                        top: contentTopMargin + "px",
                        left: "0px"
                    });
                }
            } else {

                if (objectData.Object != null && objectData.Object.isPlugin == true) {
                    var designHtml;
                    //  return CurrentExtension.extension.generateHTML(templateData);
                    var JSClass = extensionNameClassMap[objectData.Object.extensionName];
                    if (extensionJSFiles.indexOf('/XMII/CM' + JSClass.getMainJSFile()) == -1) {
                        extensionJSFiles.push('/XMII/CM' + JSClass.getMainJSFile());
                    }
                    var utilJSFiles = JSClass.getUtilJSFile();
                    var jsArray = utilJSFiles.split(',');
                    for (i = 0; i < jsArray.length; i++) {
                        CEPluginHandler.loadScript('/XMII/CM' + jsArray[i]);
                        var value = '/XMII/CM' + jsArray[i];
                        if (extensionJSFiles.indexOf(value) == -1) {
                            extensionJSFiles.push(value);
                        }
                    }
                    designHtml = JSClass.renderModelDesign(objectData.Object);
                    if (designHtml != null && designHtml != "") {
                        var myHTML = new sap.ui.core.HTML();
                        myHTML.setContent(designHtml);
                        myHTML.attachAfterRendering(function() {
                            var layoutId = this.getParent().getId();
                            $("#" + layoutId).css("bottom", "1px");
                            ceController.updateUI5Object(onDropped.sId);
                        }, myHTML);
                        var layout = new sap.ui.commons.layout.AbsoluteLayout();
                        layout.data("Object", objectData.Object);
                        //layout.data = objectData.data;
                        layout.addContent(myHTML);
                        layout.setPositionOfChild(myHTML, {
                            top: contentTopMargin + "px",
                            bottom: "1px",
                            left: "1px",
                            right: "1px"
                        });

                        layout.addEventDelegate({
                            onAfterRendering: function(oEvent) {
                                var src = oEvent.srcControl;
                                var objectName = src.data().Object.Name;
                                if (objectName.indexOf('.') != -1) {
                                    objectName = objectName.slice(0, objectName.indexOf('.'));
                                }
                                $("#" + src.getId()).attr("aria-label", objectName + " " + src.data().Object.FileType);
                            }
                        });

                        onDropped.addContent(layout);

                    }
                } else {


                    var filePath = new sap.ui.commons.Label(generateGuid());
                    filePath.setDesign(sap.ui.commons.LabelDesign.Bold);
                    filePath.setTextAlign(sap.ui.core.TextAlign.Center);
                    if (isObjectNotNull(objectData.Object.Path)) {
                        filePath.setText(objectData.Object.Path + "/" + removeExtension(objectData.Object.Name));
                    } else {
                        filePath.setText(objectData.Object.Name);
                    }
                    filePath.addStyleClass("contentPath");
                    var imageAddress = determineDropImageForNode(objectData.Object.FileType);
                    if (isImage(objectData.Object.Name)) {
                        var path = objectData.Object.Path.replace("/WEB", "");
                        imageAddress = window.location.protocol + "//" + window.location.host + "/XMII/CM/" + path + "/" + encodeURIComponent(objectData.Object.Name);
                        width = "100%";
                        height = "100%";
                    } else if (isXCelcius(objectData.Object.Name)) {
                        imageAddress = "Images/CompositionEnvironment/Xcelsius_File_256.png";
                    }
                    var oImage = new sap.ui.commons.Image("ceimg" + generateGuid());
                    oImage.setSrc(imageAddress);
                    oImage.setTooltip(objectData.Object.Path + "/" + removeExtension(objectData.Object.Name));
                    oImage.setDecorative(false);
                    oImage.setWidth(width);
                    oImage.setHeight(height);
                    filePath.setLabelFor(oImage);
                    onDropped.addContent(filePath, {
                        top: contentTopMargin + "px",
                        left: "0px"
                    });
                    if (!isSVGFile(objectData.Object.Name)) {
                        onDropped.addContent(oImage, {
                            top: contentTopMargin + "px",
                            left: "1px",
                            right: "1px",
                            bottom: "1px"
                        });
                    } else {
                        jQuery.sap.require("CECustomControls.svgControl");
                        var path = objectData.Object.Path.replace("/WEB", "");
                        imageAddress = window.location.protocol + "//" + window.location.host + "/XMII/CM/" + path + "/" + encodeURIComponent(objectData.Object.Name);
                        var svgCntrl = new com.sap.xmii.ui.SVGControl("cesvg" + generateGuid(), {
                            url: imageAddress
                        });
                        onDropped.addContent(svgCntrl, {
                            top: contentTopMargin + "px",
                            left: "0px",
                            right: "0px",
                            bottom: "0px"
                        });

                    }
                    if (!isImage(objectData.Object.Name) && !isSVGFile(objectData.Object.Name)) {
                        onDropped.setPositionOfChild(oImage, {
                            top: topPosition + "px",
                            left: leftPosition + "px"
                        });
                    }
                    if (onDropped.data("Object").FileType == "Content") {
                        onDropped.data("Object").TagDisplay = "Tags";
                        ObjectsDropUtils.createContextMenuObjectsOnPanel(onDropped); //--> defined in objectsDropUtils.js 
                        /*if(tagArray != null && tagArray.length > 0)
                            createTagObjectsLayoutFromJSON(tagArray, onDropped);*/
                    }

                    $("[id='" + oImage.getId() + "']").each(function() {
                        $(this).height($(this).parent().height() - contentTopMargin);
                    });

                }
            }
            //The following code is not working
            //          onDropped.addEventDelegate({
            //              onAfterRendering : function () {
            //                  hideBusyIndicator();
            //              }
            //          });
            hideBusyIndicator();
        } else {
            populateCellContentForLiveMode(onDropped, objectData);
        }

        addToolBar(onDropped);

        //making the cell draggable
        onDropped.data("celldraggable", "true", true);
        jQuery.sap.byId(onDropped.getId()).attr("data-celldraggable", "true");
        markDraggableForCellElement();
    }

    if ((objectData != null && objectData.Object != null && typeof(objectData.Object) != 'undefined') || (tagArray != null && tagArray.length > 0)) {
        createMenu(onDropped);
    }
    if (objectData != null && objectData.TitleInfo != null && objectData.TitleInfo.ShowOrNot) {
        createTitle(onDropped);
    }

    if (UIElementFlag == true) {
        createMenu(onDropped);
        UIElementFlag = false;
    }

}


/**
 * This function is responsible for generating the source code for live mode
 * After the source code has been generated, it has been put into the HTML Control and this control
 * is finally added in the cell which is onDropped
 * @param onDropped
 * @param objectData
 * @return
 */
function populateCellContentForLiveMode(onDropped, objectData) {
    var htmlScript;
    if (objectData.Object.FileType === 'BaseKPIDefinition' || objectData.Object.FileType === 'CompositeKPIDefinition') {

        htmlScript = addKPIContentHTML(objectData.Object, onDropped.sId);

        //set boolean property in the onDropped.data() to show or hide the 'Configure Display Template' menu 
        if (objectData.Object != undefined && objectData.Object.Config != undefined && objectData.Object.Config.type == "Table") {
            onDropped.data().Object.EnableDisplayTempPropertiesMenu = false;
        } else {
            onDropped.data().Object.EnableDisplayTempPropertiesMenu = true;
        }

    } else {
        htmlScript = addContentHtmlCode(onDropped.data(), onDropped.sId, false);
    }

    if (htmlScript != null && htmlScript != "") {
        var contentTopMargin = null;
        if (objectData !== undefined && objectData.TitleInfo !== undefined) {
            if (!objectData.TitleInfo.ShowOrNot) {
                contentTopMargin = 31;
            } else {
                if (objectData.TitleInfo.Height != undefined && objectData.TitleInfo.Height != null && objectData.TitleInfo.Height != "") {
                    contentTopMargin = 31 + ((parseFloat(objectData.TitleInfo.Height)) * window.innerHeight) / 100;
                } else {
                    contentTopMargin = 31;
                }
            }
        }
        var myHTML = new sap.ui.core.HTML();
        myHTML.setContent(htmlScript);
        myHTML.attachAfterRendering(function() {
            var layoutId = this.getParent().getId();
            $("#" + layoutId).css("bottom", "1px");
            ceController.updateUI5Object(onDropped.sId);
        }, myHTML);
        var layout = new sap.ui.commons.layout.AbsoluteLayout();
        layout.data("Object", objectData.Object);
        //layout.data = objectData.data;
        layout.addContent(myHTML);
        layout.setPositionOfChild(myHTML, {
            top: contentTopMargin + "px",
            bottom: "1px",
            left: "1px",
            right: "1px"
        });
        layout.addEventDelegate({
            onAfterRendering: function(oEvent) {
                var src = oEvent.srcControl;
                var objectName = src.data().Object.Name;
                if (objectName.indexOf('.') != -1) {
                    objectName = objectName.slice(0, objectName.indexOf('.'));
                }
                $("#" + src.getId()).attr("aria-label", objectName + " " + src.data().Object.FileType);
            }
        });
        onDropped.addContent(layout);

    }

    //  creating the context menu buttons for tags if required
    //if (objectData.Object.TagDisplay !== undefined && objectData.Object.TagDisplay != null && objectData.Object.TagDisplay == "Tags")
    ObjectsDropUtils.createContextMenuObjectsOnPanel(onDropped); //--> defined in objectsDropUtils.js 
    //createTagObjectsLayoutFromJSON(tagArray, onDropped);
}
//create the title bar
function createTitle(panel) {
    var titleLabel = new sap.ui.commons.TextField({
        value: panel.data("TitleInfo").Title,
        width: "100%"
    });
    if (panel.data("TitleInfo").UseSpecificSetting) {
        titleLabel.setTextAlign(panel.data("TitleInfo").TextAlign);
    }
    var title = new sap.ui.commons.InPlaceEdit("cellTitleEditField_" + panel.getId(), {
        content: titleLabel,
        undoEnabled: false,
        change: function() {
            //Condition for Locking mechanism
            if (isFileLocked()) {
                return;
            }
            //push data into the undoArray object which manages only five objects.
            var currentTab = 'nav-Design-Layout';
            pushDataInUndoQueue(currentTab);
            //update title 
            panel.data("TitleInfo").Title = titleLabel.getValue();
            //trigger the change event
            sap.ui.getCore().getEventBus().publish("mii.ui.ce.events", "change");
        }
    }).addStyleClass("Dashboard_title");
    title.addEventDelegate({
        onAfterRendering: function() {
            $('#' + title.getId()).css("width", "100% !important");
            $('#' + title.getId() + " span").css("white-space", "pre");
            if (panel.data("TitleInfo").UseSpecificSetting) {
                var fontSize = panel.data("TitleInfo").FontSize;
                var textColor = panel.data("TitleInfo").TextColor;
                var backgroundColor = panel.data("TitleInfo").BackgroundColor;

                if (fontSize !== undefined && fontSize !== null) {
                    $('#' + title.getId() + " span").css("font-size", fontSize + "vh");
                }
                if (textColor !== undefined && textColor !== null) {
                    $('#' + title.getId() + " span").css("color", textColor);
                }
                if (backgroundColor !== undefined && backgroundColor !== null) {
                    $('#' + title.getId() + " span").css("background-color", backgroundColor);
                }
            }
            var titleHeight = (panel.data("TitleInfo").Height * window.innerHeight) / 100;
            if (titleHeight !== undefined && titleHeight !== null) {
                $('#' + title.getId()).css("height", titleHeight + "px");
                $('#' + title.getId() + " span").css("display", "block");
                $('#' + title.getId() + " span").css("line-height", titleHeight + "px");
                $('#' + title.getId() + " span").css("vertical-align", "middle");
            }
        }
    });
    panel.addContent(title);
    panel.setPositionOfChild(title, {
        top: "31px",
        left: "0px",
        right: "0px"
    });
}

function createMenu(panel) {
    //adding menu button
    var toolBar = sap.ui.getCore().byId(panel.getId() + "ToolBar");
    $('#' + toolBar.getId() + '').attr("tabindex", "0");
    //toolBar.setTooltip(oBundle.getText("XLBL_CONFIGURATION"));

    var object = panel.data("Object");
    var tagArray = panel.data("TagArray");

    var fileType = object != null ? determineFileType(object.FileType) : "";
    var oMenu;
    //below code is for Xacute query converted to SVG.
    if (fileType == "SVGObject" && object.Visualization == "SVG") {
        fileType = "Query";
    }else if(fileType =="Tags" && object.IsVirtualMeter =="true" && object.IsMultipleCols == "true")
    	fileType = "Query";
    switch (fileType) {
        case FILE_TYPE_KPI:
            toolBar.data("QueryObjectData", object);
            createMenuForKPIs(toolBar, object.EnableDisplayTempPropertiesMenu);
            break;
        case FILE_TYPE_QUERY:
            toolBar.data("QueryObjectData", object);
            createMenuForQuery(toolBar, fileType, object.EnableDisplayTempPropertiesMenu, object.EnableDisplayTempPropertiesGridMenu); //defined in ConfigureQuery.js
            break;
        case FILE_TYPE_DISPLAY:
            toolBar.data("QueryObjectData", object);
            createMenuForDisplay(toolBar, fileType); //defined in ConfigureQuery.js
            break;
        case FILE_TYPE_I5CHART:
            toolBar.data("QueryObjectData", object);
            createMenuForDisplay(toolBar, fileType); //defined in ConfigureQuery.js
            break;
        case FILE_TYPE_I5GRID:
            toolBar.data("QueryObjectData", object);
            createMenuForDisplay(toolBar, fileType); //defined in ConfigureQuery.js
            break;
        case FILE_TYPE_I5SPCCHART:
            toolBar.data("QueryObjectData", object);
            createMenuForDisplay(toolBar, fileType); //defined in ConfigureQuery.js
            break;
        case FILE_TYPE_MDO:
            toolBar.data("QueryObjectData", object);
            createMenuForMDO(toolBar, fileType, object.EnableDisplayTempPropertiesMenu, object.EnableDisplayTempPropertiesGridMenu); //defined in ConfigureQuery.js
            break;
        case FILE_TYPE_SVG:
            toolBar.data("QueryObjectData", object);
            createMenuForSVGContent(toolBar, object, object.EnableQueryConfigParamMenu);
            break;
        case FILE_TYPE_TAGS:
            toolBar.data("QueryObjectData", object);
            createMenuForTags(toolBar, panel);
            break;
        case FILE_TYPE_UIELEMENT:
            createMenuForUIElement(toolBar, object, panel);
            break;
        case FILE_TYPE_PIC_GROUP:
            createMenuForPICGroup(toolBar, panel);
            break;
        case FILE_TYPE_VDS:
            createMenuForVDS(toolBar, object, panel);
            break;
        default:
            //      oMenu = new sap.ui.commons.Menu(generateGuid()); 
    }
    panel.addContent(toolBar);
    panel.setPositionOfChild(toolBar, {
        top: "1px"
    });
    // This menu item for clear content is required for all types of content
    //  var clearContentItem = new sap.ui.commons.MenuItem(generateGuid(), 
    //          {text : oBundle.getText("XLBL_CLEAR_CONTENT"), tooltip : oBundle.getText("XLBL_CLEAR_CONTENT")});
    //  clearContentItem.data("MenuItem", "ClearContent");// Unique Identifier for clear content item.
    //  if( oMenu != null)
    //      oMenu.addItem(clearContentItem);
    //  
    // This menu item for clearing the tags 
    /*var clearTagContentItem = new sap.ui.commons.MenuItem(generateGuid(), 
            {text : oBundle.getText("XLBL_CLEAR_TAGS"), tooltip : oBundle.getText("XLBL_CLEAR_TAGS")});
    clearTagContentItem.data("MenuItem", "ClearTags");// Unique Identifier for clear content item.
    if( oMenu != null)
        oMenu.addItem(clearTagContentItem);
    
    //adding event delegate to enable/disable clear tag menu item
        oMenu.addEventDelegate({
        onBeforeRendering: function(oEvent){
        var panel = this.getParent().getParent().getParent().getParent();
        var tagArray = panel.data("TagArray");
        if(tagArray != null && tagArray.length > 0){
            this.setEnabled(true);
        }else{
            this.setEnabled(false);
        }
    }
    }, clearTagContentItem);*/

    //Attach the Menu to the MenuButton
    //  oMenuButton.setMenu(oMenu);

    //Attach an event to raise an alert when an item is selected.
    //  oMenuButton.attachItemSelected(handleMenuItemSelected);

    //  panel.addContent(oMenuButton);
    //  panel.setPositionOfChild(oMenuButton, {bottom:"1px",right:"1px"});

}

/**
 * Creates CopyToClipboard and SetTitle Menu Items in the ToolBar.
 * @param toolBar
 * @param panel
 * @return
 */
function createGeneralMenuItems(toolBar, panelId) {
    // button to copy the cell content to clipboard
    var copyClipboardItem = new sap.ui.commons.Button(generateGuid(), {
        icon: sap.ui.core.IconPool.getIconURI("workflow-tasks"),
        lite: true,
        tooltip: oBundle.getText("XLBL_COPY_TO_CLIPBOARD"),
        press: function() {
            copyToClipboard(panelId);
        }
    });
    toolBar.addItem(copyClipboardItem);

    //adding the title settings item in the menu
    var titleSettingsItem = new sap.ui.commons.Button(generateGuid(), {
        icon: "sap-icon://header",
        lite: true,
        tooltip: oBundle.getText("XLBL_SET_TITLE"),
        press: function() {
            openTitleSettingDialog(toolBar);
        }
    });
    toolBar.addItem(titleSettingsItem);
}

/*
 * This function is reponsible for creating the toolbar buttons when a PIC Group is dropped on the cell
 */
function createMenuForPICGroup(toolBar, panel) {

    //Menu Items for Configure Query.

    var queryParamItem = new sap.ui.commons.Button(toolBar.getId() + "configure-query-picGroup", {
        icon: sap.ui.core.IconPool.getIconURI("Chart-Tree-Map"),
        lite: true,
        visible: false,
        tooltip: oBundle.getText("XLBL_CONFIGURE_QUERY_PARAMETERS"),
        press: function() {
            openConfigureQueryOrDisplayDialog(toolBar, "Query");
        }
    });
    //opening the dialog for configuring the query parameters (ConfigureQuery.js)
    queryParamItem.data("Button", "ConfigureQuery");
    toolBar.addItem(queryParamItem);

    var configureGroupItem = new sap.ui.commons.Button({
        icon: sap.ui.core.IconPool.getIconURI("action-settings"),
        lite: true,
        tooltip: oBundle.getText("XLBL_CONFIGURE_GROUP"),
        press: function(oEvent) {
            PICTreeSettings.createConfigurationDialogForPICTree(panel);
        }
    });
    toolBar.addItem(configureGroupItem);
    //adding Tree and Map Options based on the display
    var groupDisplay = panel.data().Object.GroupDisplay;
    if (!groupDisplay || groupDisplay == "Hierarchy") {
        var showAsMapItem = new sap.ui.commons.Button({
            icon: sap.ui.core.IconPool.getIconURI("map"),
            lite: true,
            tooltip: oBundle.getText("XLBL_SHOW_AS_MAP"),
            press: function(oEvent) {
        	  var currentTab = 'nav-Design-Layout';
              pushDataInUndoQueue(currentTab);
              panel.data("Object").GroupDisplay = "Map";
              populateCellContent(panel, panel.data());
              sap.ui.getCore().getEventBus().publish("mii.ui.ce.events", "change");
            }
        });
        toolBar.addItem(showAsMapItem);
    } else if (groupDisplay && groupDisplay == "Map") {
        var showAsHierarchyItem = new sap.ui.commons.Button({
            icon: sap.ui.core.IconPool.getIconURI("tree"),
            lite: true,
            tooltip: oBundle.getText("XLBL_SHOW_AS_HIERARCHY"),
            press: function(oEvent) {
                var currentTab = 'nav-Design-Layout';
                pushDataInUndoQueue(currentTab);
                panel.data("Object").GroupDisplay = "Hierarchy";
                populateCellContent(panel, panel.data());
                sap.ui.getCore().getEventBus().publish("mii.ui.ce.events", "change");
            }
        });
        toolBar.addItem(showAsHierarchyItem);
    }
    createGeneralMenuItems(toolBar, panel.getId());
}

function createMenuForUIElement(toolBar, object, panel) {
    //Menu Items for UIElements
    var UIParamItem = new sap.ui.commons.Button("" + panel.getId() + "deleteUIElement", {
        icon: sap.ui.core.IconPool.getIconURI("delete"),
        lite: true,
        enabled: false,
        tooltip: oBundle.getText(""),
        press: function() {
            deleteUIElementWithConfirmation();
        }
    });
    toolBar.addItem(UIParamItem);
    createGeneralMenuItems(toolBar, panel.getId());
}

function createMenuForVDS(toolBar, object, panel) {
    var cellId = panel.getId();
    var partConfigButton = new sap.ui.commons.Button("" + cellId + "_PartConfig", {
        icon: sap.ui.core.IconPool.getIconURI("palette"),
        lite: true,
        tooltip: oBundle.getText("XLBL_CONFIGURE_VDS_PART"),
        press: function(oEvent) {
            var vdsViewer = sap.ui.getCore().byId("viewer" + cellId);
            if (vdsViewer.selectedNode !== undefined && vdsViewer.nodeName === undefined) {
                var oDvl_temp = vdsViewer.getGraphicsCore()._dvl;
                vdsViewer.nodeName = vdsViewer.getGraphicsCore()._dvl.Scene.RetrieveNodeInfo(oDvl_temp.Settings.LastLoadedSceneId, vdsViewer.selectedNode, DvlEnums.DVLNODEINFO.DVLNODEINFO_NAME).NodeName;
            }
            var rulesConfigDialog = new TagExprRulesConfig(panel, vdsViewer.nodeName, vdsViewer.selectedNode);
            rulesConfigDialog.createConfigDialog();
        }
    });
    toolBar.addItem(partConfigButton);
    var vdsSettingsItem = new sap.ui.commons.Button("" + cellId + "_settingMenu", {
        icon: "sap-icon://settings",
        lite: true,
        tooltip: oBundle.getText("XLBL_SETTING"),
        press: function() {
            openVDSSettingDialog(toolBar, panel);
        }
    });
    toolBar.addItem(vdsSettingsItem);
    createGeneralMenuItems(toolBar, panel.getId());
}

function openVDSSettingDialog(toolBar, panel) {

    if (sap.ui.getCore().byId("vdsSettingDialog")) {
        sap.ui.getCore().byId("vdsSettingDialog").destroy();
    }
    var vdsSettingDialog = new sap.ui.commons.Dialog("vdsSettingDialog", {
        modal: true,
        width: "30rem",
        title: oBundle.getText("XLBL_SETTING"),
        tooltip: oBundle.getText("XLBL_SETTING")
    }).addStyleClass("sapUiSizeCompact");

    var showCarousel;
    var retainViewPort;
    if (isObjectNotNull(panel.data().Object.ShowCarouselRuntime)) {
        showCarousel = panel.data().Object.ShowCarouselRuntime;
    } else {
        showCarousel = false;
    }
    if (isObjectNotNull(panel.data().Object.RetainViewPort)) {
        retainViewPort = panel.data().Object.RetainViewPort
    } else {
        retainViewPort = false;
    }

    var applyButton = new sap.ui.commons.Button("vdsSettingApplyButton", {
        text: oBundle.getText("XBUT_APPLY"),
        press: function() {
            //Condition for Locking mechanism
            var currentTab = 'nav-Design-Layout';
            pushDataInUndoQueue(currentTab);

            panel.data().Object.ShowCarouselRuntime = showCarousel;
            panel.data().Object.RetainViewPort = retainViewPort;
            sap.ui.getCore().getEventBus().publish("mii.ui.ce.events", "change");
            vdsSettingDialog.close();
        }
    });

    var cancelButton = new sap.ui.commons.Button("vdsSettingCancelButton", {
        text: oBundle.getText("XBUT_CANCEL"),
        press: function() {
            vdsSettingDialog.close();
        }
    });

    var data = [{
        id: "showCarouselRuntime",
        text: oBundle.getText("XFLD_SHOW_STEP_INFO"),
        input: "checkbox",
        value: panel.data().Object.ShowCarouselRuntime
    }, {
        id: "retainViewPortInfo",
        text: oBundle.getText("XFLD_RETAIN_VIEWPORT"),
        input: "checkbox",
        value: panel.data().Object.RetainViewPort
    }];

    var oModel = new sap.ui.model.json.JSONModel();
    oModel.setData(data);

    var contentLayout = new sap.ui.commons.layout.MatrixLayout("vdsSetting", {
        layoutFixed: true,
        width: "100%",
        columns: 2,
        widths: ["45%", "55%"]
    });

    contentLayout.setModel(oModel);

    contentLayout.bindAggregation("rows", "/", function(sId, oContext) {
        var value = oContext.getProperty("input");
        switch (value) {
            case "checkbox":
                return new sap.ui.commons.layout.MatrixLayoutRow({
                    cells: [new sap.ui.commons.layout.MatrixLayoutCell({
                        content: new sap.ui.commons.Label({
                            text: "{text}",
                            textAlign: sap.ui.core.TextAlign.Left,
                            design: sap.ui.commons.LabelDesign.Standard,
                            width: "100%"
                        })
                    }), new sap.ui.commons.layout.MatrixLayoutCell({
                        content: new sap.ui.commons.CheckBox(oContext.getProperty("id"), {
                            checked: "{value}"
                        })
                    })]
                });
        }
    });
    sap.ui.getCore().byId("showCarouselRuntime").attachChange(setShowCarouselRuntime);
    sap.ui.getCore().byId("retainViewPortInfo").attachChange(setRetainViewPort);
    vdsSettingDialog.addContent(contentLayout);
    vdsSettingDialog.addButton(applyButton);
    vdsSettingDialog.addButton(cancelButton);
    vdsSettingDialog.attachClosed(handleClosedEvent);
    vdsSettingDialog.open();
    hideApplets();

    function setShowCarouselRuntime() {
        if (sap.ui.getCore().byId("showCarouselRuntime").getChecked()) {
            showCarousel = true;
        } else {
            showCarousel = false;
        }
    }

    function setRetainViewPort() {
        if (sap.ui.getCore().byId("retainViewPortInfo").getChecked()) {
            retainViewPort = true;
        } else {
            retainViewPort = false;
        }
    }

    function handleClosedEvent() {
        vdsSettingDialog.detachClosed(handleClosedEvent);
        showApplets();
        vdsSettingDialog.destroy();
    }
}


/*
 * This function is responsible for creating the menu item trend and current if the tags are present in the cell
 */
function createMenuForTags(toolBar, panel) {

    var panelData = panel.data();
    var panelId = panel.getId();

    if (panelData !== undefined && panelData != null) {
        if (toolBar.getItems().length == 0) {
            //Menu Item for current.
            var currentModeItem = new sap.ui.commons.Button({
                icon: sap.ui.core.IconPool.getIconURI("line-chart-dual-axis"),
                lite: true,
                tooltip: oBundle.getText("XLBL_CURRENT_MODE"),
                press: function(oEvent) {
                    var currentTab = 'nav-Design-Layout';
                    pushDataInUndoQueue(currentTab);
                    panel.data("Object").TagDisplay = "Tags";
                    var tagArray = panel.data("TagArray");
                    for (var i = 0; i < tagArray.length; i++) {
                        var offset = i * 10;
                        offset = parseFloat((parseInt(offset)) / (offset.length * 10));
                        tagArray[i].xPos = 0.20;
                        tagArray[i].yPos = 0.20;
                        if(tagArray[i].IsVirtualMeter == "true"){
                        	tagArray[i].VirtualTag = true;
                        }else{
                        	tagArray[i].VirtualTag = false;
                        }
                        if(tagArray[i].TagAlias == null){
                        	tagArray[i].TagAlias = tagArray[i].Name;
                        }
                    }
                    populateCellContent(panel, panel.data());
                    sap.ui.getCore().getEventBus().publish("mii.ui.ce.events", "change");

                }
            });
            currentModeItem.data("Button", "CurrentMode");
            toolBar.addItem(currentModeItem);

            var displayParamItem = new sap.ui.commons.Button(generateGuid(), {
                icon: sap.ui.core.IconPool.getIconURI("area-chart"),
                lite: true,
                tooltip: oBundle.getText("XLBL_CONFIGURE_DISPLAY_PARAMETERS"),
                press: function() {
                    openConfigureQueryOrDisplayDialog(toolBar, "i5Chart");
                }
            });
            //opening the dialog for configuring the tag trend display (ConfigureQuery.js)
            displayParamItem.data("Button", "ConfigureDisplay");
            toolBar.addItem(displayParamItem);

            var queryParamItem = new sap.ui.commons.Button(generateGuid(), {
                icon: sap.ui.core.IconPool.getIconURI("Chart-Tree-Map"),
                lite: true,
                tooltip: oBundle.getText("XLBL_CONFIGURE_QUERY_PARAMETERS"),
                press: function() {
                    openConfigureQueryOrDisplayDialog(toolBar, "Query");
                }
            });
            //opening the dialog for configuring the query parameters (ConfigureQuery.js)
            queryParamItem.data("Button", "ConfigureQuery");
            toolBar.addItem(queryParamItem);

            //Menu item for Add Area
            var addAreaItem = new sap.ui.commons.Button(generateGuid(), {
                icon: sap.ui.core.IconPool.getIconURI("detail-view"),
                lite: true,
                tooltip: oBundle.getText("XLBL_ADD_AREA"),
                press: function() {
                    enableAreaCreation = true;
                    createDialogForDisplayingImage(panelId); // ---> canvasUtils.js
                }
            });
            addAreaItem.data("Button", "AddArea");
            toolBar.addItem(addAreaItem);

            var editAreaItem = new sap.ui.commons.Button(generateGuid(), {
                icon: sap.ui.core.IconPool.getIconURI("edit"),
                lite: true,
                tooltip: oBundle.getText("XLBL_EDIT_AREA"),
                press: function() {
                    editArea(); //--> canvasUtils.js
                }
            });
            editAreaItem.data("Button", "EditArea");
            toolBar.addItem(editAreaItem);

            //Menu Items for Configure Query.
            var deleteAreaItem = new sap.ui.commons.Button(generateGuid(), {
                icon: sap.ui.core.IconPool.getIconURI("delete"),
                lite: true,
                tooltip: oBundle.getText("XLBL_DELETE_AREA"),
                press: function() {
                    deleteArea(); //--> canvasUtils.js
                }
            });
            deleteAreaItem.data("Button", "DeleteArea");
            toolBar.addItem(deleteAreaItem);

            var areaSettingsItem = new sap.ui.commons.Button(generateGuid(), {
                icon: sap.ui.core.IconPool.getIconURI("action-settings"),
                lite: true,
                tooltip: oBundle.getText("XLTP_AREA_SETTINGS"),
                press: function() {
                    AreaSettings.createConfigurationDialogForArea(panel);
                }
            });
            areaSettingsItem.data("Button", "AreaSettings");
            toolBar.addItem(areaSettingsItem);

            //Menu Item for Configure Display Parameters.
            var trendModeItem = new sap.ui.commons.Button({
                icon: sap.ui.core.IconPool.getIconURI("line-chart"),
                lite: true,
                tooltip: oBundle.getText("XLBL_TREND_MODE"),
                press: function() {
                    showBusyIndicator();
                    var currentTab = 'nav-Design-Layout';
                    pushDataInUndoQueue(currentTab);
                    var newObject = {};
                    panel.data("Object", newObject);
                    panel.data("Object").TagDisplay = "Graph";
                    panel.data("Object").FileType = "Tags";
                    var tagArray = panel.data("TagArray");
                    for(var i=0; i<tagArray.length; i++){
                    	var tagArrays = [];
                    	var tagData = tagArray[i];
	                	tagArrays.push(tagData);
	                	if(tagData.VirtualTag){
		                	var delimitedData = applyNamespaceDelimiterForTags(tagArrays, true);
		                	var params = {"QueryTemplate":"Predefined/DefaultCatalogHistoryQuery","content-type":"text/json","SelectedObjects":delimitedData.selectedObjects,
		                			"Mode":"Current","NamespaceDelimeter":delimitedData.delimiter};
		                	data = getDataFromServer(XMII_ILLUMINATOR_URL, params);
		                	var IsMultipleCols;
		                	if(data.Rowsets.Rowset.length > 1){
		                		IsMultipleCols  = true;
		                	}else if(data.Rowsets.Rowset[0].Columns.Column.length ==2){
		                		IsMultipleCols = false;
		                	}else{
		                		IsMultipleCols = true;
		                	}
		                	tagArray[i].IsMultipleCols = IsMultipleCols;
		                	if(IsMultipleCols ==  false){
		                		panel.data("Object").TransactionPath = tagData.TransactionPath;
		                		panel.data("Object").Id = tagData.Id;
		                	}
	                	}
                    }
                    panel.data("Object").Name = panel.data("TagArray")[0].Namespace;
                    for (var i = 0; i < tagArray.length; i++) {
                        tagArray[i].xPos = 20;
                        tagArray[i].yPos = 20;
                    }
                    getDefaultListParameters(panel.data());
                    populateCellContent(panel, panel.data());
                    sap.ui.getCore().getEventBus().publish("mii.ui.ce.events", "change");
                }
            });
            trendModeItem.data("Button", "TrendMode");
            toolBar.addItem(trendModeItem);
            createGeneralMenuItems(toolBar, panelId);
        }

        var items = toolBar.getItems();
        var trendItem;
        var currentItem;
        var areaItem;
        var deleteItem;
        var editItem;
        var areaSettingsItem;

        if (toolBar.getItems().length > 0) {
            for (var i = 0; i < items.length; i++) {
                if (items[i].data("Button") == "CurrentMode") {
                    currentItem = items[i];
                } else if (items[i].data("Button") == "ConfigureDisplay") {
                    displayParamItem = items[i];
                } else if (items[i].data("Button") == "ConfigureQuery") {
                    queryParamItem = items[i];
                } else if (items[i].data("Button") == "TrendMode") {
                    trendItem = items[i];
                } else if (items[i].data("Button") == "AddArea") {
                    areaItem = items[i];
                } else if (items[i].data("Button") == "DeleteArea") {
                    deleteItem = items[i];
                } else if (items[i].data("Button") == "EditArea") {
                    editItem = items[i];
                } else if (items[i].data("Button") == "AreaSettings") {
                    areaSettingsItem = items[i];
                }
            }
            deleteItem.setVisible(false);
            editItem.setVisible(false);
            areaSettingsItem.setVisible(false);
            if (panel.data("Object").TagDisplay !== undefined && panel.data("Object").TagDisplay == "Graph") {
                trendItem.setVisible(false);
                currentItem.setVisible(true);
                displayParamItem.setVisible(true);
                queryParamItem.setVisible(true);
                areaItem.setVisible(false);
            }
            if (panel.data("Object").TagDisplay !== undefined && (panel.data("Object").TagDisplay == "Tags" || panel.data("Object").TagDisplay == "Gauge")) {
                currentItem.setVisible(false);
                displayParamItem.setVisible(false);
                queryParamItem.setVisible(false);
                trendItem.setVisible(true);
                areaItem.setVisible(true);
            }

            if (panel.data("Object").Path === undefined || panel.data("Object").Path === null || !isImage(panel.data("Object").Name)) {
                areaItem.setVisible(false);
            }

            if (panelData.TagArray === undefined || panelData.TagArray == null || panelData.TagArray.length <= 0) {
                trendItem.setVisible(false);
                currentItem.setVisible(false);
                displayParamItem.setVisible(false);
                queryParamItem.setVisible(false);
            }
        }
    }

}

function createMenuForKPIs(toolBar, isVizTypeAsChart) {
    var panel = toolBar.getId();
    var panelId = panel.substr(0, 4);
    var object = toolBar.data("QueryObjectData");
    if (typeof String.prototype.endsWith != 'function') {
        String.prototype.endsWith = function(str) {
            return this.substring(this.length - str.length, this.length) === str;
        };
    };

    var KPIItem = new sap.ui.commons.Button(generateGuid(), {
        icon: sap.ui.core.IconPool.getIconURI("table-view"),
        lite: true,
        tooltip: oBundle.getText("XLBL_CONFIGURE_VISUALIZATION"),
        press: function() {
            //opening the dialog for configuring the visualization (ConfigureQueryVisualization.js)
            openKPIConfigDialog(toolBar);
        }
    });
    toolBar.addItem(KPIItem);
    var chartType = "";
    if (null != object.Config && object.Config != undefined) {

        chartType = object.Config.chartType;
    }
    //if the Visualization type selected is 'Chart', then add the menu for 'Configure Display Parameters'
    if (isVizTypeAsChart) {
        if (chartType != "Tile") {
            //Menu Item for Configure Display Parameters.
            var displayParamItem = new sap.ui.commons.Button(generateGuid(), {
                icon: sap.ui.core.IconPool.getIconURI("area-chart"),
                lite: true,
                tooltip: oBundle.getText("XLBL_CONFIGURE_DISPLAY_PARAMETERS"),
                //opening the dialog for configuring the display parameters (ConfigureQuery.js)
                press: function() {
                    openConfigureQueryOrDisplayDialog(toolBar, "i5Chart");
                }
            });
            toolBar.addItem(displayParamItem);
        }
        if (("CatalogQuery" != object.FileType && "PICAnalysis" != object.Mode) && (chartType == "Tile" || chartType == "Gauge")) {
            //Menu for show trend and custom method for tile and guage
            var displayConfig = new sap.ui.commons.Button(generateGuid(), {
                icon: sap.ui.core.IconPool.getIconURI("action-settings"),
                lite: true,
                tooltip: oBundle.getText("XLBL_EVENT"),
                //opening the dialog for configuring the Events (KPIUtils.js)
                press: function() {
                    KPISettings.createConfigurationDialogForTileAndGuage(toolBar);
                }
            });
            toolBar.addItem(displayConfig);
        }
    }
    createGeneralMenuItems(toolBar, panelId);
}

function handleMenuItemSelected(oEvent) {
    if (typeof String.prototype.endsWith != 'function') {
        String.prototype.endsWith = function(str) {
            return this.substring(this.length - str.length, this.length) === str;
        };
    };

    var selectedId = oEvent.getParameter("itemId");
    //  var selObject = this.getParent().getParent().data("Object");
    var oCell = this.getParent().getParent();


    if (selectedId.endsWith("KPIItem1-1")) {
        openKPIConfigDialog(oCell);
    }
    //  if (selectedId.endsWith("KPIItem1-3")) {
    //      openKPITestDialog(oCell);
    //  }   

    //  var menuItem = oEvent.getParameters().item;
    //  var panel = menuItem.getParent().getParent().getParent().getParent();
    //  
    //  if (menuItem.data("MenuItem") == "ClearContent") {
    //      clearCellContent(panel);// call function to clear the cell content (htmlUtils.js)
    //  }

    /*if (menuItem.data("MenuItem") == "ClearTags") {
        removeTagsFromCell(panel); // call function to remove the tags from the cell (htmlUtils.js)
    }*/
}

//function openKPITestDialog(oCell) {
//  var oKpiObj;
//  if (oCell.getModel() == undefined) {
//      oKpiObj = JSON.parse(JSON.stringify(oCell.data("Object")));
//  }
//  else {
//      oKpiObj = oCell.getModel().getData();
//  }
//
//  var oDialogKPIConf = new sap.ui.commons.Dialog({modal : true,
//      title : "KPI Viz Test"}
//  );
//
//  var oViewKPIConf = sap.ui.getCore().byId("kpiTestView");
//  if (oViewKPIConf == undefined) {
//      oViewKPIConf = sap.ui.view( {
//          id : "kpiTestView",
//          viewName : "CompositionEnvironment.Views.KPITest",
//          width : "600px",
//          type : sap.ui.core.mvc.ViewType.JS
//      });
//      var oModel = new sap.ui.model.json.JSONModel();
//      oViewKPIConf.setModel(oModel);
//  }
//  var oKpiObjClone = jQuery.extend(true, {}, oKpiObj);
//  oViewKPIConf.getModel().setData(oKpiObjClone);
//  oViewKPIConf.destroyContent();  
//  oViewKPIConf.addContent(oViewKPIConf.createContent(this));
//
//  var oControllerKPIConf = oViewKPIConf.getController();
//
//  oDialogKPIConf.addContent(oViewKPIConf);
//  oDialogKPIConf.addButton(new sap.ui.commons.Button({
//      text: oBundle.getText("XBUT_APPLY"), 
//      press:function(){
//      oKpiObj.Config = oControllerKPIConf.onApplyClick();
//      oDialogKPIConf.close();     
//  }
//  }));
//  oDialogKPIConf.addButton(new sap.ui.commons.Button({
//      text: oBundle.getText("XBUT_CANCEL"), 
//      press:function(){
//      oDialogKPIConf.close();     
//  }
//  }));    
//  oDialogKPIConf.open();
//}

function openKPIConfigDialog(toolBar) {
    //Dialog is clicked only in Design time
    ssceLayout.isDesign = true;

    var oCell = sap.ui.getCore().byId(toolBar.getId().replace("ToolBar", ""));

    var oKpiObj = toolBar.getParent().getParent().data("Object");
    if (oKpiObj.Config == undefined) {
        /*oKpiObj =  {
                Name: oKpiObj.Name,
                Path: oKpiObj.Path,
                Type: com.sap.xmii.common.util.ChartTypes.LINE
            };*/
        oKpiObj = $.extend(true, {}, createDefaultKPIConfig(oKpiObj), oKpiObj);
        //oKpiObj = createDefaultKPIConfig(oKpiObj);                

        oKpiObj.Config.chartType = com.sap.xmii.common.util.i5ChartTypes.CHART_TYPE_LINE;
    }

    /*//reset the changedProperties array every time the config pop up is opened:
    oKpiObj.Config.changedProperties = [];*/

    var oDialogKPIConf = sap.ui.getCore().byId("kpiConfDialog");
    if (oDialogKPIConf == undefined) {
        oDialogKPIConf = new sap.ui.commons.Dialog("kpiConfDialog", {
            modal: true,
            resizable: false,
            title: oBundle.getText("XLBL_CONFIGURE_KPI")
        });
    }
    var handleClosedForKPIConfig = function() {
        sap.ui.getCore().byId("kpiConfDialog").detachClosed(handleClosedForKPIConfig);
        sap.ui.getCore().byId("kpiConfigView").destroyContent();
    };
    oDialogKPIConf.attachClosed(handleClosedForKPIConfig);
    if (oDialogKPIConf.isOpen()) {
        sap.ui.commons.MessageBox.alert(oBundle.getText("XMSG_KPI_CONF_DLG_OPEN_ERROR"), null, oBundle.getText("XLBL_NOTE"));
        return;
    }

    var oViewKPIConf = sap.ui.getCore().byId("kpiConfigView");
    if (oViewKPIConf == undefined) {
        oViewKPIConf = sap.ui.view({
            id: "kpiConfigView",
            viewName: "CompositionEnvironment.Views.KPIConfig",
            width: "900px",
            type: sap.ui.core.mvc.ViewType.JS
        });
        var oModel = new sap.ui.model.json.JSONModel();
        oViewKPIConf.setModel(oModel);
    }
    oViewKPIConf.setCurrentCell(oCell);
    var oKpiObjClone = jQuery.extend(true, {}, oKpiObj);
    oViewKPIConf.getModel().setData(oKpiObjClone);
    oViewKPIConf.destroyContent();
    oViewKPIConf.addContent(oViewKPIConf.createContent(this));

    var oControllerKPIConf = oViewKPIConf.getController();

    oDialogKPIConf.removeAllButtons();
    oDialogKPIConf.addButton(new sap.ui.commons.Button({
        text: oBundle.getText("XBUT_APPLY"),
        press: function() {
            //Condition for Locking mechanism
            if (isFileLocked()) {
                oDialogKPIConf.close();
                return;
            }
            var previousObject = toolBar.getParent().getParent().data("Object"),
                objectType = determineFileType(previousObject.FileType),
                previousType = "",
                currentType = oControllerKPIConf.getView().getModel().getData().Config.type === "Table" ? "Table" : "kpiChart",
                eventsExisting = cellObjectExistsInEvent(previousObject, toolBar.getParent().getParent().getId());

            if (!previousObject.Config) {
                previousType = objectType === FILE_TYPE_QUERY ? "Table" : "kpiChart";
            } else {
                previousType = previousObject.Config.type === "Table" ? "Table" : "kpiChart";
            }

            var applyVisualizationChange = function() {
                var bValid = oControllerKPIConf.validateTimePeriod() && oControllerKPIConf.validateCategories();
                if (bValid) {
                    var tempCelldata = $.extend(true, {}, previousObject);
                    oKpiObj.Config = oControllerKPIConf.onApplyClick();
                    //                     if(oKpiObj.FileType == "CatalogQuery"&& oKpiObj.Mode == "PICAnalysis") {
                    //                       for(var i=0; i < oKpiObj.Parameters.length; i++){
                    //                         if( oKpiObj.Parameters[i].isChanged) {
                    //                               oKpiObj.Parameters[i].isChanged = false;
                    //                         }

                    //                        }

                    //                     }

                    oDialogKPIConf.close();

                    //if the Visualization type changed, we will delete the event settings
                    if (previousType !== currentType && eventsExisting) {
                        updateEventsOnControlChange(tempCelldata, toolBar.getParent().getParent().getId());
                    }
                    toolBar.getParent().getParent().data("Object").Config = oKpiObj.Config;
                    if (oKpiObj.Config.type == 'Chart') {
                        toolBar.getParent().getParent().data("Object").Visualization = "kpiChart";
                        toolBar.getParent().getParent().data("Object").EnableDisplayTempPropertiesMenu = true;

                        var objectData = toolBar.getParent().getParent().data().Object.DisplayParameters;
                        if (objectData != undefined) {
                            for (var i = 0; i < objectData.length; i++) {
                                if (objectData[i].Context == "12") {
                                    toolBar.getParent().getParent().data().Object.DisplayParameters.splice(i, 1);
                                    break;
                                }
                            }
                        }

                        //getDefaultListParameters(toolBar.getParent().getParent().data(), 8); // htmlUtils.js
                    } else {
                        toolBar.getParent().getParent().data("Object").Visualization = null;
                        toolBar.getParent().getParent().data("Object").EnableDisplayTempPropertiesMenu = false;
                    }

                    if (isObjectNull(toolBar.getParent().getParent().data("Object").InputParameters)) {
                        toolBar.getParent().getParent().data("Object").InputParameters = [];
                    }
                    toolBar.getParent().getParent().data("Object").InputParameters = updateInputParameterArrayForKPI(oKpiObj);
                    populateCellContent(toolBar.getParent().getParent(), toolBar.getParent().getParent().data());
                }
            }

            if (previousType !== currentType && eventsExisting) {
                var message = oBundle.getText("XMSG_CONFIRM_CHANGE_VISUALIZTION");
                sap.ui.commons.MessageBox.show(message, sap.ui.commons.MessageBox.Icon.QUESTION, oBundle.getText("XTIT_ADD_CONFIRM"), [sap.ui.commons.MessageBox.Action.YES, sap.ui.commons.MessageBox.Action.NO], function(sResult) {
                    if (sResult === "YES") {
                        applyVisualizationChange();
                    }
                });
            } else {
                applyVisualizationChange();
            }


        },
        tooltip: oBundle.getText("XLTP_APPLY")
    }));
    oDialogKPIConf.addButton(new sap.ui.commons.Button({
        text: oBundle.getText("CANCEL_BUTTON"),
        press: function() {
            oDialogKPIConf.close();
        },
        tooltip: oBundle.getText("XLTP_CANCEL")
    }));

    oDialogKPIConf.addContent(oViewKPIConf);
    oDialogKPIConf.open();
}

/*****
 * This is a method to create the menu fot the Query configuration
 */
function createMenuForQuery(toolBar, fileType, isVizTypeAsChart, isi5Grid) {

    //If the query is a CatalogQuery with PICAnalysis set as Mode, then KPI menu items should be shown.
    var panel = toolBar.getId();
    var panelId = panel.substr(0, 4);
    //Menu Items for Configure Query.
    var queryParamItem = new sap.ui.commons.Button(generateGuid(), {
        icon: sap.ui.core.IconPool.getIconURI("Chart-Tree-Map"),
        lite: true,
        tooltip: oBundle.getText("XLBL_CONFIGURE_QUERY_PARAMETERS"),
        //opening the dialog for configuring the query parameters (ConfigureQuery.js)
        press: function() {
            openConfigureQueryOrDisplayDialog(toolBar, fileType);
        }
    });
    toolBar.addItem(queryParamItem);
    var templateData = toolBar.data("QueryObjectData");
    if (getQueryMode(templateData, panelId) == "PICAnalysis") {
        templateData.Mode = "PICAnalysis";
        createMenuForKPIs(toolBar, isVizTypeAsChart);
        return;
    }

    //Menu Item for Configure Query Visualization.
    var queryVisualItem = new sap.ui.commons.Button(generateGuid(), {
        icon: sap.ui.core.IconPool.getIconURI("table-view"),
        lite: true,
        tooltip: oBundle.getText("XLBL_CONFIGURE_VISUALIZATION"),
        //opening the dialog for configuring the query visualization (ConfigureQueryVisualization.js)
        press: function() {
            visualizationConfigDialog(toolBar);
        }
    });
    toolBar.addItem(queryVisualItem);
    //if the Visualization type selected is 'Chart', then add the menu for 'Configure Display Parameters'
    if (isVizTypeAsChart) {
        var displayParamItem = new sap.ui.commons.Button(generateGuid(), {
            icon: sap.ui.core.IconPool.getIconURI("area-chart"),
            lite: true,
            tooltip: oBundle.getText("XLBL_CONFIGURE_DISPLAY_PARAMETERS"),
            //opening the dialog for configuring the display parameters (ConfigureQuery.js)
            press: function() {
                openConfigureQueryOrDisplayDialog(toolBar, "i5Chart");
            }
        });
        toolBar.addItem(displayParamItem);
    } else if (isi5Grid) {
        var displayParamItem = new sap.ui.commons.Button(generateGuid(), {
            icon: sap.ui.core.IconPool.getIconURI("area-chart"),
            lite: true,
            tooltip: oBundle.getText("XLBL_CONFIGURE_DISPLAY_PARAMETERS"),
            //opening the dialog for configuring the display parameters (ConfigureQuery.js)
            press: function() {
                openConfigureQueryOrDisplayDialog(toolBar, "i5Grid");
            }
        });
        toolBar.addItem(displayParamItem);
    }
    createGeneralMenuItems(toolBar, panelId);
}


function createMenuForSVGContent(toolBar, fileObject, isQueryConfigMenu) {
    var panel = toolBar.getId();
    var panelId = panel.substr(0, 4);
    if (isSVGFile(fileObject.Name)) { //Menu Item for Configure MDO Visualization.
        var svgConfigureItem = new sap.ui.commons.Button(generateGuid(), {
            icon: sap.ui.core.IconPool.getIconURI("area-chart"),
            lite: true,
            tooltip: oBundle.getText("XLBL_CONFIGURE_SVG"),
            press: function() {
                ConfigureSVGObject.openSVGConfigDialog(toolBar);
                //opening the dialoconfigureSVGObject for configuring the svg(svgConfigureDialog.js)
            }
        });
        toolBar.addItem(svgConfigureItem);
    }


    if (isQueryConfigMenu != undefined && isQueryConfigMenu == true) {
        //Menu Items for Configure Query.
        var queryParamItem = new sap.ui.commons.Button(generateGuid(), {
            icon: sap.ui.core.IconPool.getIconURI("Chart-Tree-Map"),
            lite: true,
            tooltip: oBundle.getText("XLBL_CONFIGURE_QUERY_PARAMETERS"),
            //opening the dialog for configuring the query parameters (ConfigureQuery.js)
            //"Query" = filetype
            press: function() {
                openConfigureQueryOrDisplayDialog(toolBar, "Query");
            }
        });
        toolBar.addItem(queryParamItem);
    }
    createGeneralMenuItems(toolBar, panelId);
}
/*****
 * This is a method to create the menu fot the MDO configuration
 */
function createMenuForMDO(toolBar, fileType, isVizTypeAsChart, isi5Grid) {
    var panel = toolBar.getId();
    var panelId = panel.substr(0, 4);
    //Menu Item for Configure MDO Visualization.
    var mdoVisualItem = new sap.ui.commons.Button(generateGuid(), {
        icon: sap.ui.core.IconPool.getIconURI("table-view"),
        lite: true,
        tooltip: oBundle.getText("XLBL_CONFIGURE_VISUALIZATION"),
        press: function() {
            visualizationConfigDialog(toolBar);
            //opening the dialog for configuring the query visualization (ConfigureQueryVisualization.js)
        }
    });

    var queryParamItem = new sap.ui.commons.Button(generateGuid(), {
        icon: sap.ui.core.IconPool.getIconURI("Chart-Tree-Map"),
        lite: true,
        tooltip: oBundle.getText("XLBL_CONFIGURE_QUERY_PARAMETERS"),
        press: function() {
            openConfigureQueryOrDisplayDialog(toolBar, "Query");
        }
    });
    //opening the dialog for configuring the query parameters (ConfigureQuery.js)});
    toolBar.addItem(queryParamItem);
    toolBar.addItem(mdoVisualItem);

    //if the Visualization type selected is 'Chart', then add the menu for 'Configure Display Parameters'
    if (isVizTypeAsChart) {
        var displayParamItem = new sap.ui.commons.Button(generateGuid(), {
            //icon : "Images/CompositionEnvironment/menu_16.png",
            icon: sap.ui.core.IconPool.getIconURI("area-chart"),
            lite: true,
            tooltip: oBundle.getText("XLBL_CONFIGURE_DISPLAY_PARAMETERS"),
            press: function() {
                openConfigureQueryOrDisplayDialog(toolBar, "i5Chart");
            }
        });
        //opening the dialog for configuring the display parameters (ConfigureQuery.js)});
        toolBar.addItem(displayParamItem);
    } else if (isi5Grid) {
        var displayParamItem = new sap.ui.commons.Button(generateGuid(), {
            icon: sap.ui.core.IconPool.getIconURI("area-chart"),
            lite: true,
            tooltip: oBundle.getText("XLBL_CONFIGURE_DISPLAY_PARAMETERS"),
            //opening the dialog for configuring the display parameters (ConfigureQuery.js)
            press: function() {
                openConfigureQueryOrDisplayDialog(toolBar, "i5Grid");
            }
        });
        toolBar.addItem(displayParamItem);
    }
    createGeneralMenuItems(toolBar, panelId);
}

/*****
 * This is a method to create the menu for the Query configuration
 */
function createMenuForDisplay(toolBar, fileType) {
    var panel = toolBar.getId();
    var panelId = panel.substr(0, 4);
    //Menu Item for Configure Display Parameters.
    var displayParamItem = new sap.ui.commons.Button(generateGuid(), {
        icon: sap.ui.core.IconPool.getIconURI("area-chart"),
        lite: true,
        tooltip: oBundle.getText("XLBL_CONFIGURE_DISPLAY_PARAMETERS"),
        press: function() {
            openConfigureQueryOrDisplayDialog(toolBar, fileType);
            //opening the dialog for configuring the display parameters (ConfigureQuery.js)
        }
    });
    toolBar.addItem(displayParamItem);

    var queryParamItem = new sap.ui.commons.Button(generateGuid(), {
        icon: sap.ui.core.IconPool.getIconURI("Chart-Tree-Map"),
        lite: true,
        tooltip: oBundle.getText("XLBL_CONFIGURE_QUERY_PARAMETERS"),
        press: function() {
            openConfigureQueryOrDisplayDialog(toolBar, "Query");
        }
    });
    //opening the dialog for configuring the query parameters (ConfigureQuery.js)
    toolBar.addItem(queryParamItem);

    createGeneralMenuItems(toolBar, panelId);
}

/*****
 * This s a generic method to make AJAX calls in CE App. 
 * @param url
 * @param parameters
 * @param errorMessage, pass NULL if a default err message has to be displayed.
 * @param callbackFunction, function to be called for an asynchronous call, pass NULL for a synchronous call
 * @return
 */
function getDataFromServer(url, parameters, errorMessage, callbackFunction, isHideBusyIndicator) {
    var result = null;
    var bAsync = typeof callbackFunction === 'function';
    if (!bAsync) {
        callbackFunction = function(data, textStatus, jqXHR) {
            result = data;
            if (isHideBusyIndicator && (isHideBusyIndicator.trim() == "" || isHideBusyIndicator == "true"))
                hideBusyIndicator();
        };
    }
    $.ajax({
        type: 'POST',
        url: url,
        data: parameters,
        dataType: 'json',
        cache: false,
        async: bAsync,
        crossDomain: true
    }).done(callbackFunction).fail(function(data, textStatus, jqXHR) {
        hideBusyIndicator();
        if (data.getResponseHeader("content-type") !== undefined && data.getResponseHeader("content-type") == "application/json" && data.responseText == "") {
            // With jQuery 1.10 if the response is empty and the dataType is set to 'json', the ajax request will fail.
        } else {
            if (errorMessage == null) {
                showNotificationBarMsg(3, oBundle.getText("XMSG_DATA_RETRIEVAL_ERROR"));
            } else {
                showNotificationBarMsg(3, oBundle.getText(errorMessage));
            }
        }
    });
    return result;
}

/***
 * this method is called from CatalogBrowser to fetch the catalog objects from PIC.
 * Since OData requires an XSRF Id,  a GET is made to fetch the id , and the same is passed 
 * as a POST parameter to fetch the catalog objects.
 * @param url
 * @param urlParameterObject --> This object would contain the url parameters that needs to be appended with the URL. This includes namespace, mode, datatype and anyother
 * @param errorMessage
 * @return {
{
    "d" : { "results" : [
                "Rowset" : { "results" : [
                                "RowsetId" : 0, "Row" : {   
                                "results" : [{
                                        "Name" : "Root", "Namespace" : "Root", "ObjectType" : "TagGroup", "Description" : "Root", "DataType" : null
                                    }] }}] }} ] }}
 This data is returned for furthur processing.
 */
function getObjectsFromPIC(url, urlParameterObject, errorMessage) {

    var result = null;

    $.ajax({
        type: 'GET',
        url: url + "?xsrfid=Fetch",
        cache: false,
        async: false,
        success: function(data, textStatus, jqXHR) {
            CURRENT_SESSION_XSRF_ID = jqXHR.getResponseHeader("xsrfid");

            //appending parameters to the URL
            url = url + "?xsrfid=" + CURRENT_SESSION_XSRF_ID + "&$format=json";
            if (urlParameterObject.Namespace != null && urlParameterObject.Namespace != undefined)
                url = url + "&Namespace=" + urlParameterObject.Namespace;
            if (urlParameterObject.Mode != null && urlParameterObject.Mode != undefined)
                url = url + "&Mode=" + urlParameterObject.Mode;
            if (urlParameterObject.DataType != null && urlParameterObject.DataType != undefined)
                url = url + "&DataType=" + urlParameterObject.DataType;
            if (urlParameterObject.Name != null && urlParameterObject.Name != undefined)
                url = url + "&Name=" + encodeURIComponent(urlParameterObject.Name);
            if (isObjectNotNull(urlParameterObject.Group))
                url = url + "&Group=" + encodeURIComponent(urlParameterObject.Group);
            if (isObjectNotNull(urlParameterObject.Type))
                url = url + "&Type=" + encodeURIComponent(urlParameterObject.Type);
            if (isObjectNotNull(urlParameterObject.IgnoreDataType))
                url = url + "&IgnoreDataType=" + encodeURIComponent(urlParameterObject.IgnoreDataType);
            if(isObjectNotNull(urlParameterObject.OnlyGroup))
            	url = url + "&OnlyGroup=" + encodeURIComponent(urlParameterObject.OnlyGroup);
            if(isObjectNotNull(urlParameterObject.Permission))
                url = url + "&Permission=" + urlParameterObject.Permission;

            $.ajax({
                type: 'POST',
                url: url,
                dataType: 'json',
                cache: false,
                async: false,
                success: function(data, textStatus, jqXHR) {
                    result = data;
                },
                headers: {
                    "Access-Control-Allow-Origin": "*"
                },
                crossDomain: true,
                error: function(data, textStatus, jqXHR) {
                    showNotificationBarMsg(3, oBundle.getText("XMSG_DATA_RETRIEVAL_ERROR"));
                }
            });
        },
        headers: {
            "Access-Control-Allow-Origin": "*"
        },
        crossDomain: true,
        error: function(data, textStatus, jqXHR) {
            showNotificationBarMsg(3, oBundle.getText("XMSG_DATA_RETRIEVAL_ERROR"));
        }
    });
    return result;
}

/***
 * this method is called from CatalogBrowser to fetch the catalog objects from PIC.
 * Since OData requires an XSRF Id,  a GET is made to fetch the id , and the same is passed 
 * as a POST parameter to fetch the catalog objects.
 * @param url
 * @param urlParameterObject --> This object would contain the url parameters that needs to be appended with the URL. This includes namespace, mode, tag
 * @param errorMessage
 * @return {
{
    "d" : { "results" : [
                "Rowset" : { "results" : [
                                "RowsetId" : 0, "Row" : {   
                                "results" : [{
                                        "Name" : "Root", "Namespace" : "Root", "ObjectType" : "TagGroup", "Description" : "Root", "DataType" : null
                                    }] }}] }} ] }}
 This data is returned for furthur processing.
 */
function getPICDetailsForVDS(url, urlParameterObject, errorMessage) {

    var result = null;

    $.ajax({
        type: 'GET',
        url: url + "?xsrfid=Fetch",
        cache: false,
        async: false,
        success: function(data, textStatus, jqXHR) {
            CURRENT_SESSION_XSRF_ID = jqXHR.getResponseHeader("xsrfid");

            //appending parameters to the URL
            url = url + "?xsrfid=" + CURRENT_SESSION_XSRF_ID + "&$format=json";
            if (urlParameterObject.Namespace != null && urlParameterObject.Namespace != undefined)
                url = url + "&Namespace=" + urlParameterObject.Namespace;
            if (urlParameterObject.Mode != null && urlParameterObject.Mode != undefined)
                url = url + "&Mode=" + urlParameterObject.Mode;
            if (urlParameterObject.Tag != null && urlParameterObject.Tag != undefined)
                url = url + "&Tag=" + urlParameterObject.Tag;
            if (urlParameterObject.Permission != null && urlParameterObject.Permission != undefined)
                url = url + "&Permission=" + urlParameterObject.Permission;

            $.ajax({
                type: 'POST',
                url: url,
                dataType: 'json',
                cache: false,
                async: false,
                success: function(data, textStatus, jqXHR) {
                    result = data;
                },
                headers: {
                    "Access-Control-Allow-Origin": "*"
                },
                crossDomain: true,
                error: function(data, textStatus, jqXHR) {
                    showNotificationBarMsg(3, oBundle.getText("XMSG_DATA_RETRIEVAL_ERROR"));
                }
            });
        },
        headers: {
            "Access-Control-Allow-Origin": "*"
        },
        crossDomain: true,
        error: function(data, textStatus, jqXHR) {
            showNotificationBarMsg(3, oBundle.getText("XMSG_DATA_RETRIEVAL_ERROR"));
        }
    });
    return result;
}

/***
 * this method is called from CatalogBrowser to fetch the catalog objects from PIC.
 * Since OData requires an XSRF Id,  a GET is made to fetch the id , and the same is passed 
 * as a POST parameter to fetch the catalog objects.
 * @param url
 * @param urlParameterObject --> This object would contain the url parameters that needs to be appended with the URL. This includes namespace, mode, tag
 * @param errorMessage
 * @return {
{
    "d" : { "results" : [
                "Rowset" : { "results" : [
                                "RowsetId" : 0, "Row" : {   
                                "results" : [{
                                        "Name" : "Root", "Namespace" : "Root", "ObjectType" : "TagGroup", "Description" : "Root", "DataType" : null
                                    }] }}] }} ] }}
 This data is returned for furthur processing.
 */
function getPICDetailsForVDS(url, urlParameterObject, errorMessage) {

    var result = null;

    $.ajax({
        type: 'GET',
        url: url + "?xsrfid=Fetch",
        cache: false,
        async: false,
        success: function(data, textStatus, jqXHR) {
            CURRENT_SESSION_XSRF_ID = jqXHR.getResponseHeader("xsrfid");

            //appending parameters to the URL
            url = url + "?xsrfid=" + CURRENT_SESSION_XSRF_ID + "&$format=json";
            if (urlParameterObject.Namespace != null && urlParameterObject.Namespace != undefined)
                url = url + "&Namespace=" + urlParameterObject.Namespace;
            if (urlParameterObject.Mode != null && urlParameterObject.Mode != undefined)
                url = url + "&Mode=" + urlParameterObject.Mode;
            if (urlParameterObject.Tag != null && urlParameterObject.Tag != undefined)
                url = url + "&Tag=" + urlParameterObject.Tag;

            $.ajax({
                type: 'POST',
                url: url,
                dataType: 'json',
                cache: false,
                async: false,
                success: function(data, textStatus, jqXHR) {
                    result = data;
                },
                headers: {
                    "Access-Control-Allow-Origin": "*"
                },
                crossDomain: true,
                error: function(data, textStatus, jqXHR) {
                    showNotificationBarMsg(3, oBundle.getText("XMSG_DATA_RETRIEVAL_ERROR"));
                }
            });
        },
        headers: {
            "Access-Control-Allow-Origin": "*"
        },
        crossDomain: true,
        error: function(data, textStatus, jqXHR) {
            showNotificationBarMsg(3, oBundle.getText("XMSG_DATA_RETRIEVAL_ERROR"));
        }
    });
    return result;
}

/**
 * Function to get the properties value of the tag for the unit of measure
 * @param tagNamespace
 * @param altUnit
 * @param UnitPropertySet
 * @return
 */

function getPropertiesFromPIC(Namespace, altUnit, UnitPropertySet) {

    var result = "";
    var tagNamespace = "CatalogConnector." + Namespace.replace(/\//g, ".");
    var ETCQuery = "";
    ETCQuery += '<?xml version="1.0" encoding="UTF-8" standalone="no"?><ETCObjects>';
    ETCQuery += "<ETCObject Name=\"" + tagNamespace + "\">";
    ETCQuery += "<Property Name=\"" + altUnit + "\" PropertySetName=\"" + UnitPropertySet + "\"/>";
    ETCQuery += "</ETCObject></ETCObjects>";
    $.ajax({
        url: XMII_ILLUMINATOR_URL,
        type: 'POST',
        dataType: 'json',
        data: {
            "Mode": "Current",
            "SelectedObjects": tagNamespace,
            "QueryTemplate": "Predefined/DefaultCatalogHistoryQuery",
            "Content-Type": "text/json",
            "ETCQueryPropertiesInfo": ETCQuery
        },
        cache: false,
        async: false,
        success: function(data, textStatus, jqXHR) {
            result = data;
        },
        headers: {
            "Access-Control-Allow-Origin": "*"
        },
        crossDomain: true,
        error: function(data, textStatus, jqXHR) {
            showNotificationBarMsg(3, oBundle.getText("XMSG_DATA_RETRIEVAL_ERROR"));
        }
    });

    return result;
}


function getTagFromPIC(url, urlParameterObject, errorMessage) {

    var result = null;

    $.ajax({
        type: 'GET',
        url: url + "?xsrfid=Fetch",
        cache: false,
        async: false,
        success: function(data, textStatus, jqXHR) {
            CURRENT_SESSION_XSRF_ID = jqXHR.getResponseHeader("xsrfid");

            //appending parameters to the URL
            url = url + "?xsrfid=" + CURRENT_SESSION_XSRF_ID + "&$format=json";
            if (urlParameterObject.Namespace != null && urlParameterObject.Namespace != undefined)
                url = url + "&Namespace=" + urlParameterObject.Namespace;
            if (urlParameterObject.Mode != null && urlParameterObject.Mode != undefined)
                url = url + "&Mode=" + urlParameterObject.Mode;
            if (urlParameterObject.TagName != null && urlParameterObject.TagName != undefined)
                url = url + "&Tag=" + urlParameterObject.TagName;
            if (urlParameterObject.Permission != null && urlParameterObject.Permission != undefined)
            	 url = url + "&Permission=" + urlParameterObject.Permission;

            $.ajax({
                type: 'POST',
                url: url,
                dataType: 'json',
                cache: false,
                async: false,
                success: function(data, textStatus, jqXHR) {
                    result = data;
                },
                headers: {
                    "Access-Control-Allow-Origin": "*"
                },
                crossDomain: true,
                error: function(data, textStatus, jqXHR) {
                    showNotificationBarMsg(3, oBundle.getText("XMSG_DATA_RETRIEVAL_ERROR"));
                }
            });
        },
        headers: {
            "Access-Control-Allow-Origin": "*"
        },
        crossDomain: true,
        error: function(data, textStatus, jqXHR) {
            showNotificationBarMsg(3, oBundle.getText("XMSG_DATA_RETRIEVAL_ERROR"));
        }
    });
    return result;
}


/**
 * 
 * @param url
 * @return html content of the file
 */

function getContentFromServer(url) {

    var result = null;

    $.ajax({
        type: 'GET',
        url: url,
        dataType: 'html',
        cache: false,
        async: false,
        success: function(data, textStatus, jqXHR) {
            result = data;
        },
        headers: {
            "Access-Control-Allow-Origin": "*"
        },
        crossDomain: true,
        error: function(data, textStatus, jqXHR) {
            showNotificationBarMsg(3, oBundle.getText("XMSG_DATA_RETRIEVAL_ERROR"));
        }
    });

    return result;
}

/***
 * creates quick View for a tag object aka menu button
 * @param tag
 * @return oQuickView
 */
function createCallOutForTag(tag) {

    var oQuickView = new sap.ui.ux3.QuickView(generateGuid(), {
        type: oBundle.getText("XLBL_TAG_DETAILS_HEADER"),
        firstTitle: tag.Name,
        secondTitle: tag.Description,
        icon: "Images/CompositionEnvironment/tag_grey_64.png",
        content: createQuickViewContent(tag),
        showActionBar: false
    });

    return oQuickView;
}

/***
 * creates the content to be put in quick view
 * @param tag
 * @return oLayout
 */
function createQuickViewContent(tag) {

    var oLayout = new sap.ui.commons.layout.MatrixLayout({
        id: generateGuid(),
        layoutFixed: true,
        columns: 2,
        width: "100%",
        widths: ["45%", "140px"]
    });

    //description
    var tagDescription_label = new sap.ui.commons.Label({
        id: generateGuid(),
        text: oBundle.getText("XLBL_DESCRIPTION") + ":"
    });
    tagDescription_label.addStyleClass("labelBoldAndRightAligned");
    var tagDescriptionTextView = new sap.ui.commons.TextView({
        id: generateGuid(),
        tooltip: tag.Description,
        text: tag.Description
    });
    tagDescription_label.setLabelFor(tagDescriptionTextView);
    oLayout.createRow(tagDescription_label, tagDescriptionTextView);

    //namespace
    var namespace_label = new sap.ui.commons.Label({
        id: generateGuid(),
        text: oBundle.getText("XLBL_TAG_NAMESPACE") + ":"
    });
    namespace_label.addStyleClass("labelBoldAndRightAligned");

    var namespaceTextView = new sap.ui.commons.TextView({
        id: generateGuid(),
        tooltip: tag.Namespace,
        text: tag.Namespace
    });
    namespace_label.setLabelFor(namespaceTextView);
    oLayout.createRow(namespace_label, namespaceTextView);

    //datatype
    var datatype_label = new sap.ui.commons.Label({
        id: generateGuid(),
        text: oBundle.getText("XLBL_TAG_DATATYPE") + ":"
    });
    datatype_label.addStyleClass("labelBoldAndRightAligned");
    var datatypeTextView = new sap.ui.commons.TextView({
        id: generateGuid(),
        tooltip: tag.DataType,
        text: tag.DataType
    });
    datatype_label.setLabelFor(datatypeTextView);
    oLayout.createRow(datatype_label, datatypeTextView);

    return oLayout;
}

/***
 * This function will destroy the contents of the Preview tab
 * @return
 */
function destroyPreviewContent() {
    //  var previewTab = sap.ui.getCore().byId("previewHTML");
    //  if(previewTab != null || previewTab != 'undefined')
    //  previewTab.destroy();
}


/**
 * If the window gets resized, this namespaced event will be handled by
 * the following function. It collects all td's that have a UI5 control
 * and constrains their width and height, what results in a resize of
 * each element.
 */
/*$(window).bind('resize.declarativeControls', function() {
    $('td:has(div > div > div[data-sap-ui])').each(function(i,e) {
        var $td = $(e), $sapViz = $td.find('div[data-sap-ui]'),
        sapElem = sap.ui.getCore().byId($sapViz.attr('id'));

        if (sapElem && typeof sapElem.setWidth === 'function' && typeof sapElem.setHeight === 'function') {
            sapElem.setWidth($td.width() + 'px').setHeight($td.height() + 'px');
        }
    });
});
*/

//Method to clear content of a cell.
function clearCellContent(panel) {
    var messageId = generateGuid();
    jQuery.sap.require("sap.ui.commons.MessageBox");
    var message = oBundle.getText("XMSG_CLEAR_CONFIRMATION");
    if (cellObjectExistsInEvent(panel.data("Object"), panel.sId)) {
        message = oBundle.getText("XMSG_CLEAR_EVENT_CONFIRMATION");
    }
    sap.ui.commons.MessageBox.show(message,
        sap.ui.commons.MessageBox.Icon.QUESTION,
        oBundle.getText("XTIT_ADD_CONFIRM"), [sap.ui.commons.MessageBox.Action.YES, sap.ui.commons.MessageBox.Action.NO],
        function(bResult) {
            clearContentConfirmationDialog(bResult, panel, 3); // pass clearType as 3 for removing entire content
        },
        sap.ui.commons.MessageBox.Action.YES,
        messageId);
    //this is done to display the confirmation message on top if there is an applet on the page
    if (jQuery.browser.chrome && jQuery('applet').length > 0) {
        var leftPosition = (window.innerWidth - jQuery.sap.byId(messageId).width()) / 2;
        jQuery(".sapUiDlg").css("top", "5px");
        jQuery(".sapUiDlg").css("left", leftPosition + "px");
    }
}

//Method to remove tags from cell
function removeTagsFromCell(panel) {
    var message = oBundle.getText("XMSG_CLEAR_TAGS_CONFIRMATION");
    sap.ui.commons.MessageBox.show(message,
        sap.ui.commons.MessageBox.Icon.QUESTION,
        oBundle.getText("XTIT_ADD_CONFIRM"), [sap.ui.commons.MessageBox.Action.YES, sap.ui.commons.MessageBox.Action.NO],
        function(bResult) {
            clearContentConfirmationDialog(bResult, panel, 2); //pass clearType as 2 for removing only tags
        });
}

//Confirm clear cell content or cancel the operation
function clearContentConfirmationDialog(bResult, panel, clearType) {
    if (bResult == "YES")
        destroyCellContent(panel, clearType);
}

function updateEventSettingsAfterMerge(mergeCellIds) {
    var oSelectedCell;
    var oCellObject;
    // flag for checking if there is conponent in the result cell after merge
    var resultCellFilled = false;
    // id of first selected cell-- also id of the result cell after merge
    var firstCellId = mergeCellIds[0];
    // loop all selected cell to do rename or delete in event settings
    for (var i = 0, cellLength = mergeCellIds.length; i < cellLength; i++) {
        oSelectedCell = sap.ui.getCore().byId(mergeCellIds[i]);
        oCellObject = oSelectedCell.data().Object;
        // if the result cell does not have component yet
        if (!resultCellFilled) {
            // if oCellObject is not 'undefined', means the cell is not blank
            if (oCellObject) {
                // set the flag to true because the cell will be filled by the component of
                // the cell in current loop
                resultCellFilled = true;
                // if i==1 means current cell is exactly the result cell,
                // rename is not needed, so continue the loop after setting the flag
                if (i == 0) {
                    continue;
                }
                // if i!=1, means contents in the cell need to be renamed with first cell id
                updateEventsOnControlChange(oCellObject, mergeCellIds[i], firstCellId);
            }
        } else {
            // if the flag 'resultCellFilled' is true, means all events related to following components
            // need to be removed since they are moved to the clipboard
            if (oCellObject) {
                // if the cell is not empty, remove related event settings
                updateEventsOnControlChange(oCellObject, mergeCellIds[i]);
            }
        }
    }
}

function checkDeleteEventWhenMerge() {
    var foundFirstNonEmptyCell = false;
    var selectedCells = $(".panelSelected");
    var oSelectedCell;
    var oCellObject;
    var currentCellId;
    var firstCellId = selectedCells[0].id;
    for (var i = 0, cellLength = selectedCells.length; i < cellLength; i++) {
        oSelectedCell = sap.ui.getCore().byId(selectedCells[i].id);
        oCellObject = oSelectedCell.data().Object;
        if (!foundFirstNonEmptyCell) {
            if (oCellObject) {
                foundFirstNonEmptyCell = true;
            }
        } else {
            currentCellId = oSelectedCell.getId();
            if (cellObjectExistsInEvent(oCellObject, currentCellId)) {
                return true;
            }
        }
    }

    return false;
}

function updateObjectsOnScreenChange(event) {

    //The following code is to avoid the execution of further code when SVG is resized 
    //Getting the target Id
    var targetId = event.target.id;
    //Getting the object
    var target = sap.ui.getCore().byId(targetId);
    //if SVGObject is gettting resized ; return
    if (target != undefined && target != null && target != "" && target.data("QueryObjectData") != null && target.data("QueryObjectData") != undefined && target.data("QueryObjectData") != "" && target.data("QueryObjectData").FileType == "SVGObject") {
        return;
    }
    //if Tag Converted to Gauge is gettting resized ; return
    if (target != undefined && target != null && target != "" && target.data("TagData") != null && target.data("TagData") != undefined && target.data("TagData") != "" && target.data("TagData").TagDisplay == "Gauge") {
        return;
    }
    //if Query Converted to Gauge is gettting resized ; return
    if (target != undefined && target != null && target != "" && target.data("QueryObjectData") != null && target.data("QueryObjectData") != undefined && target.data("QueryObjectData") != "" && target.data("QueryObjectData").TagDisplay == "Gauge") {
        return;
    }
    //if uielements  is gettting resized ; return
    if (target != undefined && target != null && target != "" && target.data() != null && target.data() != undefined && target.data() != "" && target.data().FileType == FILE_TYPE_UIELEMENT) {
        return;
    }

    var shell = sap.ui.getCore().byId("main-shell");
    var isShellAndDesignSelected = false;
    if (shell !== undefined && shell != null && (shell.getSelectedWorksetItem() == "nav-Design" || shell.getSelectedWorksetItem() == "nav-Design-Layout")) {
        isShellAndDesignSelected = true;
    }
    if (isShellAndDesignSelected) {
        var layout = sap.ui.getCore().byId("matrix1");

        if (layout != null) {
            var rows = layout.getRows();
            var boxCounter = 0;
            for (var i = 0; i < rows.length; i++) {
                var row = rows[i];
                var cells = row.getCells();
                for (var j = 0; j < cells.length; j++) {
                    var cell = cells[j];
                    var panel = cell.getContent()[0];
                    var panelChildren = panel.getContent();
                    if (panelChildren != null) {
                        for (var k = 0; k < panelChildren.length; k++) {
                            var panelObject = panelChildren[k];

                            //doesnot have a panel?! strange.. continue
                            if (panelObject == null) continue;
                            if (panelObject.hasStyleClass("ssceCellToolBar")) continue;
                            if (panelObject.data("TagData") != null) {

                                var tagData = panelObject.data("TagData");

                                //get x n y from tag data 
                                var _xPercent = tagData.xPos;
                                var _yPercent = tagData.yPos;

                                var toolBarHeight = 0;
                                if (tagData.NewCalculatedPos != undefined && tagData.NewCalculatedPos) {
                                    toolBarHeight = 31;
                                }
                                //cell's dimensions
                                var cWidth = $("#" + panel.getId()).parent().width();
                                var cHeight = ($("#" + panel.getId()).parent().height()) - toolBarHeight; // removing the toolbar height for further calculation

                                //% calculation
                                var newX = cWidth * _xPercent;
                                var newY = cHeight * _yPercent + toolBarHeight; // adding the toolbar height separately

                                $("#" + panelObject.getId()).css({
                                    top: newY,
                                    left: newX
                                });

                            }
                            if (panelObject.data("QueryObjectData") != null) {

                                var tagData = panelObject.data("QueryObjectData");

                                //get x n y from tag data 
                                var _xPercent = tagData.xPos;
                                var _yPercent = tagData.yPos;

                                var toolBarHeight = 0;
                                if (tagData.NewCalculatedPos != undefined && tagData.NewCalculatedPos) {
                                    toolBarHeight = 31;
                                }
                                //cell's dimensions
                                var cWidth = jQuery.sap.byId(panel.getId()).parent().width();
                                var cHeight = ($("#" + panel.getId()).parent().height()) - toolBarHeight; // removing the toolbar height for further calculation

                                //% calculation
                                var newX = cWidth * _xPercent;
                                var newY = cHeight * _yPercent + toolBarHeight; // adding the toolbar height separately

                                jQuery.sap.byId(panelObject.getId()).css({
                                    top: newY,
                                    left: newX
                                });
                            }
                            if (panelObject.data("Object") != null && panelObject.data("Object").FileType == "Content") {

                                //checking for SVGArray
                                var svgContent = $("#" + panelObject.getId()).find(".ssceSVGLayout");

                                //cell's dimensions
                                var cWidth = jQuery.sap.byId(panel.getId()).parent().width();
                                var cHeight = jQuery.sap.byId(panel.getId()).parent().height();

                                $.each(svgContent, function(index) {
                                    //Getting the svg div
                                    var item = sap.ui.getCore().byId(svgContent[index].id);
                                    var objectData = item.data("QueryObjectData");
                                    //Consider toolbar height
                                    var toolBarHeight = 0;
                                    if (objectData.NewCalculatedPos != undefined && objectData.NewCalculatedPos) {
                                        toolBarHeight = 31;
                                    }
                                    var _xPercent = parseFloat(objectData.xPos);
                                    var _yPercent = parseFloat(objectData.yPos);

                                    var _height = objectData.HeightPercentage;
                                    var _width = objectData.WidthPercentage;
                                    //% calculation
                                    var newX = cWidth * _xPercent;
                                    var newY = (cHeight - toolBarHeight) * _yPercent;

                                    var newWidth = cWidth * _width;
                                    var newHeight = cHeight * _height;

                                    jQuery.sap.byId(svgContent[index].id).css({
                                        top: newY,
                                        left: newX,
                                        width: newWidth,
                                        height: newHeight
                                    });
                                    item.rerender();
                                });
                                //Checking for Gauge converted from Tag
                                var tagToGaugeContent = $("#" + panelObject.getId()).find(".ssceTagToGaugeLayout");

                                $.each(tagToGaugeContent, function(index) {
                                    //Getting the gauge div
                                    var item = sap.ui.getCore().byId(tagToGaugeContent[index].id);
                                    var objectData = item.data("TagData");

                                    var toolBarHeight = 0;
                                    if (objectData.NewCalculatedPos != undefined && objectData.NewCalculatedPos) {
                                        toolBarHeight = 31;
                                    }
                                    //cell's dimensions
                                    var cWidth = jQuery.sap.byId(panel.getId()).parent().width();
                                    var cHeight = jQuery.sap.byId(panel.getId()).parent().height();

                                    var _xPercent = parseFloat(objectData.xPos);
                                    var _yPercent = parseFloat(objectData.yPos);

                                    var _height = objectData.HeightPercentage;
                                    var _width = objectData.WidthPercentage;

                                    //% calculation
                                    var newX = cWidth * _xPercent;
                                    var newY = (cHeight - toolBarHeight) * _yPercent;

                                    var newWidth = cWidth * _width;
                                    var newHeight = cHeight * _height;
                                    //Setting the top left width and height of the container and its children
                                    jQuery.sap.byId(tagToGaugeContent[index].id).css({
                                        top: newY,
                                        left: newX,
                                        width: newWidth,
                                        height: newHeight

                                    });
                                    //Setting the width and height to the inner container
                                    $($("#" + tagToGaugeContent[index].id).children().children()).width(newWidth).height(newHeight);
                                    //refreshing the chart
                                    var gaugeChart = item.data("GaugeChart");
                                    gaugeChart.setChartHeight(newHeight + "px");
                                    gaugeChart.setChartWidth(newWidth + "px");
                                    gaugeChart.refresh();


                                });
                                //Checking for Gauge converted from Query
                                var queryToGaugeContent = $("#" + panelObject.getId()).find(".ssceQueryToGaugeLayout");

                                $.each(queryToGaugeContent, function(index) {
                                    //Getting the gauge div
                                    var item = sap.ui.getCore().byId(queryToGaugeContent[index].id);
                                    var objectData = item.data("QueryObjectData");

                                    var toolBarHeight = 0;
                                    if (objectData.NewCalculatedPos != undefined && objectData.NewCalculatedPos) {
                                        toolBarHeight = 31;
                                    }
                                    //cell's dimensions
                                    var cWidth = jQuery.sap.byId(panel.getId()).parent().width();
                                    var cHeight = jQuery.sap.byId(panel.getId()).parent().height();

                                    var _xPercent = parseFloat(objectData.xPos);
                                    var _yPercent = parseFloat(objectData.yPos);

                                    var _height = objectData.HeightPercentage;
                                    var _width = objectData.WidthPercentage;

                                    //% calculation
                                    var newX = cWidth * _xPercent;
                                    var newY = (cHeight - toolBarHeight) * _yPercent;

                                    var newWidth = cWidth * _width;
                                    var newHeight = cHeight * _height;
                                    //Setting the top, left, width and height of the container and its children
                                    jQuery.sap.byId(queryToGaugeContent[index].id).css({
                                        top: newY,
                                        left: newX,
                                        width: newWidth,
                                        height: newHeight

                                    });
                                    //Setting the width and height to the inner container
                                    $($("#" + queryToGaugeContent[index].id).children().children()).width(newWidth).height(newHeight);
                                    //refreshing the chart
                                    var gaugeChart = item.data("GaugeChart");
                                    gaugeChart.setChartHeight(newHeight + "px");
                                    gaugeChart.setChartWidth(newWidth + "px");
                                    gaugeChart.refresh();


                                });


                            }
                            if (panelObject.data("Object") != null && panelObject.data("Object").FileType == FILE_TYPE_UIELEMENT) {
                                populateCellContent(panel, panel.data());
                            }
                        }
                    }
                    boxCounter++;
                }
            }
        }
    }
}

function updateObjectsOnPaneClose() {


    var shell = sap.ui.getCore().byId("main-shell");
    var isShellAndDesignSelected = false;
    if (shell !== undefined && shell != null && (shell.getSelectedWorksetItem() == "nav-Design" || shell.getSelectedWorksetItem() == "nav-Design-Layout")) {
        isShellAndDesignSelected = true;
    }

    if (isShellAndDesignSelected) {
        var layout = sap.ui.getCore().byId("matrix1");
        if (layout != null) {
            var rows = layout.getRows();
            var boxCounter = 0;
            for (var i = 0; i < rows.length; i++) {
                var row = rows[i];
                var cells = row.getCells();
                for (var j = 0; j < cells.length; j++) {
                    var cell = cells[j];
                    var panel = cell.getContent()[0];
                    var panelChildren = panel.getContent();
                    if (panelChildren != null) {
                        for (var k = 0; k < panelChildren.length; k++) {
                            var panelObject = panelChildren[k];

                            //doesnot have a panel?! strange.. continue
                            if (panelObject == null) continue;
                            //checking for tags
                            if (panelObject.data("TagData") != null) {

                                var tagData = panelObject.data("TagData");

                                //get x n y from tag data 
                                var _xPercent = tagData.xPos;
                                var _yPercent = tagData.yPos;
                                var toolBarHeight = 0;
                                if (tagData.NewCalculatedPos != undefined && tagData.NewCalculatedPos) {
                                    toolBarHeight = 31;
                                }
                                //cell's dimensions
                                var cWidth = jQuery.sap.byId(panel.getId()).parent().width();
                                var cHeight = ($("#" + panel.getId()).parent().height()) - toolBarHeight; // removing the toolbar height from parent Height

                                //% calculation
                                var newX = cWidth * _xPercent;
                                var newY = cHeight * _yPercent + toolBarHeight; // adding the toolbar height separately

                                jQuery.sap.byId(panelObject.getId()).css({
                                    top: newY,
                                    left: newX
                                });
                            }
                            //checking for Queries
                            if (panelObject.getId().match(/QueryObject/) != null && panelObject.data("QueryObjectData") != null) {

                                var tagData = panelObject.data("QueryObjectData");

                                //get x n y from tag data 
                                var _xPercent = tagData.xPos;
                                var _yPercent = tagData.yPos;
                                var toolBarHeight = 0;
                                if (tagData.NewCalculatedPos != undefined && tagData.NewCalculatedPos) {
                                    toolBarHeight = 31;
                                }
                                //cell's dimensions
                                var cWidth = jQuery.sap.byId(panel.getId()).parent().width();
                                var cHeight = ($("#" + panel.getId()).parent().height()) - toolBarHeight; // removing the toolbar height for further calculation

                                //% calculation
                                var newX = cWidth * _xPercent;
                                var newY = cHeight * _yPercent + toolBarHeight; // adding the toolbar height separately

                                jQuery.sap.byId(panelObject.getId()).css({
                                    top: newY,
                                    left: newX
                                });
                            }
                            //checking for SVGArray
                            if (panelObject.data("Object") != null && panelObject.data("Object").FileType == "Content") {

                                var svgContent = $("#" + panelObject.getId()).find(".ssceSVGLayout");
                                //cell's dimensions
                                var cWidth = jQuery.sap.byId(panel.getId()).parent().width();
                                var cHeight = jQuery.sap.byId(panel.getId()).parent().height();

                                $.each(svgContent, function(index) {
                                    //Getting the svg div
                                    var item = sap.ui.getCore().byId(svgContent[index].id);
                                    var objectData = item.data("QueryObjectData");
                                    //Consider toolbar height
                                    var toolBarHeight = 0;
                                    if (objectData.NewCalculatedPos != undefined && objectData.NewCalculatedPos) {
                                        toolBarHeight = 31;
                                    }
                                    var _xPercent = parseFloat(objectData.xPos);
                                    var _yPercent = parseFloat(objectData.yPos);

                                    var _height = objectData.HeightPercentage;
                                    var _width = objectData.WidthPercentage;
                                    //% calculation
                                    var newX = cWidth * _xPercent;
                                    var newY = (cHeight - toolBarHeight) * _yPercent;

                                    var newWidth = cWidth * _width;
                                    var newHeight = cHeight * _height;

                                    jQuery.sap.byId(svgContent[index].id).css({
                                        top: newY,
                                        left: newX,
                                        width: newWidth,
                                        height: newHeight
                                    });
                                    item.rerender();
                                });
                                //Checking for Gauge converted from Tag
                                var tagToGaugeContent = $("#" + panelObject.getId()).find(".ssceTagToGaugeLayout");

                                $.each(tagToGaugeContent, function(index) {
                                    //Getting the gauge div
                                    var item = sap.ui.getCore().byId(tagToGaugeContent[index].id);
                                    var objectData = item.data("TagData");

                                    var toolBarHeight = 0;
                                    if (objectData.NewCalculatedPos != undefined && objectData.NewCalculatedPos) {
                                        toolBarHeight = 31;
                                    }
                                    //cell's dimensions
                                    var cWidth = jQuery.sap.byId(panel.getId()).parent().width();
                                    var cHeight = jQuery.sap.byId(panel.getId()).parent().height();

                                    var _xPercent = parseFloat(objectData.xPos);
                                    var _yPercent = parseFloat(objectData.yPos);

                                    var _height = objectData.HeightPercentage;
                                    var _width = objectData.WidthPercentage;

                                    //% calculation
                                    var newX = cWidth * _xPercent;
                                    var newY = (cHeight - toolBarHeight) * _yPercent;

                                    var newWidth = cWidth * _width;
                                    var newHeight = cHeight * _height;
                                    //Setting the top left width and height of the container and its children
                                    jQuery.sap.byId(tagToGaugeContent[index].id).css({
                                        top: newY,
                                        left: newX,
                                        width: newWidth,
                                        height: newHeight

                                    });
                                    //Setting the width and height to the inner container
                                    $($("#" + tagToGaugeContent[index].id).children().children()).width(newWidth).height(newHeight);
                                    //refreshing the chart
                                    var gaugeChart = item.data("GaugeChart");
                                    gaugeChart.setChartHeight(newHeight + "px");
                                    gaugeChart.setChartWidth(newWidth + "px");
                                    gaugeChart.refresh();
                                });
                                //Checking for Gauge converted from Query
                                var queryToGaugeContent = $("#" + panelObject.getId()).find(".ssceQueryToGaugeLayout");

                                $.each(queryToGaugeContent, function(index) {
                                    //Getting the gauge div
                                    var item = sap.ui.getCore().byId(queryToGaugeContent[index].id);
                                    var objectData = item.data("QueryObjectData");

                                    var toolBarHeight = 0;
                                    if (objectData.NewCalculatedPos != undefined && objectData.NewCalculatedPos) {
                                        toolBarHeight = 31;
                                    }
                                    //cell's dimensions
                                    var cWidth = jQuery.sap.byId(panel.getId()).parent().width();
                                    var cHeight = jQuery.sap.byId(panel.getId()).parent().height();;

                                    var _xPercent = parseFloat(objectData.xPos);
                                    var _yPercent = parseFloat(objectData.yPos);

                                    var _height = objectData.HeightPercentage;
                                    var _width = objectData.WidthPercentage;

                                    //% calculation
                                    var newX = cWidth * _xPercent;
                                    var newY = (cHeight - toolBarHeight) * _yPercent;

                                    var newWidth = cWidth * _width;
                                    var newHeight = cHeight * _height;
                                    //Setting the top, left, width and height of the container and its children
                                    jQuery.sap.byId(queryToGaugeContent[index].id).css({
                                        top: newY,
                                        left: newX,
                                        width: newWidth,
                                        height: newHeight

                                    });
                                    //Setting the width and height to the inner container
                                    $($("#" + queryToGaugeContent[index].id).children().children()).width(newWidth).height(newHeight);
                                    //refreshing the chart
                                    var gaugeChart = item.data("GaugeChart");
                                    gaugeChart.setChartHeight(newHeight + "px");
                                    gaugeChart.setChartWidth(newWidth + "px");
                                    gaugeChart.refresh();

                                });

                            }
                        }
                    }
                    boxCounter++;
                }
            }
        }
    }
}
/*
 * All DOM elements which should be made draggable will have the attribute data-draggable="true" in the html tag.
 * This method should be called onAfterRendering of those elements using the UI5 addEventDelegate.
 */
function markDraggableForCellElement() {
    //  var markDraggableForCellElement = function(){
    jQuery("[data-celldraggable]").sortable({
        opacity: 0.7,
        helper: function(event, ui) {
            var obj = $(this).clone().attr("id", "draggedObj").appendTo('body').css('zIndex', 5).css('height', 200).css('width', 400).show();
            return obj;
        },
        handle: ".draggableHandle",
        cursor: "move",
        revert: false,
        start: function(event, ui) {

        },
        stop: function(event, ui) {
            jQuery("#draggedObj").remove();
            var draggedObject = sap.ui.getCore().byId(event.target.id);

            var root = true;
            var obj = document.elementFromPoint(event.pageX, event.pageY);
            if (obj == null || obj === undefined) {
                populateCellContent(draggedObject, draggedObject.data());
                return;
            }
            if (obj.lastElementChild != null) {
                var paneViewObj = sap.ui.getCore().byId(obj.lastElementChild.id);
                if (paneViewObj != undefined) {
                    if (paneViewObj.getViewName == "function" && paneViewObj.getViewName() == "CompositionEnvironment.Views.Clipboard") {
                        var timestamp = com.sap.xmii.common.util.MIIi5Util.dateFromSeconds((Math.round(new Date().getTime() / 1000)).toString(), "dd-MMM-yyyy hh:mm:ss a z");
                        sap.ui.getCore().byId(draggedObject.getId()).data("timestamp", timestamp);
                        sap.mii.ce.clipboardData.push(draggedObject.data());
                        sap.ui.getCore().byId("shellView").getController().getPaneContent("clipboard");
                        destroyCellContent(draggedObject, 3);
                        return;
                    }
                }
            }

            var onDropped = null;
            var pattern = new RegExp("^p[0-9]+p[0-9]+$");
            if (obj != null && typeof(obj) != 'undefined') {
                while (!pattern.test(obj.id)) {
                    obj = obj.parentNode;
                    if (obj.parentNode == null || typeof(obj.parentNode) == 'undefined') {
                        root = false;
                        break;
                    }
                }
            } else {
                root = false;
            }

            if (root == false) {
                if (sap.mii.ce.appdata.layout.layoutSelected == "") {
                    var data = draggedObject.data("Object");
                    sap.mii.ce.appdata.layout.layoutSelected = "Pattern1";
                    sap.ui.getCore().byId("Design-Layout").getController().selectLayout();
                    var layout = sap.ui.getCore().byId("matrix1");
                    if (layout != null) {
                        var rows = layout.getRows();
                        for (var i = 0; i < rows.length; i++) {
                            var row = rows[i];
                            var cells = row.getCells();
                            onDropped = cells[0].getContent()[0];
                        }
                    }
                }
                root = true;
            }
            if (root) {
                if (onDropped == null) {
                    onDropped = sap.ui.getCore().byId(obj.id);
                }
                if (onDropped != undefined) {
                    var isObjectPresent = onDropped.data("Object") != null;
                } else {
                    var targetCell = sap.ui.getCore().byId(event.target.id);
                    populateCellContent(targetCell, draggedObject.data());
                    return;
                }
                if (!isObjectPresent) {
                    var currentTab = 'nav-Design-Layout';
                    pushDataInUndoQueue(currentTab);
                    PUSH_UNDO = true;
                    ceController.deleteObject(draggedObject.getId());
                    ceController.deleteObject(draggedObject.getParent().getId()); //TODO.. need to redo this code
                    //Flag to UIElement, which will tell whether to resolution change or drag to other cell
                    onDropped.MergeCellDragged = true;
                    populateCellContent(onDropped, draggedObject.data());
                    updateEventsOnControlChange(draggedObject.data("Object"), draggedObject.getId(), obj.id);
                    //Removing data from the Parent Cell.
                    destroyCellContent(draggedObject, 3);

                } else {
                    var draggedContent = draggedObject.data("Object");
                    if (draggedContent.FileType == "Tags" && onDropped.data("Object").FileType == "Content") {
                        /* var currentTab = 'nav-Design-Layout';
                         pushDataInUndoQueue(currentTab);
                         PUSH_UNDO = true;
                         draggedContent.TagDisplay = "Tags";
                         ceController.deleteObject(draggedObject.getId());
                         ceController.deleteObject(draggedObject.getParent().getId()); //TODO.. need to redo this code
                         populateCellContent(onDropped, onDropped.data());
                         destroyCellContent(draggedObject, 3);*/
                        //Issue 1570470761
                        var sourcePath = draggedObject.data("Object").Namespace;
                        var targetPath = onDropped.data("Object").Path + "/" + removeExtension(onDropped.data("Object").Name);
                    } else {
                        if (draggedObject.data("Object").FileType != FILE_TYPE_UIELEMENT)
                            var sourcePath = draggedObject.data("Object").Path + "/" + removeExtension(draggedObject.data("Object").Name);
                        else
                            var sourcePath = FILE_TYPE_UIELEMENT;
                        var targetPath = onDropped.data("Object").Path + "/" + removeExtension(onDropped.data("Object").Name);
                        //                      var sourcePath = draggedObject.data("Object").Path + "/" + removeExtension(draggedObject.data("Object").Name);
                        //                      var targetPath = onDropped.data("Object").Path + "/" + removeExtension(onDropped.data("Object").Name);

                    }
                    if (draggedObject.getId() == onDropped.getId()) {
                        var targetCell = draggedObject;
                        populateCellContent(targetCell, draggedObject.data());
                        return;
                    } else {
                        //Issue 1580053413
                        //Commented to fix the issue
                        //if (sourcePath != targetPath) {
                        var message = oBundle.getText("MSG_CONFIRM_DESTINATION");
                        var confirmation = oBundle.getText("XTIT_ADD_CONFIRM");


                        var swap = oBundle.getText("XBUT_SWAP");
                        var replace = oBundle.getText("XBUT_REPLACE");
                        var cancel = oBundle.getText("ADD_CANCEL");

                        var oDialog;
                        if (isObjectNull(sap.ui.getCore().byId("confirmationDialog_id"))) {
                            oDialog = new sap.ui.commons.Dialog({
                                id: "confirmationDialog_id"
                            });
                        } else {
                            oDialog = sap.ui.getCore().byId("confirmationDialog_id");
                        }

                        oDialog.setTitle(confirmation);
                        var oTextView = new sap.ui.commons.TextView();
                        oTextView.setText(message);
                        var obutton1 = new sap.ui.commons.Button({
                            text: swap,
                            press: function() {
                                confirmationDialog(swap, onDropped, draggedObject);
                            }
                        });
                        var obutton2 = new sap.ui.commons.Button({
                            text: replace,
                            press: function() {
                                confirmationDialog(replace, onDropped, draggedObject);
                            }
                        });
                        var obutton3 = new sap.ui.commons.Button({
                            text: cancel,
                            press: function() {
                                var targetCell = draggedObject;
                                populateCellContent(targetCell, draggedObject.data());
                                oDialog.destroy();
                            }
                        });

                        oDialog.addContent(oTextView);
                        oDialog.addButton(obutton1);
                        oDialog.addButton(obutton2);
                        oDialog.addButton(obutton3);
                        var handleClosed = function(event) {
                            if (event.getSource().isOpen() == false) {
                                showApplets();
                                oDialog.destroy();
                            }
                        };
                        oDialog.attachClosed(handleClosed);
                        hideApplets();
                        oDialog.open();

                        /* } else {
                             sap.ui.commons.MessageBox.show(
                                 oBundle.getText("MSG_CONFIRM_SAME_OBJECT", sourcePath),
                                 sap.ui.commons.MessageBox.Icon.QUESTION,
                                 oBundle.getText("XTIT_ADD_CONFIRM"), 
                                 [sap.ui.commons.MessageBox.Action.YES, sap.ui.commons.MessageBox.Action.NO],
                                 function (sResult) {
                                     confirmationDialog(sResult, onDropped, draggedObject);
                                 },
                                 sap.ui.commons.MessageBox.Action.YES);
                         }*/
                    }
                }
            }
        }
    });
}

function confirmationDialog(sResult, onDropped, draggedObject) {
    var swap = oBundle.getText("XBUT_SWAP");
    var replace = oBundle.getText("XBUT_REPLACE");
    if (sResult == swap) {
        var temp;
        var currentTab = 'nav-Design-Layout';
        pushDataInUndoQueue(currentTab);
        if (draggedObject.data("Object").FileType == "Tags" && draggedObject.data("Object").TagDisplay == "Graph") {
            onDropped.data("TagArray").push(draggedObject.data("TagArray"));
        }
        temp = onDropped.data();
        //use t0t0 as a temp cell id
        updateEventsOnControlChange(draggedObject.data("Object"), draggedObject.getId(), "t0t0");
        updateEventsOnControlChange(onDropped.data("Object"), onDropped.getId(), draggedObject.getId());
        updateEventsOnControlChange(draggedObject.data("Object"), "t0t0", onDropped.getId());
        populateCellContent(onDropped, draggedObject.data());
        populateCellContent(draggedObject, temp);
        sap.ui.getCore().byId("confirmationDialog_id").destroy();
        sap.ui.getCore().getEventBus().publish("mii.ui.ce.events", "change");
    }
    if (sResult == replace) {
        var replaceCellContent = function(onDropped, draggedObject) {
            var currentTab = 'nav-Design-Layout';
            pushDataInUndoQueue(currentTab);
            PUSH_UNDO = true;
            if (draggedObject.data("Object").FileType == "Tags" && draggedObject.data("Object").TagDisplay == "Graph") {
                onDropped.data("TagArray").push(draggedObject.data("TagArray"));
            }
            destroyCellContent(onDropped, 3);
            //Setting the flag (Issue : 1570801232)
            PUSH_UNDO = true;
            populateCellContent(onDropped, draggedObject.data());
            updateEventsOnControlChange(draggedObject.data("Object"), draggedObject.getId(), onDropped.getId());
            destroyCellContent(draggedObject, 3);
        };
        if (cellObjectExistsInEvent(onDropped.data("Object"), onDropped.getId())) {
            sap.ui.commons.MessageBox.show(
                oBundle.getText("XMSG_REPLACE_UPDATE_EVENT"),
                sap.ui.commons.MessageBox.Icon.QUESTION,
                oBundle.getText("XTIT_ADD_CONFIRM"), [sap.ui.commons.MessageBox.Action.YES, sap.ui.commons.MessageBox.Action.NO],
                function(_sResult) {
                    if (_sResult === "YES") {
                        replaceCellContent(onDropped, draggedObject);
                    } else {
                        populateCellContent(draggedObject, draggedObject.data());
                    }
                }
            );
        } else {
            replaceCellContent(onDropped, draggedObject);
        }
        sap.ui.getCore().byId("confirmationDialog_id").destroy();
    }


    if (sResult == "YES") {
        var currentTab = 'nav-Design-Layout';
        pushDataInUndoQueue(currentTab);
        PUSH_UNDO = true;
        if (draggedObject.data("Object").FileType == "Tags" && draggedObject.data("Object").TagDisplay == "Graph") {
            onDropped.data("TagArray").push(draggedObject.data("TagArray"));
        }
        ceController.deleteObject(draggedObject.getId());
        ceController.deleteObject(draggedObject.getParent().getId()); //TODO.. need to redo this code
        updateEventsOnControlChange(onDropped.data("Object"), onDropped.getId());
        populateCellContent(onDropped, draggedObject.data());
        updateEventsOnControlChange(draggedObject.data("Object"), draggedObject.getId(), onDropped.getId());

        destroyCellContent(draggedObject, 1);
    }
    if (sResult == "NO") {
        var currentTab = 'nav-Design-Layout';
        pushDataInUndoQueue(currentTab);
        PUSH_UNDO = true;
        var targetCell = draggedObject;
        populateCellContent(targetCell, draggedObject.data());
    }
}

function reRenderLayoutOnViewChange() {
    var layout = sap.ui.getCore().byId("matrix1");
    if (layout != null) {
        var rows = layout.getRows();
        var boxCounter = 0;
        for (var i = 0; i < rows.length; i++) {
            var row = rows[i];
            var cells = row.getCells();
            for (var j = 0; j < cells.length; j++) {
                var cell = cells[j];
                var panel = cell.getContent()[0];
                jQuery("#" + panel.getId()).attr("tabindex", "0");
                var data = panel.data("Object");

                try {
                    if (panel.data("IsPlugin") == "true" || panel.data("IsPlugin") == true || panel.data("IsPlugin") != null)
                        CEPluginHandler.loadLayoutFromJSON(panel, data);
                    else
                        populateCellContent(panel, panel.data());
                } catch (err) {
                    console.log("Unable to swicth content for panel.getId(). : " + err.message);
                }
                boxCounter++;
            }
        }
    }
    jQuery.sap.byId("p0p0").focus();
}

/***
 * this method destroys the content of the cell depending upon the clearType passed
 * @param panel
 * @param 2-destroy tags, 3-destroy all
 */
function destroyCellContent(panel, clearType) {

    //If cell content is destroyed, delete object name from usedObjects global variable
    /*var fileType = determineFileType(panel.data("Object").FileType);
    if (fileType == FILE_TYPE_DISPLAY || fileType == FILE_TYPE_QUERY || fileType == FILE_TYPE_KPI || fileType == FILE_TYPE_I5CHART || 
            fileType == FILE_TYPE_I5GRID || fileType == FILE_TYPE_I5SPCCHART || fileType == FILE_TYPE_MDO) {
        var objectName = panel.data("Object").Path + "/" + panel.data("Object").Name;
        var usedIndex = sap.mii.ce.appdata.layout.usedObjects.indexOf(objectName);
        sap.mii.ce.appdata.layout.usedObjects.splice(usedIndex, 1);
    }*/
    //if data is already put in undo queue, don't put it again. 
    if (!PUSH_UNDO) {
        var currentTab = 'nav-Design-Layout';
        pushDataInUndoQueue(currentTab);
        PUSH_UNDO = false;
    } else {
        PUSH_UNDO = false;
    }

    //Update event configuration before controls are removed.
    updateEventsOnControlChange(panel.data("Object"), panel.sId);

    if (clearType == 2) {
        panel.data("TagArray", null);
    } else {
        // If the UIElement is deleted, dont show the property tab
        if (panel.data("Object") != null && panel.data("Object").FileType == FILE_TYPE_UIELEMENT) {
            if (sap.ui.getCore().byId("main-shell")._sOpenPaneId == "PI_UI_Elements") {
                var uiElementPropTab = sap.ui.getCore().byId("uiElementPropTab");
                uiElementPropTab.setEnabled(false);
                var uiElementTabStrip = sap.ui.getCore().byId("uiElementTabStrip");
                uiElementTabStrip.setSelectedIndex(0);
            }
        }
        //Remove entire cell content
        //Delete Custom Menu Created For 3D Control
        if (panel.data("Object") != null && panel.data("Object").FileType == FILE_TYPE_VDS) {
            if (isObjectNotNull(sap.ui.getCore().byId("vds" + panel.getId() + "_actionMenu"))) {
                var customMenu = sap.ui.getCore().byId("vds" + panel.getId() + "_actionMenu");
                customMenu.destroy();
            }
        }
        ceController.deleteObject(panel.getId());
        ceController.deleteObject(panel.getParent().getId());
        panel.destroyContent();
        panel.data("Object", null);
        panel.data("TitleInfo", null);
        panel.data("TagArray", null);
        //Following code is to delete the all the SVG in the Cell
        var svgObjects = $("#" + panel.getId()).find(".ssceSVGLayout");
        if (isObjectNotNull(svgObjects)) {
            for (var j = 0; j < svgObjects.length; j++) {
                svgObjects[i].destroy();
            }
        }
        panel.data("SVGArray", null);
    }

    var tagArray = panel.data("TagArray");
    var objectData = panel.data("Object");

    //if both object and tags are not present then destroy cell content
    if (objectData == null && (tagArray == null || tagArray.length <= 0)) {
        panel.destroyContent();
    }
    //Creating layout to keep the textView
    var oBackLayout = new sap.ui.commons.layout.VerticalLayout();
    var oDragDropTextView = new sap.ui.commons.TextView({
        text: oBundle.getText("LAYOUT_TOOLTIP"),
        width: "100%",
        height: "100%"
    }).addStyleClass("BackgroundLayoutLabel");
    oDragDropTextView.setDesign(sap.ui.commons.TextViewDesign.H1);
    oBackLayout.addContent(oDragDropTextView);
    panel.addContent(oBackLayout, {
        centerVertically: true,
        centerHorizontally: true
    });
    //publish change event
    sap.ui.getCore().getEventBus().publish("mii.ui.ce.events", "change");
}

/***
 * this method will add a close button to the panel
 * @param panel
 */
function addToolBar(panel) {
    // create a toolbar

    var menuId = panel.getId() + "ToolBar";
    if (sap.ui.getCore().byId(menuId) != null)
        sap.ui.getCore().byId(menuId).destroy();
    var oToolbar = new sap.ui.commons.Toolbar(menuId);
    oToolbar.setWidth("100%");
    oToolbar.setDesign(sap.ui.commons.ToolbarDesign.Standard);
    oToolbar.addStyleClass("cellLayoutToolBar");
    //Adding a dummy style class
    oToolbar.addStyleClass("ssceCellToolBar");
    var objectData = panel.data("Object");
    //Commented following code, refer 1570738991
    /*if ((objectData.TagDisplay == "Gauge")) {
        objectData.TagDisplay = "Tags";
    }*/

    var objectIcon = new sap.ui.commons.Label({
        icon: determineIconForNode(objectData.FileType)
    });
    objectIcon.addEventDelegate({
        onAfterRendering: function() {
            $("#" + this.getId() + " img").css("height", "16px");
            $("#" + this.getId() + " img").css("width", "16px");
        }
    }, objectIcon);
    var objectName;
    if (objectData.Name != null && objectData.Name != undefined) {
        //Issue 1580067461 translation
        if (objectData.FileType == "UIElement") {
            objectName = new sap.ui.commons.TextView({
                text: oBundle.getText("PANE_UI_ELEMENTS")
            });
        } else {
            objectName = new sap.ui.commons.TextView({
                text: removeExtension(objectData.Name)
            });
        }
    } else {

        objectName = new sap.ui.commons.TextView({
            text: "Custom Plugin"
        });

    }

    oToolbar.addRightItem(objectIcon);
    oToolbar.addRightItem(objectName);

    //adding the Help icon
    var helpUrl = XMII_CECATALOG_URL + "?Mode=SSCEHelp&Key=" + determineFileTypeForHelpLink(panel.data().Object.FileType); //determineFileTypeForHelpLink() from TreeUtils.js 
    var helpLink = new sap.ui.commons.Button({
        icon: sap.ui.core.IconPool.getIconURI("sys-help"),
        tooltip: oBundle.getText("CE_HELP"),
        lite: true,
        press: function() {
            window.open(helpUrl, "_blank");
        }
    });
    helpLink.addEventDelegate({
        onAfterRendering: function() {
            jQuery.sap.byId(helpLink.getId()).css("margin-right", "0px");
        }
    });

    oToolbar.addRightItem(helpLink);

    //adding the close button if any object is added
    var closeButton = new sap.ui.commons.Button({
        icon: "Images/decline_grey_16.png",
        tooltip: oBundle.getText("XLBL_CLEAR_CONTENT"),
        lite: true,
        iconHovered: "Images/decline_16.png",
        press: function() {
            clearCellContent(panel);
            //destroyCellContent(panel, 3);
            sap.ui.getCore().getEventBus().publish("mii.ui.ce.events", "change");
        }
    });

    oToolbar.addRightItem(closeButton);

    //  var oHorizontalDivider = new sap.ui.commons.HorizontalDivider();
    //  oHorizontalDivider.setWidth("100%");
    //  oHorizontalDivider.setHeight(sap.ui.commons.HorizontalDividerHeight.Ruleheight);
    //  oHorizontalDivider.setType(sap.ui.commons.HorizontalDividerType.Area);
    //  
    //  var verticalLayout = new sap.ui.commons.layout.VerticalLayout();
    //  verticalLayout.setWidth("100%");
    //  verticalLayout.addContent(oToolbar);
    //  verticalLayout.addContent(oHorizontalDivider);

    oToolbar.addStyleClass("draggableHandle");
    //adding draggable space at the top
    //  var draggableMarkerView = new sap.ui.commons.layout.HorizontalLayout().addStyleClass("draggableHandle");
    //  draggableMarkerView.addContent(new sap.ui.commons.Label());
    //  panel.addContent(draggableMarkerView);
    //  panel.setPositionOfChild(draggableMarkerView,{left: "0px", right: "40px", top: "1px"});

}

/**
 * This function enables the different ui elements to be draggable among the cells 
 * @return
 */
function markDraggableForUIElements() {
    jQuery("[data-uielemdraggable]").draggable({
        cancel: false,
        opacity: 0.7,
        helper: function(event, ui) {
            return jQuery(this).clone().attr("id", "draggedObj").appendTo('body').css('zIndex', 5).show();
        },
        revert: false,
        start: function(event, ui) {

        },
        stop: function(event, ui) {
            jQuery.sap.byId("draggedObj").remove();
        }
    });
}

/**
 * This function enables the different cells to be droppable
 * @return
 */
function markDroppableForUICells() {
    jQuery("[data-droppable]").droppable({
        over: function() {},
        greedy: true,
        hoverClass: 'HoverImage',
        drop: function(evt, ui) {
            var draggedNode = sap.ui.getCore().byId(ui.draggable[0].id);
            var isTreeNode = false;
            if (draggedNode.data().Object !== undefined && draggedNode.data().Object != null) {
                isTreeNode = draggedNode.data().Object.TreeNode;
            }

            var dropToCell = sap.ui.getCore().byId(evt.target.id); //id of the cell where ui element is dropped
            var parentMatrixCell = dropToCell.getParent().getParent().getParent().getParent();
            var controlsData = parentMatrixCell.data("Object").Controls;
            var dropToCellId = dropToCell.getId().split(":")[0];
            var dragFromCellId = sap.ui.getCore().byId(ui.draggable[0].id).getParent().getId().split(":")[0]; //id of the cell from where an existing ui element is dragged

            //if the dragged ui element is NOT from the tree, but is dragged from another cell
            if (isTreeNode === undefined || isTreeNode == null || isTreeNode == false) {
                //check if the cell already has content on it
                if (dropToCell.getContent()[0] !== undefined) {
                    var dropToCellControlType = "";
                    for (var i = 0; i < controlsData.length; i++) {
                        if (controlsData[i].controlId == dropToCellId) {
                            dropToCellControlType = controlsData[i].ControlType;
                            break;
                        }
                    }

                    var draggedControlType = "";
                    var draggedControlData = null;
                    for (var i = 0; i < controlsData.length; i++) {
                        if (controlsData[i].controlId == dragFromCellId) {
                            draggedControlType = controlsData[i].ControlType;
                            draggedControlData = controlsData[i];
                            break;
                        }
                    }
                    var targetPath = parentMatrixCell.data("Object").Name;
                    var message = oBundle.getText("MSG_CONFIRM_REPLACE_OBJECT");
                    message = message.replace("{0}", dropToCellControlType);
                    message = message.replace("{1}", draggedControlType);
                    sap.ui.commons.MessageBox.show(message,
                        sap.ui.commons.MessageBox.Icon.QUESTION,
                        oBundle.getText("XTIT_ADD_CONFIRM"), [sap.ui.commons.MessageBox.Action.YES, sap.ui.commons.MessageBox.Action.NO],
                        function(sResult) {
                            var paneView = sap.ui.getCore().byId("paneView-uiElements");
                            paneView.getController().confirmationDialog(sResult, parentMatrixCell, dragFromCellId, dropToCellId);
                        },
                        sap.ui.commons.MessageBox.Action.YES);

                }
                // if the cell does not contain any element
                else {
                    var currentTab = 'nav-Design-Layout';
                    pushDataInUndoQueue(currentTab);
                    for (var i = 0; i < controlsData.length; i++) {
                        if (controlsData[i].controlId == dragFromCellId) {
                            controlsData[i].controlId = dropToCellId.split(":")[0];
                            break;
                        }
                    }
                    //populate the cells with all the ui elements
                    populateCellContent(parentMatrixCell, parentMatrixCell.data());
                    sap.ui.getCore().getEventBus().publish("mii.ui.ce.events", "change");
                }

            }
            //if the dragged ui element is dragged from the tree 
            else {
                //check if the cell already has content on it
                if (dropToCell.getContent()[0] !== undefined) {
                    var sourcePath = draggedNode.data("Object").ControlType;
                    var droppedControl = "";
                    var droppedControlData = null;
                    for (var i = 0; i < controlsData.length; i++) {
                        if (controlsData[i].controlId == dropToCellId) {
                            droppedControl = controlsData[i].ControlType;
                            droppedControlData = controlsData[i];
                            break;
                        }
                    }
                    var targetPath = parentMatrixCell.data("Object").ControlType;
                    var message = oBundle.getText("MSG_CONFIRM_REPLACE_OBJECT");
                    message = message.replace("{0}", sourcePath);
                    message = message.replace("{1}", targetPath);
                    sap.ui.commons.MessageBox.show(message,
                        sap.ui.commons.MessageBox.Icon.QUESTION,
                        oBundle.getText("XTIT_ADD_CONFIRM"), [sap.ui.commons.MessageBox.Action.YES, sap.ui.commons.MessageBox.Action.NO],
                        function(sResult) {
                            var paneView = sap.ui.getCore().byId("paneView-uiElements");
                            paneView.getController().confirmationDialog(sResult, parentMatrixCell, undefined, dropToCellId, droppedControlData, draggedNode);
                        },
                        sap.ui.commons.MessageBox.Action.YES);

                }
                // if the cell does not contain any element
                else {
                    var currentTab = 'nav-Design-Layout';
                    pushDataInUndoQueue(currentTab);
                    var controlData = {};
                    controlData.ControlType = draggedNode.data().Object.ControlType;
                    controlData.controlId = dropToCellId.split(":")[0];
                    if (draggedNode.data("Object").ControlType == "sap.ui.commons.TextView") {
                        if (draggedNode.data("Object").Id != "" && draggedNode.data("Object").Id != null && draggedNode.data("Object").Id != undefined) {
                            controlData.Id = draggedNode.data("Object").Id;
                        }
                        if (draggedNode.data("Object").Text != "" && draggedNode.data("Object").Text != null && draggedNode.data("Object").Text != undefined) {
                            controlData.Text = draggedNode.data("Object").Text;
                        }

                    } else if (draggedNode.data("Object").ControlType == "sap.ui.commons.TextField") {

                        if (draggedNode.data("Object").Id != "" && draggedNode.data("Object").Id != null && draggedNode.data("Object").Id != undefined) {
                            controlData.Id = draggedNode.data("Object").Id;
                        }
                        if (draggedNode.data("Object").Text != "" && draggedNode.data("Object").Text != null && draggedNode.data("Object").Text != undefined) {
                            controlData.Text = draggedNode.data("Object").Text;
                        }
                        if (draggedNode.data("Object").Tooltip != "" && draggedNode.data("Object").Tooltip != null && draggedNode.data("Object").Tooltip != undefined) {
                            controlData.Tooltip = draggedNode.data("Object").Tooltip;
                        }

                    } else if (draggedNode.data("Object").ControlType == "sap.ui.commons.Button") {
                        if (draggedNode.data("Object").Id != "" && draggedNode.data("Object").Id != null && draggedNode.data("Object").Id != undefined) {
                            controlData.Id = draggedNode.data("Object").Id;
                        }
                        if (draggedNode.data("Object").Text != "" && draggedNode.data("Object").Text != null && draggedNode.data("Object").Text != undefined) {
                            controlData.Text = draggedNode.data("Object").Text;
                        }
                        if (draggedNode.data("Object").Width != "" && draggedNode.data("Object").Width != null && draggedNode.data("Object").Width != undefined) {
                            controlData.Width = draggedNode.data("Object").Width;
                        }
                    }
                    parentMatrixCell.data("Object").Controls.push(controlData);
                    //populate the cells with all the ui elements
                    populateCellContent(parentMatrixCell, parentMatrixCell.data());
                    sap.ui.getCore().getEventBus().publish("mii.ui.ce.events", "change");
                }
            }
        }
    });
}

function getDescriptionForSelectedParameters(selectedParameters, queryObject) {
    if (selectedParameters !== undefined && selectedParameters != null && selectedParameters.length != 0 && queryObject !== undefined && queryObject !== null) {
        var param = null;
        var paramList = {};
        var paramDescriptionList;
        var localisedParamsDesc = {};
        if (selectedParameters[0] !== undefined || selectedParameters[0] != null)
            param = selectedParameters[0].Name;
        if (selectedParameters.length > 1) {
            for (var i = 1; i < selectedParameters.length; i++) {
                param = param + "," + selectedParameters[i].Name;
            }
        }
        if (queryObject.FileType == "Tags" && (queryObject.TagDisplay == "Graph" || queryObject.TagDisplay == "QueryTable" || queryObject.TagDisplay == "Tags" || queryObject.TagDisplay == "Gauge") || queryObject.FileType == "MDOOnDemandDefinition" || queryObject.FileType == "MDOJoinedDefinition" || queryObject.FileType == "MDOPersistentDefinition" || queryObject.FileType == "BaseKPIDefinition" || queryObject.FileType == "CompositeKPIDefinition") {
            paramList = {
                "Mode": "ParamDescriptionList",
                "Data": param,
                "isQuery": false,
                "objectname": queryObject.Path + "/" + queryObject.Name,
                "content-type": "text/json"
            };
        } else if (queryObject.FileType == "SVGObject" && queryObject.SVGConfigData != null && queryObject.SVGConfigData != undefined && queryObject.SVGConfigData.queryPath != null && queryObject.SVGConfigData.queryPath != undefined) {
            paramList = {
                "Mode": "ParamDescriptionList",
                "Data": param,
                "isQuery": false,
                "objectname": queryObject.SVGConfigData.queryPath,
                "content-type": "text/json"
            };
        } else {
            paramList = {
                "Mode": "ParamDescriptionList",
                "Data": param,
                "isQuery": true,
                "objectname": queryObject.Path + "/" + queryObject.Name,
                "content-type": "text/json"
            };
        }
        paramDescriptionList = getDataFromServer(XMII_CECATALOG_URL, paramList);
        if (paramDescriptionList != undefined && paramDescriptionList != null && paramDescriptionList.Rowsets != undefined && paramDescriptionList.Rowsets != null && paramDescriptionList.Rowsets.Rowset[0] != undefined && paramDescriptionList.Rowsets.Rowset[0] != null && paramDescriptionList.Rowsets.Rowset[0].Row != undefined && paramDescriptionList.Rowsets.Rowset[0].Row != null) {
            localisedParamsDesc = paramDescriptionList.Rowsets.Rowset[0].Row;
            return localisedParamsDesc;
        }
    }
}
/**
 * function to get the default list of parameters
 * @param objectData
 * @return
 */
function getDefaultListParameters(objectData, templateTypeId) {
    if (objectData != null && objectData.Object != null && typeof(objectData.Object) !== "undefined") {
        var queryObjectData = objectData.Object;
        var fileType = determineFileType(queryObjectData.FileType);
        var param = {};
        var defaultParamList;
        var tagArray = objectData.TagArray;
        //if (tagArray.TagDisplay == "Graph" && tagArray != null && typeof(tagArray) != 'undefined' && tagArray.length > 0) {
        if (queryObjectData.FileType == "Tags" && queryObjectData.TagDisplay == "Graph") {
            //define 'DisplayParameters' array. This array will hold the default properties list for the display template defined for the dropped display object
            if (queryObjectData.DisplayParameters == undefined || queryObjectData.DisplayParameters == null) {
                param = {
                    "Mode": "DefaultParamList",
                    "objectname": "",
                    "templatetypeid": 8,
                    "content-type": "text/json"
                }; // 8 is the templatetypeid for i5Chart
                defaultParamList = getDataFromServer(XMII_CECATALOG_URL, param);
                if (defaultParamList != undefined && defaultParamList != null && defaultParamList.Rowsets != undefined && defaultParamList.Rowsets != null && defaultParamList.Rowsets.Rowset[0] != undefined && defaultParamList.Rowsets.Rowset[0] != null && defaultParamList.Rowsets.Rowset[0].Row != undefined && defaultParamList.Rowsets.Rowset[0].Row != null) {
                    queryObjectData.DisplayParameters = defaultParamList.Rowsets.Rowset[0].Row;
                }
            }

            if (queryObjectData.QueryParameters == undefined || queryObjectData.QueryParameters == null) {
                param = {
                    "Mode": "DefaultParamList",
                    "objectname": "",
                    "templatetypeid": 30,
                    "content-type": "text/json"
                }; //30 is the templatetypeid for CatalogQuery
                defaultParamList = getDataFromServer(XMII_CECATALOG_URL, param);
                if (defaultParamList != undefined && defaultParamList != null && defaultParamList.Rowsets != undefined && defaultParamList.Rowsets != null && defaultParamList.Rowsets.Rowset[0] != undefined && defaultParamList.Rowsets.Rowset[0] != null && defaultParamList.Rowsets.Rowset[0].Row != undefined && defaultParamList.Rowsets.Rowset[0].Row != null) {
                    queryObjectData.QueryParameters = defaultParamList.Rowsets.Rowset[0].Row;
                }
            }

        } else if (queryObjectData.FileType == "Tags" && queryObjectData.TagDisplay == "QueryTable") {
        	if(templateTypeId == undefined)
        		templateTypeId = 8;
        	//define 'DisplayParameters' array. This array will hold the default properties list for the display template defined for the dropped display object
            if (queryObjectData.DisplayParameters == undefined || queryObjectData.DisplayParameters == null || queryObjectData.DisplayParameters.length == 0 ) {
                param = {
                    "Mode": "DefaultParamList",
                    "objectname": "",
                    "templatetypeid": templateTypeId,
                    "content-type": "text/json"
                }; // 8 is the templatetypeid for i5Chart
                defaultParamList = getDataFromServer(XMII_CECATALOG_URL, param);
                if (defaultParamList != undefined && defaultParamList != null && defaultParamList.Rowsets != undefined && defaultParamList.Rowsets != null && defaultParamList.Rowsets.Rowset[0] != undefined && defaultParamList.Rowsets.Rowset[0] != null && defaultParamList.Rowsets.Rowset[0].Row != undefined && defaultParamList.Rowsets.Rowset[0].Row != null) {
                    queryObjectData.DisplayParameters = defaultParamList.Rowsets.Rowset[0].Row;
                }
            }
            
        	if (queryObjectData.QueryParameters == undefined || queryObjectData.QueryParameters == null) {
                param = {
                    "Mode": "DefaultParamList",
                    "objectname": "",
                    "templatetypeid": 30,
                    "content-type": "text/json"
                }; //30 is the templatetypeid for CatalogQuery
                defaultParamList = getDataFromServer(XMII_CECATALOG_URL, param);
                if (defaultParamList != undefined && defaultParamList != null && defaultParamList.Rowsets != undefined && defaultParamList.Rowsets != null && defaultParamList.Rowsets.Rowset[0] != undefined && defaultParamList.Rowsets.Rowset[0] != null && defaultParamList.Rowsets.Rowset[0].Row != undefined && defaultParamList.Rowsets.Rowset[0].Row != null) {
                    queryObjectData.QueryParameters = defaultParamList.Rowsets.Rowset[0].Row;
                }
            }
        }else if (fileType == FILE_TYPE_MDO) {
            //Converting MDO to i5Grid
            if (templateTypeId == 9) {
                //define 'Parameters' array. This array will hold the default properties list for the dropped object type
                param = {
                    "Mode": "DefaultParamList",
                    "objectname": "Predefined/DefaultMDOQuery",
                    "content-type": "text/json"
                };
                defaultParamList = getDataFromServer(XMII_CECATALOG_URL, param);
                if (defaultParamList != undefined && defaultParamList != null && defaultParamList.Rowsets != undefined && defaultParamList.Rowsets != null && defaultParamList.Rowsets.Rowset != undefined && defaultParamList.Rowsets.Rowset[0] != null && defaultParamList.Rowsets.Rowset[0].Row != undefined && defaultParamList.Rowsets.Rowset[0].Row != null) {
                    queryObjectData.Parameters = defaultParamList.Rowsets.Rowset[0].Row;
                }
                //define 'QueryParameters' array. This array will hold the default properties list for the query template defined for the dropped display object
                if (queryObjectData.MappedQueryTemplate != "" && queryObjectData.MappedQueryTemplate != "NA" && (queryObjectData.QueryParameters === undefined || queryObjectData.QueryParameters == null)) {
                    param = {
                        "Mode": "DefaultParamList",
                        "objectname": queryObjectData.MappedQueryTemplate,
                        "content-type": "text/json"
                    };
                    defaultParamList = getDataFromServer(XMII_CECATALOG_URL, param);
                    if (defaultParamList != undefined && defaultParamList != null && defaultParamList.Rowsets != undefined && defaultParamList.Rowsets != null && defaultParamList.Rowsets.Rowset != undefined && defaultParamList.Rowsets.Rowset[0] != null && defaultParamList.Rowsets.Rowset[0].Row != undefined && defaultParamList.Rowsets.Rowset[0].Row != null) {
                        queryObjectData.QueryParameters = defaultParamList.Rowsets.Rowset[0].Row;
                    }
                }

                if (templateTypeId != undefined && (queryObjectData.DisplayParameters == undefined || queryObjectData.DisplayParameters == null)) {
                    param = {
                        "Mode": "DefaultParamList",
                        "objectname": "",
                        "templatetypeid": templateTypeId,
                        "content-type": "text/json"
                    };
                    defaultParamList = getDataFromServer(XMII_CECATALOG_URL, param);
                    if (defaultParamList != undefined && defaultParamList != null && defaultParamList.Rowsets != undefined && defaultParamList.Rowsets != null && defaultParamList.Rowsets.Rowset != undefined && defaultParamList.Rowsets.Rowset[0] != null && defaultParamList.Rowsets.Rowset[0].Row != undefined && defaultParamList.Rowsets.Rowset[0].Row != null) {
                        queryObjectData.DisplayParameters = defaultParamList.Rowsets.Rowset[0].Row;
                    }

                    //While converting from Query to Grid, setting the default values as the selected columns
                    if (isObjectNotNull(queryObjectData) && (determineFileType(queryObjectData.FileType) == FILE_TYPE_MDO) && queryObjectData.Visualization == "Grid") {
                        if (defaultParamList != undefined && defaultParamList != null && defaultParamList.Rowsets != undefined && defaultParamList.Rowsets != null && defaultParamList.Rowsets.Rowset != undefined && defaultParamList.Rowsets.Rowset[0] != null && defaultParamList.Rowsets.Rowset[0].Row != undefined && defaultParamList.Rowsets.Rowset[0].Row != null) {
                            for (var i = 0; i < defaultParamList.Rowsets.Rowset[0].Row.length; i++) {
                                if (defaultParamList.Rowsets.Rowset[0].Row[i].Name == "DisplayColumns") {
                                    defaultParamList.Rowsets.Rowset[0].Row[i].DefaultValue = queryObjectData.SelectedColumns.join(",");
                                    break;
                                }
                            }
                        }
                    }
                }
            } else {
                //define 'DisplayParameters' array. This array will hold the default properties list for the display template defined for the dropped display object
                if (templateTypeId != undefined && (queryObjectData.DisplayParameters == undefined || queryObjectData.DisplayParameters == null)) {
                    param = {
                        "Mode": "DefaultParamList",
                        "objectname": "",
                        "templatetypeid": 8,
                        "content-type": "text/json"
                    }; // 8 is the templatetypeid for i5Chart
                    defaultParamList = getDataFromServer(XMII_CECATALOG_URL, param);
                    if (defaultParamList != undefined && defaultParamList != null && defaultParamList.Rowsets != undefined && defaultParamList.Rowsets != null && defaultParamList.Rowsets.Rowset[0] != undefined && defaultParamList.Rowsets.Rowset[0] != null && defaultParamList.Rowsets.Rowset[0].Row != undefined && defaultParamList.Rowsets.Rowset[0].Row != null) {
                        queryObjectData.DisplayParameters = defaultParamList.Rowsets.Rowset[0].Row;
                    }
                }

                //define 'QueryParameters' array. This array will hold the default properties list for the default MDO query
                if (queryObjectData.QueryParameters == undefined || queryObjectData.QueryParameters == null) {
                    param = {
                        "Mode": "DefaultParamList",
                        "objectname": "",
                        "templatetypeid": 28,
                        "content-type": "text/json"
                    }; //28 is the templatetypeid for MDOQuery
                    defaultParamList = getDataFromServer(XMII_CECATALOG_URL, param);
                    if (defaultParamList != undefined && defaultParamList != null && defaultParamList.Rowsets != undefined && defaultParamList.Rowsets != null && defaultParamList.Rowsets.Rowset[0] != undefined && defaultParamList.Rowsets.Rowset[0] != null && defaultParamList.Rowsets.Rowset[0].Row != undefined && defaultParamList.Rowsets.Rowset[0].Row != null) {
                        queryObjectData.QueryParameters = defaultParamList.Rowsets.Rowset[0].Row;
                    }
                }
            }
        } else if (fileType == FILE_TYPE_KPI) {
            //define 'DisplayParameters' array. This array will hold the default properties list for the display template defined for the dropped display object
            if (queryObjectData.DisplayParameters == undefined || queryObjectData.DisplayParameters == null) {
                param = {
                    "Mode": "DefaultParamList",
                    "objectname": "",
                    "templatetypeid": 8,
                    "content-type": "text/json"
                }; // 8 is the templatetypeid for i5Chart
                defaultParamList = getDataFromServer(XMII_CECATALOG_URL, param);
                if (defaultParamList != undefined && defaultParamList != null && defaultParamList.Rowsets != undefined && defaultParamList.Rowsets != null && defaultParamList.Rowsets.Rowset[0] != undefined && defaultParamList.Rowsets.Rowset[0] != null && defaultParamList.Rowsets.Rowset[0].Row != undefined && defaultParamList.Rowsets.Rowset[0].Row != null) {
                    queryObjectData.DisplayParameters = defaultParamList.Rowsets.Rowset[0].Row;
                }
            }

            /*//define 'QueryParameters' array. This array will hold the default properties list for the default MDO query
            if(queryObjectData.QueryParameters == undefined || queryObjectData.QueryParameters == null){
                param = {"Mode":"DefaultParamList","objectname":"","templatetypeid":28,"content-type":"text/json"}; //28 is the templatetypeid for MDOQuery
                defaultParamList = getDataFromServer(XMII_CECATALOG_URL, param);
                if(defaultParamList != undefined && defaultParamList != null && defaultParamList.Rowsets != undefined && defaultParamList.Rowsets != null && defaultParamList.Rowsets.Rowset[0] != undefined
                        && defaultParamList.Rowsets.Rowset[0] != null && defaultParamList.Rowsets.Rowset[0].Row != undefined && defaultParamList.Rowsets.Rowset[0].Row != null){
                    queryObjectData.QueryParameters = defaultParamList.Rowsets.Rowset[0].Row;
                }
            }*/

        } else {

            if (fileType == FILE_TYPE_DISPLAY || fileType == FILE_TYPE_QUERY ||
                fileType == FILE_TYPE_I5CHART || fileType == FILE_TYPE_I5GRID ||
                fileType == FILE_TYPE_I5SPCCHART) {
                //define 'Parameters' array. This array will hold the default properties list for the dropped object type
                param = {
                    "Mode": "DefaultParamList",
                    "objectname": queryObjectData.Path + "/" + queryObjectData.Name,
                    "content-type": "text/json"
                };
                defaultParamList = getDataFromServer(XMII_CECATALOG_URL, param);
                if (defaultParamList != undefined && defaultParamList != null && defaultParamList.Rowsets != undefined && defaultParamList.Rowsets != null && defaultParamList.Rowsets.Rowset != undefined && defaultParamList.Rowsets.Rowset[0] != null && defaultParamList.Rowsets.Rowset[0].Row != undefined && defaultParamList.Rowsets.Rowset[0].Row != null) {
                    queryObjectData.Parameters = defaultParamList.Rowsets.Rowset[0].Row;
                }
                //define 'QueryParameters' array. This array will hold the default properties list for the query template defined for the dropped display object
                if (queryObjectData.MappedQueryTemplate != "" && queryObjectData.MappedQueryTemplate != "NA" && (queryObjectData.QueryParameters === undefined || queryObjectData.QueryParameters == null)) {
                    param = {
                        "Mode": "DefaultParamList",
                        "objectname": queryObjectData.MappedQueryTemplate,
                        "content-type": "text/json"
                    };
                    defaultParamList = getDataFromServer(XMII_CECATALOG_URL, param);
                    if (defaultParamList != undefined && defaultParamList != null && defaultParamList.Rowsets != undefined && defaultParamList.Rowsets != null && defaultParamList.Rowsets.Rowset != undefined && defaultParamList.Rowsets.Rowset[0] != null && defaultParamList.Rowsets.Rowset[0].Row != undefined && defaultParamList.Rowsets.Rowset[0].Row != null) {
                        queryObjectData.QueryParameters = defaultParamList.Rowsets.Rowset[0].Row;
                    }
                }
            }

            //define 'DisplayParameters' array. This array will hold the default properties list for the display template defined for the dropped display object
            if (templateTypeId != undefined && (queryObjectData.DisplayParameters == undefined || queryObjectData.DisplayParameters == null || queryObjectData.DisplayParameters.length == 0)) {
                param = {
                    "Mode": "DefaultParamList",
                    "objectname": "",
                    "templatetypeid": templateTypeId,
                    "content-type": "text/json"
                };
                defaultParamList = getDataFromServer(XMII_CECATALOG_URL, param);
                if (defaultParamList != undefined && defaultParamList != null && defaultParamList.Rowsets != undefined && defaultParamList.Rowsets != null && defaultParamList.Rowsets.Rowset != undefined && defaultParamList.Rowsets.Rowset[0] != null && defaultParamList.Rowsets.Rowset[0].Row != undefined && defaultParamList.Rowsets.Rowset[0].Row != null) {
                    queryObjectData.DisplayParameters = defaultParamList.Rowsets.Rowset[0].Row;
                }

                //While changing from Query to Grid, setting the default values as the selected columns
                if (isObjectNotNull(queryObjectData) && (determineFileType(queryObjectData.FileType) == FILE_TYPE_QUERY) && queryObjectData.Visualization == "Grid") {
                    if (defaultParamList != undefined && defaultParamList != null && defaultParamList.Rowsets != undefined && defaultParamList.Rowsets != null && defaultParamList.Rowsets.Rowset != undefined && defaultParamList.Rowsets.Rowset[0] != null && defaultParamList.Rowsets.Rowset[0].Row != undefined && defaultParamList.Rowsets.Rowset[0].Row != null) {
                        for (var i = 0; i < defaultParamList.Rowsets.Rowset[0].Row.length; i++) {
                            if (defaultParamList.Rowsets.Rowset[0].Row[i].Name == "DisplayColumns") {
                                defaultParamList.Rowsets.Rowset[0].Row[i].DefaultValue = queryObjectData.SelectedColumns.join(",");
                                break;
                            }
                        }
                    }
                }
            }
            //The following condition is for the SVG dropped over an image
            if (templateTypeId == undefined && queryObjectData.FileType == FILE_TYPE_SVG && (queryObjectData.SVGConfigData != null && queryObjectData.SVGConfigData != undefined && queryObjectData.SVGConfigData.queryPath != null && queryObjectData.SVGConfigData.queryPath != undefined)) {
                param = {
                    "Mode": "DefaultParamList",
                    "objectname": queryObjectData.SVGConfigData.queryPath,
                    "content-type": "text/json"
                };
                defaultParamList = getDataFromServer(XMII_CECATALOG_URL, param);
                if (defaultParamList != undefined && defaultParamList != null && defaultParamList.Rowsets != undefined && defaultParamList.Rowsets != null && defaultParamList.Rowsets.Rowset != undefined && defaultParamList.Rowsets.Rowset[0] != null && defaultParamList.Rowsets.Rowset[0].Row != undefined && defaultParamList.Rowsets.Rowset[0].Row != null) {
                    queryObjectData.Parameters = defaultParamList.Rowsets.Rowset[0].Row;
                }
            }
        }
    }
}

function getDefaultParameterForPicAnalysisAsMap(objectData) {

    param = {
        "Mode": "loadParameters",
        "objectname": "Predefined/DefaultCatalogHistoryQuery",
        "content-type": "text/json",
        "GroupId": "1"
    };
    var parameters = [];
    defaultParamList1 = getDataFromServer(XMII_CECATALOG_URL, param);
    var dataArray = defaultParamList1.Rowsets.Rowset[0].Row;
    for (var i = 0; i < dataArray.length; i++) {
        if (dataArray[i].Name == "Mode") {
            dataArray[i].Value = "PICAnalysis";
            dataArray[i].isChanged = true; // This flag is added to know if the parameter is changed or not. only changed parameter go as a parameter to the object
            parameters.push(dataArray[i]);
        }
    }
    param = {
        "Mode": "loadParameters",
        "objectname": "Predefined/DefaultCatalogHistoryQuery",
        "content-type": "text/json",
        "GroupId": "55"
    };
    defaultParamList2 = getDataFromServer(XMII_CECATALOG_URL, param);

    var dataArray = defaultParamList2.Rowsets.Rowset[0].Row;
    for (var j = 0; j < dataArray.length; j++) {
        if (dataArray[j].Name == "SelectedNodes") {
            dataArray[j].Value = objectData.Namespace;
            dataArray[j].isChanged = true;
        }
        if (dataArray[j].Name == "Granularity") {
            dataArray[j].Value = "None";
            dataArray[j].isChanged = true;
        }
        if (dataArray[j].Name == "AnalysisAggregationModes") {
            dataArray[j].Value = "SUM";
            dataArray[j].isChanged = true;
        }


    }
    objectData.QueryParameters = parameters.concat(dataArray);
}

var stopRefreshIntervalId;
/*setter and getter methods for refresh rate interval ID's*/
function getQueryRefreshIntervalId() {
    return this.stopRefreshIntervalId;
}

function setQueryRefreshIntervalId(stopRefreshIntervalId) {
    this.stopRefreshIntervalId = stopRefreshIntervalId;
}

/* Getter method for dashBoard Title.*/
function getDashboardTitle() {
    return sap.mii.ce.dashBoardTitle;
}
/**
 * This function fetches the given permissions for the logged on user
 * @return
 */
function checkPermissionsForSSCE() {
    var param = {
        "Mode": "SSCECheckPermission",
        "content-type": "text/json"
    };
    var data = getDataFromServer(XMII_CECATALOG_URL, param);
    if (data.Rowsets !== undefined && data.Rowsets != null && data.Rowsets.Rowset !== undefined && data.Rowsets.Rowset != null && data.Rowsets.Rowset[0] !== undefined && data.Rowsets.Rowset[0] != null) {
        if (data.Rowsets.Rowset[0].Row !== undefined && data.Rowsets.Rowset[0].Row != null && data.Rowsets.Rowset[0].Row.length > 0) {
            //checking for read permission
            if (data.Rowsets.Rowset[0].Row[0].HasReadPermission.toLowerCase() == "true") {
                sap.mii.ce.hasReadPermission = true;
            }

            //checking for developer permission
            if (data.Rowsets.Rowset[0].Row[0].HasDeveloperPermission.toLowerCase() == "true") {
                sap.mii.ce.hasDeveloperPermission = true;
            }
            //Check for MII Admin Role
            if (data.Rowsets.Rowset[0].Row[0].HasMIIAdminRole.toLowerCase() == "true") {
            	 sap.mii.ce.hasMIIAdminRole = true;
            }
           
            //checking for change permission
            if (data.Rowsets.Rowset[0].Row[0].HasChangePermission.toLowerCase() == "true") {
                sap.mii.ce.hasChangePermission = true;
            }
            //checking for All permissions so that each check can be overridden
            if (data.Rowsets.Rowset[0].Row[0].HasAllPermissions.toLowerCase() == "true") {
                sap.mii.ce.hasAllPermissions = true;
            }
            //checking for ALL mii Content permissions
            if (data.Rowsets.Rowset[0].Row[0].HasAllMIIContentPermissions.toLowerCase() == "true") {
                sap.mii.ce.hasAllMIIContentPermissions = true;
            }
            //checking for Display Templates Permission
            if (data.Rowsets.Rowset[0].Row[0].HasDisplayTemplatePermission.toLowerCase() == "true") {
                sap.mii.ce.hasDisplayTemplatePermission = true;
            }
            //Checking for Query Templates Permission
            if (data.Rowsets.Rowset[0].Row[0].HasQueryTemplatePermission.toLowerCase() == "true") {
                sap.mii.ce.hasQueryTemplatePermission = true;
            }
            //Checking for Data Objects Permission
            if (data.Rowsets.Rowset[0].Row[0].HasDataObjectsPermission.toLowerCase() == "true") {
                sap.mii.ce.hasDataObjectsPermission = true;
            }
            //Checking for Resource Files Permissions
            if (data.Rowsets.Rowset[0].Row[0].HasResourceFilesPermission.toLowerCase() == "true") {
                sap.mii.ce.hasResourceFilesPermission = true;
            }
            //Checking For UI Elements Permissions
            if (data.Rowsets.Rowset[0].Row[0].HasUIElementsPermission.toLowerCase() == "true") {
                sap.mii.ce.hasUIElementsPermission = true;
            }
            //Checking for Plant Information Catalog Permission
            if (data.Rowsets.Rowset[0].Row[0].HasPICPermission.toLowerCase() == "true") {
                sap.mii.ce.hasPICPermission = true;
            }
            if (data.Rowsets.Rowset[0].Row[0].HasLiveMode.toLowerCase() == "true") {
                global_isDesignTimeMode = false;
            } else {
                global_isDesignTimeMode = true;
            }
            //Commented below code as it requires design change
            //ssce_tab =data.Rowsets.Rowset[0].Row[0].SSCETAB.toLowerCase();

        }
    }
}

/**
 * This function is responsible for taking care of the select events on the area on runtime
 * @param areaObject
 * @return
 */
function showTagTrendsAndHandleClickOnArea(areaObject) {
    var areaName = areaObject.attributes.name.value;
    var objectName = null;
    var isQuery = false;
    var sapControl = null;
    //finding the current dropped tag on the area by id pattern
    jQuery.sap.byId("imgContainer:" + areaObject.id.split(":")[0]).children().each(function() {
        if (this.id.match(/^tag/gi) != null) {
            var sapControlObject = sap.ui.getCore().byId(this.id);
            if (sapControlObject.data("area") == areaName) {
                objectName = sapControlObject.data("namespace");
                sapControl = sapControlObject;
            }
        }
    });

    //checking if the sapControl is null then need to check for the query as well
    if (isObjectNull(sapControl)) {
        jQuery.sap.byId("imgContainer:" + areaObject.id.split(":")[0]).children().each(function() {
            if (this.id.match(/^query/gi) != null) {
                var sapControlObject = sap.ui.getCore().byId(this.id);
                if (sapControlObject.data("Area") == areaName) {
                    objectName = sapControlObject.data("QueryPath");
                    isQuery = true;
                    sapControl = sapControlObject;
                }
            }
        });
    }

    //checking if the on click function is enabled to show the chart or query data
    if (isObjectNotNull(sapControl) && objectName != null) {
    	//checking if an event handler function has to be called
    	//Fire Area Event
    	if (isObjectNotNull(sapControl.data("areaEvent")) && sapControl.data("areaEvent") == "true" &&
    			areaObject.attributes.selectCallback.value == "true" && isObjectNotNull(areaObject.attributes.selectFunctionName.value)) {
    		window[areaObject.attributes.selectFunctionName.value](areaName);
    	}
    	//checking if an event handler function has to be called
    	//If tag is not shown, fire tag event
    	if(!sapControl.getShowValue()){
    		if (isObjectNotNull(sapControl.getOnClickFunctionName()) && sapControl.getOnClickFunctionName() != "" &&
    				sapControl.getOnClickFunctionName() != "null") {
    			window[sapControl.getOnClickFunctionName()](sapControl.data("namespace"), sapControl.getValue());
    		}
    		//checking if the showTagTrend is true for object
    		if (sapControl.getShowTagTrend()) {
    			//creating a dialog with title as the tag name itself
    			var trendDialog = new sap.ui.commons.Dialog("trendDialog", {
    				title: objectName,
    				width: "50%",
    				height: "50%",
    				modal: true
    			});
    			//destroying each and everything when the dialog is closed
    			trendDialog.attachClosed(function() {
    				showApplets();
    				this.destroyContent();
    				this.destroy();
    			});
    			//creating an absolute layout to hold the chart content
    			var trendLayout = new sap.ui.commons.layout.AbsoluteLayout("tagTrendChartLayout", {
    				width: "100%",
    				height: "100%"
    			});
    			
    			//adding the script for the chart or querytable is created
    			var chartHTML = "";
    			if (isQuery) {
    				chartHTML = "<script>\n";
    				chartHTML += "try {\n";
    				chartHTML += "\tvar queryTableObject = new QueryTable(\"" + objectName + "\");\n";
    				var queryParams = sapControl.data("QueryParams");
    				for (var i = 0; i < queryParams.length; i++) {
    					chartHTML += "\tqueryTableObject.setParameter(\"" + queryParams[i].Name + "\", \"" + queryParams[i].Value + "\");\n";
    				}
    				chartHTML += "\tqueryTableObject.draw(\"tagTrendChartLayout\");\n";
    				chartHTML += "} catch (err) {\n";
    				chartHTML += "\tconsole.log(\"An error has occured: \" + err.name + \"-\" + err.message);\n";
    				chartHTML += "}\n";
    				chartHTML += "</script>\n";
    			} else {
    				var tagData = {};
    				tagData.Namespace = sapControl.data("namespace");
    				
    				var delimitedData = applyNamespaceDelimiterForTags([tagData], false);
    				chartHTML = "<script>\n";
    				chartHTML += "try {\n";
    				chartHTML += "\tvar tagTrendChart = new com.sap.xmii.chart.hchart.i5Chart(com.sap.xmii.common.util.ChartTypes.LINE, \"Predefined/DefaultCatalogHistoryQuery\");\n";
    				chartHTML += "\ttagTrendChart.getQueryObject().setParameter(\"SelectedObjects\",  \"" + delimitedData.selectedObjects+ "\");\n";
    				chartHTML += "\ttagTrendChart.getQueryObject().setParameter(\"NamespaceDelimeter\",\"" + delimitedData.delimiter + "\");\n";
    				chartHTML += "\ttagTrendChart.getQueryObject().setMode(\"History\");\n";
    				chartHTML += "\ttagTrendChart.getChartTemplateObject().setProperty(\"ValueColumns\",\"" + delimitedData.selectedObjects + "\");\n";
    				chartHTML += "\ttagTrendChart.getChartTemplateObject().setProperty(\"TimeSeries\",true);\n";
    				chartHTML += "\ttagTrendChart.setChartHeight(getActualHeightFromDOM(\"trendDialog\"));\n";
    				chartHTML += "\ttagTrendChart.draw(\"tagTrendChartLayout\");\n";
    				chartHTML += "} catch (err) {\n";
    				chartHTML += "\tconsole.log(\"An error has occured: \" + err.name + \"-\" + err.message);\n";
    				chartHTML += "}\n";
    				chartHTML += "</script>\n";
    				//adjusting the chart height after the absolute layout has been rendered
    				trendLayout.addEventDelegate({
    					onAfterRendering: function() {
    						window.setTimeout("tagTrendChart.refreshData()", 1000);
    					}
    				});
    			}
    			
    			var htmlControl = new sap.ui.core.HTML();
    			htmlControl.setContent(chartHTML);
    			trendLayout.addContent(htmlControl);
    			trendDialog.addContent(trendLayout);
    			
    			trendDialog.open();
    			hideApplets();
    		}
    	}
    } else {
    	//checking if an event handler function has to be called
    	//Area Event
    	if (isObjectNull(sapControl) && areaObject.attributes.selectCallback.value == "true" && isObjectNotNull(areaObject.attributes.selectFunctionName.value)) {
    		window[areaObject.attributes.selectFunctionName.value](areaName);
    	}
    }
}

/**
 * This function is responsible to find out if any other Object exists on area then the object drop
 * an this area is ignored, if the same object is dropped again then it is considered
 * @param onDropped
 * @param areaName
 * @param tagData
 * @return
 */
function isAnyOtherObjectExistOnArea(onDropped, areaName, droppedObjectId, isNewObject) {
    var panelContent = onDropped.getContent();
    var objectIdsRedragged = [];
    //after the addition of tags, the panel contents would now be an array
    for (var l = 0; l < panelContent.length; l++) {
        var object = panelContent[l];
        if (object == null || object == 'undefined') continue;
        //finding if the object is a tag or a query
        var objectMatch = object.getId().match(/CatalogObject/) || object.getId().match(/QueryObject/);;
        if (objectMatch != null && objectMatch.length > 0) {
            var existingAreaName = undefined;
            if (objectMatch[0] == "CatalogObject")
                existingAreaName = object.data("TagData").Area;
            else if (objectMatch[0] == "QueryObject")
                existingAreaName = object.data("QueryObjectData").Area;
            //if no area is found on the tag then move to next tag
            if (existingAreaName == undefined && existingAreaName == null) continue;
            //if the new tag is dropped from the PIC Content tree
            if (isNewObject) {
                //if a match is found then a tag already exists on the area
                if (areaName == existingAreaName) {
                    return true;
                }
                //have to check if a tag is re-dragged on dropped on to the area    
            } else {
                if (areaName == existingAreaName) {
                    /*There can be two cases:
                        1. If a tag is readjusted on the area then the area object has to be saved
                        2. If the tag is dragged from some other place in the cell to this area then
                            need to check if any other tag is present with the same area configured
                    */
                    objectIdsRedragged.push(object.getId());
                }
            }
        }
    }
    if (objectIdsRedragged.length == 0) {
        //no tag present on the area
        return false;
    }
    if (objectIdsRedragged.length > 1) {
        //some error condition and needs to be corrected
        jQuery(objectIdsRedragged).each(function() {
            if (sap.ui.getCore().byId(this).data("TagData") !== undefined && sap.ui.getCore().byId(this).data("TagData") != null)
                sap.ui.getCore().byId(this).data("TagData").Area = null;
            if (sap.ui.getCore().byId(this).data("QueryObjectData") !== undefined && sap.ui.getCore().byId(this).data("QueryObjectData") != null)
                sap.ui.getCore().byId(this).data("QueryObjectData").Area = null;
        });
        return false;
    }
    if (objectIdsRedragged.indexOf(droppedObjectId) != -1) {
        //same tag is dropped
        return false;
    } else {
        //some other tag is present with the same area
        return true;
    }
    return false;
}
/**
 * This function is responsible for showing applets as they might get hidden after calling
 * hideApplets() when a dialog is opened in SSCE
 * @return
 */
function showApplets() {
    //showing applets
    jQuery(parent.document).find('applet').show();
}
/**
 * This function is responsible for hiding applets when a dialog is opened over them
 * @return
 */
function hideApplets() {
    //hiding applets
	
    jQuery(parent.document).find('applet').hide();
}

/**
 * This function is used to redirect to desktop site
 * @return
 */
function requestDesktopSite() {
    var url = window.location.search;
    if (url == "") {
        window.location.href = window.location.href.replace("_mobile", "") + "?displayDesktopVersion=true";
    } else {
        window.location.href = window.location.href.replace("_mobile", "") + "&displayDesktopVersion=true";
    }
}


/*copy to clipboard function 
 *  On click of copy to clipboard button, the content in the cell with all the configurations 
 *  is moved to the clipboard.
 * */

function copyToClipboard(panelId) {
    //formatted date in to the required format
    var timestamp = Date().substr(0, 24);
    //var timestamp = com.sap.xmii.common.util.MIIi5Util.dateFromSeconds((Math.round(new Date().getTime()/1000)).toString(), "dd-MMM-yyyy hh:mm:ss a z");
    sap.ui.getCore().byId(panelId).data("timestamp", timestamp);
    // Following line adds script for event to the object to be copied to clipboard
    sap.ui.getCore().byId(panelId).data("globalUserScript", globalUserScript);
    //To copy any included or added files.
    if(globalUserFiles!="" && globalUserFiles!=null && globalUserFiles!=undefined)
       sap.ui.getCore().byId(panelId).data("globalUserFiles", globalUserFiles);
    
    //Cloning the celldata
    var cellData = sap.ui.getCore().byId(panelId).data();
    var clonedData = {};
  
    jQuery.extend(true, clonedData, cellData);
   
    //cell content is moved to clipboard
    sap.mii.ce.clipboardData.push(clonedData);
      
    //notification is shown
    var info_message = oBundle.getText("XMSG_MERGE_INFO").replace("{0}", 1);
    showNotificationBarMsg(1, info_message);

    //checking the clipboard pane is already opened or not 
    if (sap.ui.getCore().byId("main-shell")._sOpenPaneId == "PI_Clipboard")
        sap.ui.getCore().byId("shellView").getController().getPaneContent("clipboard");
    //if the clipboard pane is not opened then opening here
    else
        sap.ui.getCore().byId("main-shell").openPane("PI_Clipboard");
}

function getSPCChartTypeNumber(type) {
    switch (type) {
        case 'XBAR':
            return 0;
        case 'XBAR-MR':
            return 1;
        case 'XBAR-RANGE':
            return 2;
        case 'XBAR-SDEV':
            return 3;
        case 'INDIVIDUALS':
            return 4;
        case 'INDIVIDUALS-MR':
            return 5;
        case 'MR':
            return 6;
        case 'MEDIAN':
            return 7;
        case 'MEDIAN-RANGE':
            return 8;
        case 'EWMA':
            return 9;
        case 'EWMA-RANGE':
            return 10;
        case 'EWMA-SDEV':
            return 11;
        case 'HISTOGRAM':
            return 12;
        case 'INDIVIDUALS-SHORT-RUN':
            return 13;
        case 'INDIVIDUALS-MR-SHORT-RUN':
            return 14;
        case 'XBAR-RANGE-SHORT-RUN':
            return 15;
        case 'MR-SHORT-RUN':
            return 16;
        case 'P':
            return 17;
        case 'NP':
            return 18;
        case 'C':
            return 19;
        case 'U':
            return 20;
        default:
            break;
    }
}

/**
 * This function Would check if the object is undefined or null
 * @param object
 * @return
 */
function isObjectNull(object) {
    if (object === undefined || object === null)
        return true;

    return false;
}

/**
 * This function Would check if the object is not undefined and not null
 * @param object
 * @return
 */
function isObjectNotNull(object) {
    if (object !== undefined && object !== null && object !== "")
        return true;

    return false;
}

/**
 * This function would check if the array is undefined, null or empty
 * @param array
 * @return
 */
function isArrayEmpty(array) {
    if (array === undefined || array == null || array.length == 0)
        return true;

    return false;
}

/**
 * This function would check if the array is not undefined, null and length is greater than 0
 * @param array
 * @return
 */
function isArrayNotEmpty(array) {
    if (array !== undefined && array != null && array.length > 0)
        return true;

    return false;
}

/**
 * This function would check if the given function name is valid or not
 * @param functionName
 * @return
 */

function validateEventHandlerName(functionName) {
    if (functionName != "") {
        //Creation of Regular Expression
        var validNameCharacters = /^[$A-Z_][0-9A-Z_$]*$/i;
        return validNameCharacters.test(functionName);
    } else return true;
}

/**
 * This function is responsible to generate the code for the SVG dragged over Image 
 * @param cellID
 * @param SVGArray
 * @param runtime
 * @param divCellId
 * @return
 */
function createHtmlCodeForSVG(cellID, SVGArray, runtime, divCellId) {
    LoadModules.svg = true;
    var htmlScript = "";
    //Getting the width and height for the futher manipulation for the top and left of the div
    var onDroppedWidth = jQuery.sap.byId(cellID).width();
    var onDroppedHeight = jQuery.sap.byId(cellID).height();

    //need to each and every SVG object on the layout
    for (i = 0; i < SVGArray.length; i++) {
        var svgObj = SVGArray[i];

        htmlScript += '\t\t\t\t\ttry{\n';
        htmlScript += "\t\t\t\t\t\t\tvar svgData_" + cellID + "_" + i + " = {};\n";
        htmlScript += "\t\t\t\t\t\t\tsvgData_" + cellID + "_" + i + ".path = \"" + svgObj.Path + "\";\n";
        htmlScript += "\t\t\t\t\t\t\tsvgData_" + cellID + "_" + i + ".name = \"" + svgObj.Name + "\";\n";
        //Mapped Query Template
        if (isObjectNotNull(svgObj.MappedQueryTemplate)) {
            htmlScript += "\t\t\t\t\t\t\tsvgData_" + cellID + "_" + i + ".mappedQueryTemplate = \"" + svgObj.MappedQueryTemplate + "\";\n";
        }
        //Parent folder name
        if (isObjectNotNull(svgObj.ParentFolderName)) {
            htmlScript += "\t\t\t\t\t\t\tsvgData_" + cellID + "_" + i + ".parentFolderName = \"" + svgObj.ParentFolderName + "\";\n";
        }
        //Parent Path
        if (isObjectNotNull(svgObj.ParentPath)) {
            htmlScript += "\t\t\t\t\t\t\tsvgData_" + cellID + "_" + i + ".parentPath = \"" + svgObj.ParentPath + "\";\n";
        }
        //Other useful fields
        htmlScript += "\t\t\t\t\t\t\tsvgData_" + cellID + "_" + i + ".percentX = \"" + svgObj.xPos + "\";\n";
        htmlScript += "\t\t\t\t\t\t\tsvgData_" + cellID + "_" + i + ".percentY = \"" + svgObj.yPos + "\";\n";
        if (svgObj.NewCalculatedPos != undefined && svgObj.NewCalculatedPos)
            htmlScript += "\t\t\t\t\t\t\tsvgData_" + cellID + "_" + i + ".changedPercentY = true;\n";

        htmlScript += "\t\t\t\t\t\t\tsvgData_" + cellID + "_" + i + ".divCellId = \"" + divCellId + "\";\n";
        htmlScript += "\t\t\t\t\t\t\tsvgData_" + cellID + "_" + i + ".parentCellId = \"" + cellID + "\";\n";

        if (!runtime) {
            //Calculating the cell height and width 
            var paneAdjustment = $("#" + cellID).parent().width() / $("#matrix1").width();
            //Adding the width and height hidden due to the pane
            if (sap.ui.getCore().byId("main-shell").isPaneOpen()) {
                var designTimeCellWidth = ($("#" + cellID).parent().width() + (250 * paneAdjustment));
            } else {
                var designTimeCellWidth = $("#" + cellID).parent().width();
            }
            var designTimeCellHeight = $("#" + cellID).parent().height();

            if (designTimeCellWidth == null || isNaN(designTimeCellWidth) || designTimeCellHeight == null || isNaN(designTimeCellHeight)) {
                designTimeCellWidth = svgObj.DesignTimeCellWidth;
                designTimeCellHeight = svgObj.DesignTimeCellHeight;
                //this flag to check whether the recalculation of designtimeheight or other properties required
                htmlScript += "\t\t\t\t\t\t\tsvgData_" + cellID + "_" + i + ".recalculate = " + true + ";\n";
            }
            htmlScript += "\t\t\t\t\t\t\tsvgData_" + cellID + "_" + i + ".designTimeCellWidth = " + designTimeCellWidth + ";\n";
            htmlScript += "\t\t\t\t\t\t\tsvgData_" + cellID + "_" + i + ".designTimeCellHeight = " + designTimeCellHeight + ";\n";
            if (svgObj.HeightPercentage == null || svgObj.WidthPercentage == null) {
                if ((designTimeCellWidth != null && !isNaN(designTimeCellWidth)) || (designTimeCellHeight != null && !isNaN(designTimeCellHeight))) {
                    svgObj.HeightPercentage = svgObj.Height / designTimeCellHeight;
                    svgObj.WidthPercentage = svgObj.Width / designTimeCellWidth;
                } else {
                    htmlScript += "\t\t\t\t\t\t\tsvgData_" + cellID + "_" + i + ".height = " + svgObj.Height + ";\n";
                    htmlScript += "\t\t\t\t\t\t\tsvgData_" + cellID + "_" + i + ".width  = " + svgObj.Width + ";\n";
                }
            }
            htmlScript += "\t\t\t\t\t\t\tsvgData_" + cellID + "_" + i + ".heightPercentage = " + svgObj.HeightPercentage + ";\n";
            htmlScript += "\t\t\t\t\t\t\tsvgData_" + cellID + "_" + i + ".widthPercentage  = " + svgObj.WidthPercentage + ";\n";

        } else {
            if (svgObj.HeightPercentage != null || svgObj.WidthPercentage != null ||
                svgObj.DesignTimeCellWidth != null || svgObj.DesignTimeCellHeight != null) {

                htmlScript += "\t\t\t\t\t\t\tsvgData_" + cellID + "_" + i + ".heightPercentage = " + svgObj.HeightPercentage + ";\n";
                htmlScript += "\t\t\t\t\t\t\tsvgData_" + cellID + "_" + i + ".widthPercentage = " + svgObj.WidthPercentage + ";\n";
                htmlScript += "\t\t\t\t\t\t\tsvgData_" + cellID + "_" + i + ".designTimeCellWidth = " + svgObj.DesignTimeCellWidth + ";\n";
                htmlScript += "\t\t\t\t\t\t\tsvgData_" + cellID + "_" + i + ".designTimeCellHeight = " + svgObj.DesignTimeCellHeight + ";\n";
            } else {
                htmlScript += "\t\t\t\t\t\t\tsvgData_" + cellID + "_" + i + ".height = " + svgObj.Height + ";\n";
                htmlScript += "\t\t\t\t\t\t\tsvgData_" + cellID + "_" + i + ".width = " + svgObj.Width + ";\n";
            }
        }



        //Checking whether user is in runtime/preview mode or design/live mode
        if (!runtime) {
            //Setting the runtime only during design mode
            htmlScript += "\t\t\t\t\t\t\tsvgData_" + cellID + "_" + i + ".runtime = \"" + runtime + "\";\n";
            //During design mode, Parametersis sent as s JSON string
            if (isObjectNotNull(svgObj.Parameters) && svgObj.Parameters.length != 0) {
                htmlScript += "\t\t\t\t\t\t\tsvgData_" + cellID + "_" + i + ".Parameters = " + JSON.stringify(svgObj.Parameters) + ";\n";
            }
        }
        //checking for the SVGconfigData        
        if (svgObj.SVGConfigData != undefined) {
            var onClick = svgObj.SVGConfigData.selectClick;
            var onClickMethod = svgObj.SVGConfigData.selectMethodName;
            htmlScript += "\t\t\t\t\t\t\tsvgData_" + cellID + "_" + i + ".autoRefresh = \"" + svgObj.SVGConfigData.autoRefresh + "\";\n";
            htmlScript += "\t\t\t\t\t\t\tsvgData_" + cellID + "_" + i + ".refreshRate = \"" + svgObj.SVGConfigData.refreshRate + "\";\n";
            htmlScript += "\t\t\t\t\t\t\tsvgData_" + cellID + "_" + i + ".queryPath = \"" + svgObj.SVGConfigData.queryPath + "\";\n";
            htmlScript += "\t\t\t\t\t\t\tsvgData_" + cellID + "_" + i + ".selectClick = " + svgObj.SVGConfigData.selectClick + ";\n";
            htmlScript += "\t\t\t\t\t\t\tsvgData_" + cellID + "_" + i + ".selectMethodName = \"" + svgObj.SVGConfigData.selectMethodName + "\";\n";
        }
        //Defining the SVG
        htmlScript += "\t\t\t\t\t\t\tvar svgObject_" + cellID + "_" + i + " = new com.sap.xmii.ssce.SVGView(svgData_" + cellID + "_" + i + ");\n";
        //During runtime, if the svgObj.parameters is not null, include addParameter with the name and value as a parameters
        if (runtime && isObjectNotNull(svgObj.Parameters) && svgObj.Parameters.length != 0) {
            //Looping through the svgObj.parameters to provide parameters name and value
            for (var j = 0; j < svgObj.Parameters.length; j++) {
                if (isObjectNotNull(svgObj.Parameters[j].UserParameter)) {
                    htmlScript += "\t\t\t\t\t\t\tsvgObject_" + cellID + "_" + i + " .addParameter(\"" + svgObj.Parameters[j].Name + "\"," + svgObj.Parameters[j].UserParameter + ");\n";
                } else if (svgObj.Parameters[j].isChanged) {
                    htmlScript += "\t\t\t\t\t\t\tsvgObject_" + cellID + "_" + i + " .addParameter(\"" + svgObj.Parameters[j].Name + "\",\"" + svgObj.Parameters[j].Value + "\");\n";
                }
            }
        }

        //to make the svg over an image, clickable
        if (runtime && onClick && onClickMethod != "") {
            if (isObjectNotNull(svgObj.SVGConfigData)) {
                var callBackData = svgObj.SVGConfigData;
                if (isObjectNotNull(callBackData) && isObjectNotNull(callBackData.selectClick) && callBackData.selectClick && isObjectNotNull(callBackData.selectMethodName) && callBackData.selectMethodName != "") {
                    var method = callBackData.selectMethodName;
                    if (globalUserScript.search("function " + method) == -1) {
                        var objectName = "SVG_SELECT_CALLBACK_OBJECT";
                        var functionName = "Function called when you click SVG Object";
                        var javadoc = '\n/**' +
                            '\n' + functionName +
                            '\nParameters:' +
                            '\n\tsvgData :\t' + 'contains information about SVG' +
                            '\n\t\tsvgData.svgName :\t' + 'Returns SVG name' +
                            '\n**/';
                        globalUserScript += javadoc;
                        globalUserScript += '\n' + 'function ' + method + '(svgData){\n//TODO\n}\n';
                    }
                }
            }
        }

        //Calling the drawSVG
        htmlScript += "\t\t\t\t\t\t\tsvgObject_" + cellID + "_" + i + ".drawSVG();\n";
        //if SVGConfigData is not undefined, refreshSVG is called
        if (svgObj.SVGConfigData != undefined) {
            htmlScript += "\t\t\t\t\t\t\tsvgObject_" + cellID + "_" + i + ".refreshSVG(" + svgObj.SVGConfigData.refreshRate + ");\n";
        }

        htmlScript += '\t\t\t\t\t}catch(err){\n';
        htmlScript += '\t\t\t\t\t\tconsole.log("An error has occured: " + err.name + "-" + err.message);\n';
        htmlScript += '\t\t\t\t\t\tconsole.log(err.stack);\n';
        htmlScript += '\t\t\t\t\t}\n';
    }
    return htmlScript;
}


/**
 * This function is responsible to generate the code for the Gauge chart converted from tag over Image 
 * @param cellID
 * @param tagArray
 * @param runtime
 * @param divCellId
 * @return
 */
function createHtmlScriptForGauge(cellID, tagArray, runtime, divCellId, index) {

    var htmlScript = "";
    //Getting the width and height for the futher manipulation for the top and left of the div
    var onDroppedWidth = jQuery.sap.byId(cellID).width();
    var onDroppedHeight = jQuery.sap.byId(cellID).height();

    var tagObj = tagArray;

    htmlScript += '\t\t\t\t\ttry{\n';
    htmlScript += "\t\t\t\t\t\t\tvar gaugeData_" + index + "_" + cellID + " = {};\n";
    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".isTag = true;\n";
    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".Namespace = \"" + tagObj.Namespace + "\";\n";
    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".Name = \"" + tagObj.Name + "\";\n";
    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".Alias = \"" + tagObj.TagAlias + "\";\n";
    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".divCellId = \"" + divCellId + "\";\n";
    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".DataType = \"" + tagObj.DataType + "\";\n";

    //Other useful fields
    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".xPos = \"" + tagObj.xPos + "\";\n";
    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".yPos = \"" + tagObj.yPos + "\";\n";
    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".NewCalculatedPos = " + tagObj.NewCalculatedPos + ";\n";

    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".parentCellId = \"" + cellID + "\";\n";
    
    //Fields related to Virtual Tag
    if(tagObj.VirtualTag){
	    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".Id = \"" + tagObj.Id + "\";\n";
	    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".FileType = \"" + tagObj.FileType + "\";\n";
	    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".TransactionPath = \"" + tagObj.TransactionPath + "\";\n";
	    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".VirtualTag = " + tagObj.VirtualTag + ";\n";
    }
    //Calculating the cell height and width
    var paneAdjustment = $("#" + cellID).parent().width() / $("#matrix1").width();
    //Adding the width and height hidden due to the pane
    if (sap.ui.getCore().byId("main-shell").isPaneOpen()) {
        var designTimeCellWidth = ($("#" + cellID).parent().width() + (250 * paneAdjustment));
    } else {
        var designTimeCellWidth = $("#" + cellID).parent().width();
    }

    var designTimeCellHeight = $("#" + cellID).parent().height();

    if (designTimeCellWidth == null || designTimeCellHeight == null) {
        designTimeCellWidth = tagObj.DesignTimeCellWidth;
        designTimeCellHeight = tagObj.DesignTimeCellHeight;
        //this flag to check whether the recalculation of designtimeheight or other properties required
        htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".Recalculate = " + true + ";\n";

    }
    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".DesignTimeCellWidth = " + designTimeCellWidth + ";\n";
    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".DesignTimeCellHeight = " + designTimeCellHeight + ";\n";

    if (tagObj.HeightPercentage == null) {
        if (designTimeCellWidth != null || designTimeCellHeight != null) {
            tagObj.HeightPercentage = tagObj.Height / designTimeCellHeight;
            tagObj.WidthPercentage = tagObj.Width / designTimeCellWidth;
        } else {
            htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".Height = " + tagObj.Height + ";\n";
            htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".Width  = " + tagObj.Width + ";\n";
        }
    }
    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".HeightPercentage = " + tagObj.HeightPercentage + ";\n";
    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".WidthPercentage  = " + tagObj.WidthPercentage + ";\n";


    if (!runtime) {
        //Setting the runtime only during design mode
        htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".runtime = \"" + runtime + "\";\n";
    }
    if (isObjectNotNull(tagObj.DisplayParameters) && tagObj.DisplayParameters.length != 0) {
        htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".Parameters = " + JSON.stringify(tagObj.DisplayParameters) + ";\n";
    }

    if (isObjectNotNull(tagObj.EventsData)) {
        htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".EventsData = " + JSON.stringify(tagObj.EventsData) + ";\n";
    }
    if (isObjectNotNull(tagObj.DisplayData)) {
        htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".DisplayData = " + JSON.stringify(tagObj.DisplayData) + ";\n";
    }
    if(tagObj.VirtualTag && isObjectNotNull(tagObj.SettingsData)){
    	htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".SettingsData = " + JSON.stringify(tagObj.SettingsData) + ";\n";
    }
    if(tagObj.VirtualTag && isObjectNotNull(tagObj.QueryParameters)){
    	htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".QueryParams = " + JSON.stringify(tagObj.QueryParameters) + ";\n";
    }
    htmlScript += "\t\t\t\t\t\t\tvar gaugeObject_" + index + "_" + cellID + " = new com.sap.xmii.ssce.GaugeView(gaugeData_" + index + "_" + cellID + ");\n";

    htmlScript += "\t\t\t\t\t\t\tgaugeObject_" + index + "_" + cellID + ".drawGauge();\n";

    htmlScript += '\t\t\t\t\t}catch(err){\n';
    htmlScript += '\t\t\t\t\t\tconsole.log("An error has occured: " + err.name + "-" + err.message);\n';
    htmlScript += '\t\t\t\t\t\tconsole.log(err.stack);\n';
    htmlScript += '\t\t\t\t\t}\n';
    return htmlScript;
}
/**
 * This function is responsible to generate the code for the Gauge chart converted from query over Image 
 * @param cellID
 * @param queryArray
 * @param runtime
 * @param divCellId
 * @return
 */
function createHtmlScriptForQueryConvertedToGauge(cellID, queryObj, runtime, divCellId, index) {
    var htmlScript = "";
    //Getting the width and height for the futher manipulation for the top and left of the div
    var onDroppedWidth = jQuery.sap.byId(cellID).width();
    var onDroppedHeight = jQuery.sap.byId(cellID).height();

    htmlScript += '\t\t\t\t\ttry{\n';
    htmlScript += "\t\t\t\t\t\t\tvar gaugeData_" + index + "_" + cellID + " = {};\n";
    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".isTag = false;\n";
    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".Path = \"" + queryObj.Path + "\";\n";
    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".Name = \"" + queryObj.Name + "\";\n";
    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".FileType = \"" + queryObj.FileType + "\";\n";
    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".ParentPath = \"" + queryObj.ParentPath + "\";\n";
    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".ParentFolderName = \"" + queryObj.ParentFolderName + "\";\n";

    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".divCellId = \"" + divCellId + "\";\n";
    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".MappedQueryTemplate = \"" + queryObj.MappedQueryTemplate + "\";\n";
    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".EnableDisplayTempProperties = " + queryObj.EnableDisplayTempProperties + ";\n";
    //Other useful fields
    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".xPos = \"" + queryObj.xPos + "\";\n";
    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".yPos = \"" + queryObj.yPos + "\";\n";
    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".NewCalculatedPos = \"" + queryObj.NewCalculatedPos + "\";\n";

    //Calculating the cell height and width
    var paneAdjustment = $("#" + cellID).parent().width() / $("#matrix1").width();
    //Adding the width and height hidden due to the pane
    if (sap.ui.getCore().byId("main-shell").isPaneOpen()) {
        var designTimeCellWidth = ($("#" + cellID).parent().width() + (250 * paneAdjustment));
    } else {
        var designTimeCellWidth = $("#" + cellID).parent().width();
    }

    var designTimeCellHeight = $("#" + cellID).parent().height();

    if (designTimeCellWidth == null || designTimeCellHeight == null) {
        designTimeCellWidth = queryObj.DesignTimeCellWidth;
        designTimeCellHeight = queryObj.DesignTimeCellHeight;
        //this flag to check whether the recalculation of designtimeheight,designtimewidth,xpos,ypos,heightper,widthper required
        htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".Recalculate = " + true + ";\n";

    }
    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".DesignTimeCellWidth = " + designTimeCellWidth + ";\n";
    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".DesignTimeCellHeight = " + designTimeCellHeight + ";\n";


    if (queryObj.HeightPercentage == null) {
        if (designTimeCellHeight != null) {
            queryObj.HeightPercentage = queryObj.Height / designTimeCellHeight;
            queryObj.WidthPercentage = queryObj.Width / designTimeCellWidth;
        } else {
            htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".Height = " + queryObj.Height + ";\n";
            htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".Width  = " + queryObj.Width + ";\n";
        }

    }
    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".HeightPercentage = " + queryObj.HeightPercentage + ";\n";
    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".WidthPercentage  = " + queryObj.WidthPercentage + ";\n";


    htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".parentCellId = \"" + cellID + "\";\n";

    if (!runtime) {
        //Setting the runtime only during design mode
        htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".runtime = \"" + runtime + "\";\n";
    }
    if (isObjectNotNull(queryObj.DisplayParameters) && queryObj.DisplayParameters.length != 0) {
        htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".Parameters = " + JSON.stringify(queryObj.DisplayParameters) + ";\n";
    }

    if (isObjectNotNull(queryObj.EventsData)) {
        htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".EventsData = " + JSON.stringify(queryObj.EventsData) + ";\n";
    }
    if (isObjectNotNull(queryObj.DisplayData)) {
        htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".DisplayData = " + JSON.stringify(queryObj.DisplayData) + ";\n";
    }
    if (isObjectNotNull(queryObj.RulesData)) {
        htmlScript += "\t\t\t\t\t\t\tgaugeData_" + index + "_" + cellID + ".RulesData = " + JSON.stringify(queryObj.RulesData) + ";\n";
    }
    htmlScript += "\t\t\t\t\t\t\tvar gaugeObject_" + index + "_" + cellID + " = new com.sap.xmii.ssce.GaugeView(gaugeData_" + index + "_" + cellID + ");\n";

    htmlScript += "\t\t\t\t\t\t\tgaugeObject_" + index + "_" + cellID + ".drawGauge();\n";

    htmlScript += '\t\t\t\t\t}catch(err){\n';
    htmlScript += '\t\t\t\t\t\tconsole.log("An error has occured: " + err.name + "-" + err.message);\n';
    htmlScript += '\t\t\t\t\t\tconsole.log(err.stack);\n';
    htmlScript += '\t\t\t\t\t}\n';
    return htmlScript;
}
/*
/**
 * The default delimiter is kept as "_"
 */
function applyNamespaceDelimiterForTags(tagArray, appendTag) {
	var delim = null;
	for (i in tagArray) {
		if(tagArray[i].QueryParameters != null){
			 for (var j = 0; j < tagArray[i].QueryParameters.length; j++) {
				 if(tagArray[i].QueryParameters[j].Name == "NamespaceDelimeter")
					 delim = tagArray[i].QueryParameters[j].Value;
			 }
		}
	}
	if(delim == null || delim == "" || delim == "NA"){
	    var selectedObjects = "";
	    var delim = '_';
	    if (checkForDemiliter(tagArray, '_')) {
	        delim = '_';
	    } else if (checkForDemiliter(tagArray, '~')) {
	        delim = '~';
	    } else if (checkForDemiliter(tagArray, '\\.')) {
	        delim = '.';
	    } else if (checkForDemiliter(tagArray, '\\|')) {
	        delim = '|';
	    } else if (checkForDemiliter(tagArray, '\\^')) {
	        delim = '^';
	    } else if (checkForDemiliter(tagArray, '%')) {
	        delim = '%';
	    }
	}
    selectedObjects = createDelimitedString(tagArray, delim, appendTag);
    return {
        "delimiter": delim,
        "selectedObjects": selectedObjects
    };
}

function checkForDemiliter(tagArray, delimiter) {
    var re = new RegExp(delimiter, 'g');
    for (i in tagArray) {
        if (tagArray[i].Namespace != undefined)
            namespace = tagArray[i].Namespace;
        else
            namespace = tagArray[i].tagNamespace;
        if (namespace.match(re) != null)
            return false;
    }
    return true;
}

function createDelimitedString(tagArray, delimiter, appendTag) {
    if (appendTag)
        var catalogConnector = "Tag:CatalogConnector";
    else
        var catalogConnector = "CatalogConnector";

    var delimitedString = "";
    if (typeof tagArray == 'undefined' || tagArray.length == 0)
        return "";
    for (i in tagArray) {
        var namespace = "";
        if (tagArray[i].Namespace != undefined)
            namespace = tagArray[i].Namespace.replace(/\//g, delimiter);
        else
            namespace = tagArray[i].tagNamespace.replace(/\//g, delimiter);
        if (i > 0) {
            delimitedString = delimitedString + ',' + catalogConnector + delimiter + namespace;
        } else {
            delimitedString = catalogConnector + delimiter + namespace;
        }
    }
    return delimitedString;
}
/**
 * The function is responsible to load the SVGObject when dragged over Image or Tag
 * @param elem
 * @param url
 * @param isRuntime
 * @return
 */
function loadSVGObject(elem, url, isRuntime, isXacuteQueryPresent) {
    //AJAX Call without Cache
    $.ajax({
        url: url,
        cache: false,
        dataType: "html",
        success: function(data, textStatus, XMLHttpRequest) {
            if (data.indexOf("FatalError") == -1) {
                //update the elem content with data
                elem.html(data);
                //Setting the width and height of the SVG according to the cell height and width
                //The height and width will not be applicable if the svg does not have atribute "viewBox"
                $('#' + elem.attr("id") + '> svg').attr({
                    "preserveAspectRatio": "xMinYMin meet",
                    "height": "100%",
                    "width": "100%"
                });
            } else {
                //if returned data gives an error
                showNotificationBarMsg(3, oBundle.getText("XMSG_DATA_RETRIEVAL_ERROR"));
            }
            //function is reponsible to make the SVG resizable and draggable
            //even after error 
            if (!isRuntime)
                com.sap.xmii.ssce.SVGView.handleClickEventOnSVG(elem, isXacuteQueryPresent); //defined in SVGView.js
        },
        error: function(data, textStatus, XMLHttpRequest) {
            if (textStatus != 200) {
                var errorView = new sap.ui.commons.TextView({
                    text: oBundle.getText("XLBL_SVG_DISPLAY_ERROR")
                });
                elem.html(errorView);
            }
            //function is reponsible to make the SVG resizable and draggable
            //even after error 
            com.sap.xmii.ssce.SVGView.handleClickEventOnSVG(elem, isXacuteQueryPresent); //defined in SVGView.js
        }
    });
    return elem;

}

/**
 * This function is responsible returning the actual width of an object on the UI
 * @param id
 * @return
 */
function getActualWidthFromDOM(id) {
    var width = jQuery.sap.byId(id).width();
    if (width == 0) {
        var sapUIObject = sap.ui.getCore().byId(id);
        if (sapUIObject && sapUIObject instanceof sap.ui.core.Element)
            width = sapUIObject.getDomRef().width;
    }

    return width;
}

/**
 * This function is responsible for returning the actual height of an object on the UI
 * @param id
 * @return
 */
function getActualHeightFromDOM(id) {
    var height = jQuery.sap.byId(id).height();
    if (height == 0 || jQuery.sap.byId(id).css("height") == "100%") {
        var sapUIObject = sap.ui.getCore().byId(id);
        if (sapUIObject && sapUIObject instanceof sap.ui.core.Element)
            height = sapUIObject.getDomRef().height;
    }

    return height;
}

//setting the progress bar
jQuery.sap.byId("progressBar").css("max-width", "50%");

function handlePartSelectionAtDesignTime(event) {
    var vdsViewer = event.getSource();
    var partName = vdsViewer.nodeName;
    var cellId = vdsViewer.getCellID();
    var panel = sap.ui.getCore().byId(cellId);
    var toolBar = sap.ui.getCore().byId(panel.getId() + "ToolBar");
    var tagButton = sap.ui.getCore().byId("" + cellId + "_TagConfig");
    if (tagButton != null)
        tagButton.destroy();
    if (event.getParameters().NodeSelected == "false") {
        return;
    }
    var tagConfigButton = new sap.ui.commons.Button("" + cellId + "_TagConfig", {
        icon: sap.ui.core.IconPool.getIconURI("tags"),
        lite: true,
        tooltip: oBundle.getText("XLBL_CONFIGURE_VDS_PART"),
        press: function(oEvent) {
            if (isObjectNull(vdsViewer.nodeName))
                return;
            var rulesConfigDialog = new TagExprRulesConfig(panel, partName, vdsViewer.selectedNode);
            rulesConfigDialog.createConfigDialog();
        }
    });
    toolBar.addItem(tagConfigButton);
}

function showTrendDialogForTags(namespaceArray) {
	var tagData = [];
    if (isObjectNull(sap.ui.getCore().byId("trendDialog"))) {
        if (isObjectNotNull(namespaceArray)) {
            for (var i = 0; i < namespaceArray.length; i++) {
            	tagData.push({Namespace : namespaceArray[i]});
            }
            var delimitedData = applyNamespaceDelimiterForTags(tagData, false);
        }
        var valueColumns = [];
        var valueColumnsString = "";
        var params = {"QueryTemplate" : "Predefined/DefaultCatalogHistoryQuery", "Mode" : "Current", "SelectedObjects": delimitedData.selectedObjects, "NamespaceDelimeter" : delimitedData.delimiter, "Content-Type" : "text/json"};
		var data = getDataFromServer(XMII_ILLUMINATOR_URL, params, null, null, "false");
		if (data.Rowsets !== undefined && data.Rowsets != null && data.Rowsets.Rowset !== undefined && data.Rowsets.Rowset != null && data.Rowsets.Rowset.length > 0) {
			var rowset = data.Rowsets.Rowset;
			for (var j = 0; j < rowset.length; j++) {
				var rows = rowset[j].Row;
				for(var c=0; c < rowset[j].Columns.Column.length; c++){
					var column = rowset[j].Columns.Column[c];
					if(column.Name != "DateTime"){
						valueColumns.push(column.Name);
					}
				}
			}
			valueColumnsString = valueColumns.toString();
		}
        //creating a dialog with title as the tag name itself
        var trendDialog = new sap.ui.commons.Dialog("trendDialog", {
            title: "Tag Trend",
            width: "50%",
            height: "50%",
            modal: true
        });
        //destroying each and everything when the dialog is closed
        trendDialog.attachClosed(function() {
            showApplets();
            this.destroyContent();
            this.destroy();
        });
        //creating an absolute layout to hold the chart content
        var trendLayout = new sap.ui.commons.layout.AbsoluteLayout("tagTrendChartLayout", {
            width: "100%",
            height: "100%"
        });
        //adding the script for the chart or querytable is created
        var chartHTML = "";
        chartHTML = "<script>\n";
        chartHTML += "try {\n";
        chartHTML += "\tvar tagTrendChart = new com.sap.xmii.chart.hchart.i5Chart(com.sap.xmii.common.util.ChartTypes.LINE, \"Predefined/DefaultCatalogHistoryQuery\");\n";
        chartHTML += "\ttagTrendChart.getQueryObject().setParameter(\"SelectedObjects\", \"" + delimitedData.selectedObjects + "\");\n";
        chartHTML += "\ttagTrendChart.getQueryObject().setParameter(\"NamespaceDelimeter\",\"" + delimitedData.delimiter + "\");\n";
        chartHTML += "\ttagTrendChart.getQueryObject().setMode(\"History\");\n";
        chartHTML += "\ttagTrendChart.getChartTemplateObject().setProperty(\"ValueColumns\",\"" + valueColumnsString + "\");\n";
        chartHTML += "\ttagTrendChart.getChartTemplateObject().setProperty(\"TimeSeries\",true);\n";
        chartHTML += "\ttagTrendChart.setChartHeight(getActualHeightFromDOM(\"trendDialog\"));\n";
        chartHTML += "\ttagTrendChart.draw(\"tagTrendChartLayout\");\n";
        chartHTML += "} catch (err) {\n";
        chartHTML += "\tconsole.log(\"An error has occured: \" + err.name + \"-\" + err.message);\n";
        chartHTML += "}\n";
        chartHTML += "</script>\n";
        trendLayout.addEventDelegate({
            onAfterRendering: function() {
                window.setTimeout("tagTrendChart.refreshData()", 1000);
            }
        });
        //}
        var htmlControl = new sap.ui.core.HTML();
        htmlControl.setContent(chartHTML);
        trendLayout.addContent(htmlControl);
        trendDialog.addContent(trendLayout);
        //calling the refresh data after the chart has been rendered

        trendDialog.open();
        hideApplets();
    }
}

function showTrendDialogForPICGroup(spotData) {

    if (isObjectNull(sap.ui.getCore().byId("trendDialogPICGroup"))) {
        //creating a dialog with title as the tag name itself
        var trendDialog = new sap.ui.commons.Dialog("trendDialogPICGroup", {
            title: oBundle.getText("XLBL_ANALYSIS_CHART"),
            width: "50%",
            height: "50%",
            modal: true
        });
        //destroying each and everything when the dialog is closed
        trendDialog.attachClosed(function() {
            showApplets();
            this.destroyContent();
            this.destroy();
        });
        //creating an absolute layout to hold the chart content
        var trendLayout = new sap.ui.commons.layout.AbsoluteLayout("picGroupTagTrendChartLayout", {
            width: "100%",
            height: "100%"
        });
        //adding the script for the chart or querytable is created
        var chartHTML = "";
        chartHTML = "<script>\n";
        chartHTML += "try {\n";
        chartHTML += "\tvar picTrendChart = new com.sap.xmii.ssce.KPIView (com.sap.xmii.common.util.ChartTypes.LINE, \"DefaultCatalogHistoryQuery\",  \"Predefined\",  \"CatalogQuery\");\n";
        chartHTML += "\tpicTrendChart.setQueryParameters(\"Mode\", \"PICAnalysis\");\n";
        chartHTML += "\tpicTrendChart.setQueryParameters(\"AnalysisAggregationModes\", \"" + spotData.changedParam.AnalysisAggregationModes + "\");\n";
        chartHTML += "\tpicTrendChart.setQueryParameters(\"SelectedTagCategories\", \"" + spotData.changedParam.SelectedTagCategories + "\");\n";
        chartHTML += "\tpicTrendChart.setQueryParameters(\"SelectedTagCategoryAliases\", \"" + spotData.changedParam.SelectedTagCategoryAliases + "\");\n";
        if (isObjectNotNull(spotData.changedParam.StartDate)) {
            chartHTML += "\tpicTrendChart.setQueryParameters(\"StartDate\", \"" + spotData.changedParam.StartDate + "\");\n";
        }
        if (isObjectNotNull(spotData.changedParam.EndDate)) {
            chartHTML += "\tpicTrendChart.setQueryParameters(\"EndDate\", \"" + spotData.changedParam.EndDate + "\");\n";
        }
        if (isObjectNotNull(spotData.changedParam.TimePeriod)) {
            chartHTML += "\tpicTrendChart.setQueryParameters(\"TimePeriod\", \"" + spotData.changedParam.TimePeriod + "\");\n";
        }
        chartHTML += "\tpicTrendChart.setQueryParameters(\"SelectedTagCategoryUOMs\", \"" + spotData.changedParam.SelectedTagCategoryUOMs + "\");\n";
        chartHTML += "\tpicTrendChart.setQueryParameters(\"SelectedNodes\", \"" + spotData.changedParam.SelectedNodes + "\");\n";
        chartHTML += "\tpicTrendChart.setSelectedCategories(\"" + spotData.changedParam.SelectedTagCategories + "\");\n";
        chartHTML += "\tpicTrendChart.setSelectedCategoriesAliases( \"" + spotData.changedParam.SelectedTagCategoryAliases + "\");\n";
        chartHTML += "\tpicTrendChart.setCandidateCategories(\"" + spotData.changedParam.CandidateCategories + "\");\n";
        chartHTML += "\tpicTrendChart.setCandidateCategoriesAliases( \"" + spotData.changedParam.CandidateCategoriesAliases + "\");\n";
        chartHTML += "\tpicTrendChart.setSelectedDimensions(\"Namespace\");\n";
        chartHTML += "\tpicTrendChart.setAggregationModes([ \"" + spotData.changedParam.AnalysisAggregationModes + "\"]);\n";
        chartHTML += "\tpicTrendChart.setGranularity( \"Day\");\n";
        if (isObjectNotNull(spotData.changedParam.TimePeriod)) {
            chartHTML += "\tpicTrendChart.setSelectedDuration(\"" + spotData.changedParam.TimePeriod + "\");\n";
        } else {
            chartHTML += "\tpicTrendChart.setSelectedDuration( \"CurrentMonth\");\n";
        }
        chartHTML += "\tpicTrendChart.setType(\"Chart\");\n";
        chartHTML += "\tpicTrendChart.setChartHeight(getActualHeightFromDOM(\"trendDialogPICGroup\"));\n";
        chartHTML += "\tpicTrendChart.setShowConfigureVisualization(false);\n";
        //chartHTML += "\tpicTrendChart.setDisplayProperties(\"TimeSeries\",true);\n";
        chartHTML += "\tpicTrendChart.draw(\"picGroupTagTrendChartLayout\");\n";
        chartHTML += "} catch (err) {\n";
        chartHTML += "\tconsole.log(\"An error has occured: \" + err.name + \"-\" + err.message);\n";
        chartHTML += "}\n";
        chartHTML += "</script>\n";
        //}
        var htmlControl = new sap.ui.core.HTML();
        htmlControl.setContent(chartHTML);
        trendLayout.addContent(htmlControl);
        trendDialog.addContent(trendLayout);
        //calling the refresh data after the chart has been rendered

        trendDialog.open();
        hideApplets();
    }
}

function getDashboardParam(paramName) {
    var result;
    var param;
    if (Settings.General.Parameters && Settings.General.Parameters.length) {
        Settings.General.Parameters.some(function(parameter) {
            if (parameter.Name === paramName) {
                param = parameter;
                return true;
            }
        });
    }
    if (param) {
        //get latest value instead of default value.
        var paramValue = window[paramName];
        switch (param.Type) {
            case 'String':
                result = paramValue;
                break;
            case 'Boolean':
                result = (paramValue === "true");
                break;
            case 'Integer':
                result = parseInt(paramValue, 10);
                break;
            case 'Double':
                result = parseFloat(paramValue);
                break;
            case 'Timestamp':
                result = new Date(paramValue);
                break;
            default:
                break;
        }
    }
    return result;
}

function resetPageHeight() {
    PageHeightSettings = {
        ParentDivHeight: 99,
        HeaderHeight: 0,
        FooterHeight: 0,
        RuntimeToolBarHeight: 0,
        CurrentCellHeight: 0
    };
}

function getYyyymmFormate(date) {
    var y = date.getFullYear();
    var m = date.getMonth() + 1;
    var d = date.getDate();
    return (m < 10 ? "0" + m : m.toString()) + '/' + (d < 10 ? "0" + d : d.toString()) + '/' + y;
}

function getHhmmssFormate(date) {
    var h = date.getUTCHours();
    var m = date.getUTCMinutes();
    var s = date.getUTCSeconds();
    return (h < 10 ? "0" + h : h.toString()) + ":" + (m < 10 ? "0" + m : m.toString()) + ":" + (s < 10 ? "0" + s : s.toString());
}

function createDimensionArray(dimensions) {
    var i, aDims = [];

    for (i = 0; i < dimensions.length; i++) {
        // a dimension will become part of the string if a filter was set
        if (typeof dimensions[i].filterSelected === 'string' &&
            dimensions[i].filterSelected.length > 0) {
            var dimension = {};
            dimension.name = dimensions[i].dimension;
            dimension.value = dimensions[i].filterSelected;
            aDims.push(dimension);
        }
    }
    if (aDims.length === 0) aDims.push({
        name: "",
        value: ""
    });
    return aDims;
}

function repairOperator(rowset) {

    for (var j = 0; j < rowset.Row.length; j++) {
        for (var key in rowset.Row[j]) {
            if (key.indexOf("_ADD_") > -1 || key.indexOf("_MUL_") > -1 ||
                key.indexOf("_REM_") > -1 || key.indexOf("_LB_") > -1 || key.indexOf("_RB_") > -1) {
                var tempKey = key.replace(/_ADD_/g, "+");
                tempKey = tempKey.replace(/_MUL_/g, "*");
                // tempKey = tempKey.replace(/_DIV_/g,"/");
                tempKey = tempKey.replace(/_REM_/g, "%");
                tempKey = tempKey.replace(/_RB_/g, ")");
                tempKey = tempKey.replace(/_LB_/g, "(");
                rowset.Row[j][tempKey] = rowset.Row[j][key];
                delete rowset.Row[j][key];
            }
        }
    }
    for (var i = 0; i < rowset.Columns.Column.length; i++) {
        if (rowset.Columns.Column[i].Name.indexOf("_ADD_") > -1 || rowset.Columns.Column[i].Name.indexOf("_MUL_") > -1 ||
            rowset.Columns.Column[i].Name.indexOf("_REM_") > -1 || rowset.Columns.Column[i].Name.indexOf("_LB_") > -1 || rowset.Columns.Column[i].Name.indexOf("_RB_") > -1) {
            rowset.Columns.Column[i].Name = rowset.Columns.Column[i].Name.replace(/_ADD_/g, "+");
            rowset.Columns.Column[i].Description = rowset.Columns.Column[i].Description.replace(/_ADD_/g, "+");
            rowset.Columns.Column[i].SourceColumn = rowset.Columns.Column[i].SourceColumn.replace(/_ADD_/g, "+");

            rowset.Columns.Column[i].Name = rowset.Columns.Column[i].Name.replace(/_MUL_/g, "*");
            rowset.Columns.Column[i].Description = rowset.Columns.Column[i].Description.replace(/_MUL_/g, "*");
            rowset.Columns.Column[i].SourceColumn = rowset.Columns.Column[i].SourceColumn.replace(/_MUL_/g, "*");

            // rowset.Columns.Column[i].Name = rowset.Columns.Column[i].Name.replace(/_DIV_/g,"/");
            // rowset.Columns.Column[i].Description = rowset.Columns.Column[i].Description.replace(/_DIV_/g,"/");
            // rowset.Columns.Column[i].SourceColumn = rowset.Columns.Column[i].SourceColumn.replace(/_DIV_/g,"/");

            rowset.Columns.Column[i].Name = rowset.Columns.Column[i].Name.replace(/_REM_/g, "%");
            rowset.Columns.Column[i].Description = rowset.Columns.Column[i].Description.replace(/_REM_/g, "%");
            rowset.Columns.Column[i].SourceColumn = rowset.Columns.Column[i].SourceColumn.replace(/_REM_/g, "%");

            rowset.Columns.Column[i].Name = rowset.Columns.Column[i].Name.replace(/_RB_/g, ")");
            rowset.Columns.Column[i].Description = rowset.Columns.Column[i].Description.replace(/_RB_/g, ")");
            rowset.Columns.Column[i].SourceColumn = rowset.Columns.Column[i].SourceColumn.replace(/_RB_/g, ")");

            rowset.Columns.Column[i].Name = rowset.Columns.Column[i].Name.replace(/_LB_/g, "(");
            rowset.Columns.Column[i].Description = rowset.Columns.Column[i].Description.replace(/_LB_/g, "(");
            rowset.Columns.Column[i].SourceColumn = rowset.Columns.Column[i].SourceColumn.replace(/_LB_/g, "(");
        }
    }
    // jsonObj.Rowsets.Rowset[0] = rowset;
    return rowset;
}

function getVirtualTagIDValue(tagArray){
	//Getting the transaction count and tagId if the count is 1
	var virtualTagCount = 0;
	var virtualTagID;
	for(var i=0;i<tagArray.length;i++){
		if((tagArray[i].IsVirtualMeter == "true" || tagArray[i].VirtualTag) && (tagArray[i].TransactionPath != null || tagArray[i].TransactionPath != undefined || tagArray[i].TransactionPath != "")){
			virtualTagCount++;
		}
	}
	if(virtualTagCount == 1){
		var tagId;
		for(var i=0;i<tagArray.length;i++){
			if((tagArray[i].IsVirtualMeter == "true" || tagArray[i].VirtualTag) && (tagArray[i].TransactionPath != null || tagArray[i].TransactionPath != undefined || tagArray[i].TransactionPath != "")){
				tagId = tagArray[i].Id;
			}
		}
		if(tagId != undefined || tagId != null){
			virtualTagID = tagId;
		}
	}
	return virtualTagID;
}
