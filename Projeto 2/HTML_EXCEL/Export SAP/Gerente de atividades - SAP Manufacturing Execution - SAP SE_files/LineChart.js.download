com.sap.xmii.chart.ui5 = com.sap.xmii.chart.ui5 || {};

var parentChartComponent = new com.sap.xmii.chart.ui5.ChartComponent();

/**
 * LineChart Constructor
 * 
 * @param chartConfig
 * @param qryResultData
 */
com.sap.xmii.chart.ui5.LineChart = function(chartConfig, model) {
	/*this.messageBundle = com.sap.xmii.common.util.MIIi5Util
			.getMessageBundle(com.sap.xmii.common.util.GenericConstants.MESSAGE_BUNDLE_URL);*/

	this.chartPropertyConfig = chartConfig;
	this.chartModel = model;

	this.chartCompnModel = new com.sap.xmii.chart.model.ChartComponentModel(
			this.chartModel, this.chartPropertyConfig);

	this.parent.init.call(this, chartConfig, model, this);
	this.addGettersAndSetters();

};

com.sap.xmii.chart.ui5.LineChart.prototype = parentChartComponent;
com.sap.xmii.chart.ui5.LineChart.prototype.constructor = com.sap.xmii.chart.ui5.LineChart;
com.sap.xmii.chart.ui5.LineChart.prototype.parent = com.sap.xmii.chart.ui5.ChartComponent.prototype;

/**
 * Creates a element of UI5 LineChart with Data attached to it
 * 
 * @return
 */
com.sap.xmii.chart.ui5.LineChart.prototype.create = function() {

	// Backwards compatibility with iChart applet
	if (this.chartPropertyConfig.getProperty(com.sap.xmii.common.util.ChartPropertyConstants.GRID_LINE_COLOR) == undefined) {
		var gridLineColor = this.chartPropertyConfig.getProperty(com.sap.xmii.common.util.ChartPropertyConstants.HORIZONTAL_GRID_COLOR);
		this.chartPropertyConfig.setProperty(com.sap.xmii.common.util.ChartPropertyConstants.GRID_LINE_COLOR, gridLineColor);
	}
	
	var gridColor = this.chartPropertyConfig.getProperty(com.sap.xmii.common.util.ChartPropertyConstants.GRID_LINE_COLOR);
	var backgroundColor = this.chartPropertyConfig.getProperty(com.sap.xmii.common.util.ChartPropertyConstants.CHART_BACKGROUND_COLOR);
	var cssText = '.v-gridline{  stroke: ' + gridColor + '; } .v-background-body{  fill: '+ backgroundColor +'; }';

	this.ui5ChartElement = new sap.viz.ui5.Line( {

		width : this.width,//this.chartPropertyConfig.getProperty(com.sap.xmii.common.util.ChartPropertyConstants.WIDTH),
		height : this.height,//this.chartPropertyConfig.getProperty(com.sap.xmii.common.util.ChartPropertyConstants.HEIGHT),
		legend : {
			visible : JSON.parse(this.chartPropertyConfig.getProperty(com.sap.xmii.common.util.ChartPropertyConstants.SHOW_LEGEND)),
			ishierarchical : true,
			isScrollable : true,
			title : {
				visible : true,
				text : this.chartPropertyConfig.getProperty(com.sap.xmii.common.util.ChartPropertyConstants.LEG_DESC_LABEL)
			}
		},
		interaction : {
			selectability : {
			mode : this.chartPropertyConfig.getSelectionType(this.chartPropertyConfig.getProperty(com.sap.xmii.common.util.ChartPropertyConstants.ENABLE_ITEM_SEL))
		}
		},
		
		plotArea : {
			width : 2,
			animation : {
			dataLoading : false
		},
		drawingEffect : this.chartPropertyConfig.getChartLook(this.chartPropertyConfig.getProperty(com.sap.xmii.common.util.ChartPropertyConstants.GLOSSY)),
		hoverline : {},
		marker : {
			visible : this.chartPropertyConfig.showMarker(this.chartPropertyConfig.getProperty(com.sap.xmii.common.util.ChartPropertyConstants.MARKER_STYLE)),//JSON.parse(this.chartPropertyConfig.getProperty(com.sap.xmii.common.util.ChartPropertyConstants.SHOW_VAL_MARKER)),
			shape : this.chartPropertyConfig.getMarkerStyle(this.chartPropertyConfig.getProperty(com.sap.xmii.common.util.ChartPropertyConstants.MARKER_STYLE)),
			size : this.chartPropertyConfig.getMarkerSize(this.chartPropertyConfig.getProperty(com.sap.xmii.common.util.ChartPropertyConstants.MARKER_SIZE))
		}
		},
		yAxis : {
			visible:JSON.parse(this.chartPropertyConfig.getProperty(com.sap.xmii.common.util.ChartPropertyConstants.SHOW_YAXIS)),
			color : '#DFDFDF', // color of yAxis
			title : {
				visible : this.chartPropertyConfig.getProperty(com.sap.xmii.common.util.ChartPropertyConstants.SHOW_YAXIS_LABEL),
				text : this.chartPropertyConfig.getProperty(com.sap.xmii.common.util.ChartPropertyConstants.YAXIS_LABEL),
				applyAxislineColor : true
			},
			gridline : {
				visible : ((this.chartPropertyConfig.getProperty(com.sap.xmii.common.util.ChartPropertyConstants.SHOW_GRID_LINE) == true)			// i5Chart
						|| (this.chartPropertyConfig.getProperty(com.sap.xmii.common.util.ChartPropertyConstants.SHOW_HORIZONTAL_GRID) == true)),	// iChart
				showFirstLine : true,
				showLastLine : true,
				size : 2
			},
			scale: {
				fixedRange : this.applyScaling,
				minValue : this.min,
				maxValue : this.max
			}
		},
	
	
		xAxis : {
			visible : JSON.parse(this.chartPropertyConfig.getProperty(com.sap.xmii.common.util.ChartPropertyConstants.SHOW_XAXIS)),
			color : '#DFDFDF',
			title : {
				visible : this.chartPropertyConfig.getProperty(com.sap.xmii.common.util.ChartPropertyConstants.SHOW_XAXIS_LABEL),
				text : this.chartPropertyConfig.getProperty(com.sap.xmii.common.util.ChartPropertyConstants.XAXIS_LABEL),
				applyAxislineColor : true
			}
		},
		background : {
			visible : true,
			drawingEffect : sap.viz.ui5.types.Background_drawingEffect.normal,
			direction : sap.viz.ui5.types.Background_direction.vertical,
			border : {
			left : {
			visible : true
		},
		right : {
			visible : true
		},
		top : {
			visible : true
		},
		bottom : {
			visible : true
		}
		}
		},
		dataLabel: {
			visible: JSON.parse(this.chartPropertyConfig.getProperty(com.sap.xmii.common.util.ChartPropertyConstants.SHOW_VAL_MARKER))
		},
		legendGroup: {
			layout: {
			position: "right"
		}
		},
		title : {
			visible : false
		},
		css : cssText,
		dataset : this.chartCompnModel.dataset
		});
		
		//setting color for line components
	    var colorPalette = this.ui5ChartElement.getPlotArea().getColorPalette();
	    var maxPenCount = 32;
	    for(var i=0; i<maxPenCount; i++) {
	          colorPalette[i] = this.chartPropertyConfig.getProperty("PenColor." + (i+1));
	    }
	    this.ui5ChartElement.getPlotArea().setColorPalette(colorPalette);
	    
	  //setting format rules for violation marker color.
	    if(!(this.chartModel==undefined)){
	    	var modelData = this.chartModel.getModelData();
	    	var chartPropertyConfig = this.chartPropertyConfig;
	    	com.sap.xmii.common.util.MIIi5Util.evaluateLimits(modelData, chartPropertyConfig);
	    	upperLimit = parseInt(this.chartPropertyConfig.getProperty("UpperLimit"));
	    	lowerLimit = parseInt(this.chartPropertyConfig.getProperty("LowerLimit"));

	    	//the best way is to use this.ui5ChartElement.getDataset().getMeasures to get the measure names,
	    	//but in some case, the dataset is not initialized when created, use the valuecolumns as a temp way.
	    	var measureNames = (this.chartPropertyConfig.getProperty("ValueColumns") || "").split(',');
	    	if (this.ui5ChartElement.getDataset()) {
	    		var measures = this.ui5ChartElement.getDataset().getMeasures();
	    		measureNames = [];
	    		for (var i in measures) {
	    			measureNames.push(measures[i].getName());
	    		}
	    	}
			if(this.chartPropertyConfig.getProperty(com.sap.xmii.common.util.SpecLimits.ALLOW_SPEC_LIMIT_ALARM).toString() ==  com.sap.xmii.common.util.GenericConstants.TRUE){
				var formatRulesObject = '[';
				for(var i = 0; i <measureNames.length; i++) {
					formatRulesObject = formatRulesObject + '{condition:[{"' + measureNames[i] + '":{min:' + upperLimit + '}},' + 
										'{"' + measureNames[i] + '":{max:' + lowerLimit + '}}], color:"' +  
										this.chartPropertyConfig.getProperty("ViolationMarkerColor."+(i+1)) + '"},';
				}
				formatRulesObject = formatRulesObject.substring(0, formatRulesObject.lastIndexOf(',')) + ']';
				//Replacing eval code
				//this.ui5ChartElement.getPlotArea().setFormatRules(eval(formatRulesObject));
				this.ui5ChartElement.getPlotArea().setFormatRules(Function('return '+formatRulesObject)());
				//end of code
			}
	    }
		this.ui5ChartElement.getToolTip().setVisible(this.chartPropertyConfig.getProperty(com.sap.xmii.common.util.ChartPropertyConstants.SHOW_TOOLTIP) == true);
		this.ui5ChartElement.setModel(this.chartCompnModel.oModel);
		return this.ui5ChartElement;
	
	};
